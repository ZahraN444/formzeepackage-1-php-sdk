<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\OrganisationCreation;
use Form3PublicAPILib\Models\OrganisationCreationResponse;
use Form3PublicAPILib\Models\OrganisationDetailsListResponse;
use Form3PublicAPILib\Models\OrganisationDetailsResponse;
use Form3PublicAPILib\Models\OrganisationUpdate;

class OrganisationsController extends BaseController
{
    /**
     * List all organisations
     *
     * @param string|null $filterChildOrganisationId Child org id
     * @param string[]|null $filterOrganisationIds Organisation ids
     *
     * @return OrganisationDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllOrganisations(
        ?string $filterChildOrganisationId = null,
        ?array $filterOrganisationIds = null
    ): OrganisationDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/units')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('filter[child_organisation_id]', $filterChildOrganisationId),
                QueryParam::init('filter[organisation_ids]', $filterOrganisationIds)
            );

        $_resHandler = $this->responseHandler()->type(OrganisationDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create organisation
     *
     * @param OrganisationCreation|null $organisationCreationRequest
     *
     * @return OrganisationCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createOrganisation(
        ?OrganisationCreation $organisationCreationRequest = null
    ): OrganisationCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/organisation/units')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($organisationCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(OrganisationCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch organisation
     *
     * @param string $id Organisation Id
     *
     * @return OrganisationDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchOrganisation(string $id): OrganisationDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/units/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(OrganisationDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update organisation
     *
     * @param string $id Organisation Id
     * @param OrganisationUpdate|null $organisationUpdateRequest
     *
     * @return OrganisationDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateOrganisation(
        string $id,
        ?OrganisationUpdate $organisationUpdateRequest = null
    ): OrganisationDetailsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/organisation/units/{id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($organisationUpdateRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(OrganisationDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
