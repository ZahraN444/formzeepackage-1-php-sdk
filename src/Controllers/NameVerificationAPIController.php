<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\NameVerificationAdmissionDetailsResponse;
use Form3PublicAPILib\Models\NameVerificationCreation;
use Form3PublicAPILib\Models\NameVerificationCreationResponse;
use Form3PublicAPILib\Models\NameVerificationDetailsListResponse;
use Form3PublicAPILib\Models\NameVerificationDetailsResponse;
use Form3PublicAPILib\Utils\DateTimeHelper;

class NameVerificationAPIController extends BaseController
{
    /**
     * List name verifications
     *
     * @param int|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string|null $filterOrganisationId Filter by organisation id
     * @param string|null $filterAccountClassification Filter by account classification
     * @param string|null $filterAccountNumber Filter by account number
     * @param string|null $filterBankId Filter by bank id
     * @param string|null $filterBankIdCode Filter by bank id code
     * @param string[]|null $filterName Filter by name
     * @param string|null $filterSecondaryIdentification Filter by secondary identification
     * @param \DateTime|null $filterCreatedDateFrom Filter by created date from
     * @param \DateTime|null $filterCreatedDateTo Filter by created date to
     * @param \DateTime|null $filterModifiedDateFrom Filter by modified date from
     * @param \DateTime|null $filterModifiedDateTo Filter by modified date to
     * @param \DateTime|null $filterAdmissionCreatedDateFrom Filter by admission created date from
     * @param \DateTime|null $filterAdmissionCreatedDateTo Filter by admission created date to
     * @param \DateTime|null $filterAdmissionModifiedDateFrom Filter by admission modified date from
     * @param \DateTime|null $filterAdmissionModifiedDateTo Filter by admission modified date to
     * @param string|null $filterAdmissionStatus Filter by admission status
     * @param string|null $filterAdmissionAnswer Filter by admission answer
     * @param string|null $filterAdmissionActualName Filter by admission actual name
     * @param string|null $filterAdmissionReason Filter by admission reason
     * @param string|null $filterAdmissionReasonCode Filter by admission reason code
     * @param \DateTime|null $filterSubmissionCreatedDateFrom Filter by submission created date from
     * @param \DateTime|null $filterSubmissionCreatedDateTo Filter by submission created date to
     * @param \DateTime|null $filterSubmissionModifiedDateFrom Filter by submission modified date
     *        from
     * @param \DateTime|null $filterSubmissionModifiedDateTo Filter by submission modified date to
     * @param string|null $filterSubmissionStatus Filter by submission status
     * @param string|null $filterSubmissionAnswer Filter by submission answer
     * @param string|null $filterSubmissionActualName Filter by submission actual name
     * @param string|null $filterSubmissionReason Filter by submission reason
     * @param string|null $filterSubmissionReasonCode Filter by submission reason code
     *
     * @return NameVerificationDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listNameVerifications(
        ?int $pageNumber = null,
        ?int $pageSize = null,
        ?string $filterOrganisationId = null,
        ?string $filterAccountClassification = null,
        ?string $filterAccountNumber = null,
        ?string $filterBankId = null,
        ?string $filterBankIdCode = null,
        ?array $filterName = null,
        ?string $filterSecondaryIdentification = null,
        ?\DateTime $filterCreatedDateFrom = null,
        ?\DateTime $filterCreatedDateTo = null,
        ?\DateTime $filterModifiedDateFrom = null,
        ?\DateTime $filterModifiedDateTo = null,
        ?\DateTime $filterAdmissionCreatedDateFrom = null,
        ?\DateTime $filterAdmissionCreatedDateTo = null,
        ?\DateTime $filterAdmissionModifiedDateFrom = null,
        ?\DateTime $filterAdmissionModifiedDateTo = null,
        ?string $filterAdmissionStatus = null,
        ?string $filterAdmissionAnswer = null,
        ?string $filterAdmissionActualName = null,
        ?string $filterAdmissionReason = null,
        ?string $filterAdmissionReasonCode = null,
        ?\DateTime $filterSubmissionCreatedDateFrom = null,
        ?\DateTime $filterSubmissionCreatedDateTo = null,
        ?\DateTime $filterSubmissionModifiedDateFrom = null,
        ?\DateTime $filterSubmissionModifiedDateTo = null,
        ?string $filterSubmissionStatus = null,
        ?string $filterSubmissionAnswer = null,
        ?string $filterSubmissionActualName = null,
        ?string $filterSubmissionReason = null,
        ?string $filterSubmissionReasonCode = null
    ): NameVerificationDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/nameverifications')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[account_classification]', $filterAccountClassification),
                QueryParam::init('filter[account_number]', $filterAccountNumber),
                QueryParam::init('filter[bank_id]', $filterBankId),
                QueryParam::init('filter[bank_id_code]', $filterBankIdCode),
                QueryParam::init('filter[name]', $filterName),
                QueryParam::init('filter[secondary_identification]', $filterSecondaryIdentification),
                QueryParam::init('filter[created_date_from]', $filterCreatedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[created_date_to]', $filterCreatedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[modified_date_from]', $filterModifiedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[modified_date_to]', $filterModifiedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.created_date_from]', $filterAdmissionCreatedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.created_date_to]', $filterAdmissionCreatedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.modified_date_from]', $filterAdmissionModifiedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.modified_date_to]', $filterAdmissionModifiedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.status]', $filterAdmissionStatus),
                QueryParam::init('filter[admission.answer]', $filterAdmissionAnswer),
                QueryParam::init('filter[admission.actual_name]', $filterAdmissionActualName),
                QueryParam::init('filter[admission.reason]', $filterAdmissionReason),
                QueryParam::init('filter[admission.reason_code]', $filterAdmissionReasonCode),
                QueryParam::init('filter[submission.created_date_from]', $filterSubmissionCreatedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.created_date_to]', $filterSubmissionCreatedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.modified_date_from]', $filterSubmissionModifiedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.modified_date_to]', $filterSubmissionModifiedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.status]', $filterSubmissionStatus),
                QueryParam::init('filter[submission.answer]', $filterSubmissionAnswer),
                QueryParam::init('filter[submission.actual_name]', $filterSubmissionActualName),
                QueryParam::init('filter[submission.reason]', $filterSubmissionReason),
                QueryParam::init('filter[submission.reason_code]', $filterSubmissionReasonCode)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(NameVerificationDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Name verification creation request
     *
     * @param NameVerificationCreation|null $nameVerificationCreationRequest
     *
     * @return NameVerificationCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function nameVerificationCreationRequest(
        ?NameVerificationCreation $nameVerificationCreationRequest = null
    ): NameVerificationCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/organisation/nameverifications')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($nameVerificationCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(NameVerificationCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch name verification resource
     *
     * @param string $id Name Verification ID
     *
     * @return NameVerificationDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchNameVerificationResource(string $id): NameVerificationDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/nameverifications/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(NameVerificationDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Name verification admission fetch request
     *
     * @param string $nameVerificationId
     * @param string $id
     *
     * @return NameVerificationAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function nameVerificationAdmissionFetchRequest(
        string $nameVerificationId,
        string $id
    ): NameVerificationAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/organisation/nameverifications/{name_verification_id}/admissions/{id}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('name_verification_id', $nameVerificationId),
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json')
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(NameVerificationAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
