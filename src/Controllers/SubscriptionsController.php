<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\SubscriptionAmendment;
use Form3PublicAPILib\Models\SubscriptionCreation;
use Form3PublicAPILib\Models\SubscriptionCreationResponse;
use Form3PublicAPILib\Models\SubscriptionDetailsListResponse;
use Form3PublicAPILib\Models\SubscriptionDetailsResponse;

class SubscriptionsController extends BaseController
{
    /**
     * List all subscriptions
     *
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterEventType Filter by event type
     * @param string[]|null $filterRecordType Filter by record type
     * @param string[]|null $filterOrganisationId Filter by organisation id
     * @param bool|null $filterDeactivated Filter by deactivated
     * @param string|null $filterCallbackTransport Filter by callback_transport
     * @param string|null $filterCallbackUriSearchTerm Filter on callback_uri containing a search
     *        term
     * @param bool|null $filterNotificationFilter Filter by existence of notification filters
     *
     * @return SubscriptionDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listSubscriptions(
        ?string $pageNumber = null,
        ?int $pageSize = null,
        ?array $filterEventType = null,
        ?array $filterRecordType = null,
        ?array $filterOrganisationId = null,
        ?bool $filterDeactivated = null,
        ?string $filterCallbackTransport = null,
        ?string $filterCallbackUriSearchTerm = null,
        ?bool $filterNotificationFilter = null
    ): SubscriptionDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/notification/subscriptions')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[event_type]', $filterEventType),
                QueryParam::init('filter[record_type]', $filterRecordType),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[deactivated]', $filterDeactivated),
                QueryParam::init('filter[callback_transport]', $filterCallbackTransport),
                QueryParam::init('filter[callback_uri_search_term]', $filterCallbackUriSearchTerm),
                QueryParam::init('filter[notification_filter]', $filterNotificationFilter)
            );

        $_resHandler = $this->responseHandler()->type(SubscriptionDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create subscription
     *
     * @param SubscriptionCreation $subscriptionCreationRequest
     *
     * @return SubscriptionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createSubscription(SubscriptionCreation $subscriptionCreationRequest): SubscriptionCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/notification/subscriptions')
            ->auth('OAuth2')
            ->parameters(
                BodyParam::init($subscriptionCreationRequest),
                HeaderParam::init('Content-Type', 'application/vnd.api+json')
            );

        $_resHandler = $this->responseHandler()->type(SubscriptionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deletes a subscription
     *
     * @param string $id Subscription Id
     * @param int $version Version
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteSubscription(string $id, int $version): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/notification/subscriptions/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), QueryParam::init('version', $version));

        $this->execute($_reqBuilder);
    }

    /**
     * Fetch subscription
     *
     * @param string $id Subscription Id
     *
     * @return SubscriptionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchSubscription(string $id): SubscriptionDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/notification/subscriptions/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(SubscriptionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update subscription details
     *
     * @param string $id Subscription Id
     * @param SubscriptionAmendment|null $subscriptionUpdateRequest
     *
     * @return SubscriptionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function patchSubscription(
        string $id,
        ?SubscriptionAmendment $subscriptionUpdateRequest = null
    ): SubscriptionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/notification/subscriptions/{id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($subscriptionUpdateRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Error', ApiErrorException::class))
            ->type(SubscriptionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
