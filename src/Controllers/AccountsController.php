<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\AccountAmendment;
use Form3PublicAPILib\Models\AccountCreation;
use Form3PublicAPILib\Models\AccountCreationResponse;
use Form3PublicAPILib\Models\AccountDetailsListResponse;
use Form3PublicAPILib\Models\AccountDetailsResponse;
use Form3PublicAPILib\Models\AccountEventListResponse;

class AccountsController extends BaseController
{
    /**
     * List accounts
     *
     * @param string|null $pageNumber Which page to select
     * @param string|null $pageBefore Cursor value for getting previous page
     * @param string|null $pageAfter Cursor value for getting next page
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterOrganisationId Filter by organisation id
     * @param string[]|null $filterBankIdCode Filter by type of bank id e.g. "GBDSC"
     * @param string[]|null $filterBankId Filter by bank id e.g. sort code or bic
     * @param string[]|null $filterAccountNumber Filter by account number
     * @param string[]|null $filterCountry Filter by country e.g. FR,GB
     * @param string[]|null $filterCustomerId Filter by customer_id
     * @param string[]|null $filterIban Filter by IBAN
     *
     * @return AccountDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAccounts(
        ?string $pageNumber = null,
        ?string $pageBefore = null,
        ?string $pageAfter = null,
        ?int $pageSize = null,
        ?array $filterOrganisationId = null,
        ?array $filterBankIdCode = null,
        ?array $filterBankId = null,
        ?array $filterAccountNumber = null,
        ?array $filterCountry = null,
        ?array $filterCustomerId = null,
        ?array $filterIban = null
    ): AccountDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/accounts')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[before]', $pageBefore),
                QueryParam::init('page[after]', $pageAfter),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[bank_id_code]', $filterBankIdCode),
                QueryParam::init('filter[bank_id]', $filterBankId),
                QueryParam::init('filter[account_number]', $filterAccountNumber),
                QueryParam::init('filter[country]', $filterCountry),
                QueryParam::init('filter[customer_id]', $filterCustomerId),
                QueryParam::init('filter[iban]', $filterIban)
            );

        $_resHandler = $this->responseHandler()->type(AccountDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create account
     *
     * @param AccountCreation|null $accountCreationRequest
     *
     * @return AccountCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAccount(?AccountCreation $accountCreationRequest = null): AccountCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/organisation/accounts')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($accountCreationRequest)
            );

        $_resHandler = $this->responseHandler()->type(AccountCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete account
     *
     * @param string $id Account Id
     * @param int $version Version
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAccount(string $id, int $version): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/organisation/accounts/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), QueryParam::init('version', $version));

        $this->execute($_reqBuilder);
    }

    /**
     * Fetch account
     *
     * @param string $id Account Id
     *
     * @return AccountDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAccount(string $id): AccountDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/accounts/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(AccountDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Amend account
     *
     * @param string $id Account Id
     * @param AccountAmendment|null $accountAmendRequest
     *
     * @return AccountDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function amendAccount(string $id, ?AccountAmendment $accountAmendRequest = null): AccountDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/organisation/accounts/{id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($accountAmendRequest)
            );

        $_resHandler = $this->responseHandler()->type(AccountDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch account events
     *
     * @param string $id Account Id
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     *
     * @return AccountEventListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAccountEvents(
        string $id,
        ?string $pageNumber = null,
        ?int $pageSize = null
    ): AccountEventListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/accounts/{id}/events')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize)
            );

        $_resHandler = $this->responseHandler()->type(AccountEventListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
