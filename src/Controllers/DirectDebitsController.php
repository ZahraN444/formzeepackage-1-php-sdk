<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\DirectDebitAdmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitCreation;
use Form3PublicAPILib\Models\DirectDebitCreationResponse;
use Form3PublicAPILib\Models\DirectDebitDecisionAdmissionCreation;
use Form3PublicAPILib\Models\DirectDebitDecisionAdmissionCreationResponse;
use Form3PublicAPILib\Models\DirectDebitDecisionAdmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitDecisionCreation;
use Form3PublicAPILib\Models\DirectDebitDecisionCreationResponse;
use Form3PublicAPILib\Models\DirectDebitDecisionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitDecisionSubmissionCreation;
use Form3PublicAPILib\Models\DirectDebitDecisionSubmissionCreationResponse;
use Form3PublicAPILib\Models\DirectDebitDecisionSubmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitDetailsListResponse;
use Form3PublicAPILib\Models\DirectDebitDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitRecallAdmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitRecallCreation;
use Form3PublicAPILib\Models\DirectDebitRecallCreationResponse;
use Form3PublicAPILib\Models\DirectDebitRecallDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitRecallSubmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReturnAdmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReturnCreation;
use Form3PublicAPILib\Models\DirectDebitReturnCreationResponse;
use Form3PublicAPILib\Models\DirectDebitReturnDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReturnReversalAdmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReturnReversalDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReturnSubmissionCreation;
use Form3PublicAPILib\Models\DirectDebitReturnSubmissionCreationResponse;
use Form3PublicAPILib\Models\DirectDebitReturnSubmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReversalAdmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReversalCreation;
use Form3PublicAPILib\Models\DirectDebitReversalCreationResponse;
use Form3PublicAPILib\Models\DirectDebitReversalDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitReversalSubmissionCreation;
use Form3PublicAPILib\Models\DirectDebitReversalSubmissionCreationResponse;
use Form3PublicAPILib\Models\DirectDebitReversalSubmissionDetailsResponse;
use Form3PublicAPILib\Models\DirectDebitSubmissionCreation;
use Form3PublicAPILib\Models\DirectDebitSubmissionCreationResponse;
use Form3PublicAPILib\Models\DirectDebitSubmissionDetailsResponse;
use Form3PublicAPILib\Models\FilterNotRelationshipsEnum;
use Form3PublicAPILib\Models\FilterRelationshipsEnum;
use Form3PublicAPILib\Utils\DateTimeHelper;

class DirectDebitsController extends BaseController
{
    /**
     * List direct debits
     *
     * @param string|null $pageNumber Which page to select
     * @param string|null $pageBefore Cursor for previous page (this is a base64-encoded UUID
     *        continuation token returned from the application and should not be manually
     *        generated, unless requesting the last page, where the value should be set to "end").
     * @param string|null $pageAfter Cursor for next page (this is a base64-encoded UUID
     *        continuation token returned from the application and should not be manually
     *        generated, unless requesting the first page, where the value should be set to
     *        "start").
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterOrganisationId Filter by organisation id
     * @param \DateTime|null $filterCreatedDateFrom
     * @param \DateTime|null $filterCreatedDateTo
     * @param \DateTime|null $filterModifiedDateFrom
     * @param \DateTime|null $filterModifiedDateTo
     * @param string|null $filterDebtorPartyAccountNumber
     * @param string|null $filterDebtorPartyBankId
     * @param string|null $filterBeneficiaryPartyAccountNumber
     * @param string|null $filterBeneficiaryPartyBankId
     * @param string|null $filterCurrency
     * @param string|null $filterPaymentScheme
     * @param string|null $filterPaymentType
     * @param \DateTime|null $filterProcessingDateFrom
     * @param \DateTime|null $filterProcessingDateTo
     * @param string|null $filterClearingId
     * @param \DateTime|null $filterAdmissionAdmissionDateFrom
     * @param \DateTime|null $filterAdmissionAdmissionDateTo
     * @param string|null $filterAdmissionStatus Filter by admission status
     * @param string|null $filterAdmissionSchemeStatusCode Filter by admission scheme status code
     * @param string|null $filterAmount Filter by amount
     * @param string|null $filterReference Filter by reference
     * @param string|null $filterUniqueSchemeId Filter by unique scheme id
     * @param \DateTime|null $filterSubmissionSubmissionDateFrom
     * @param \DateTime|null $filterSubmissionSubmissionDateTo
     * @param string|null $filterSubmissionStatus Filter by submission status
     * @param string|null $filterSubmissionSchemeStatusCode Filter by submission scheme status code
     * @param string[]|null $filterRelationships Filter for direct debits containing all of the
     *        requested relationships
     * @param string[]|null $filterNotRelationships Filter for direct debits containing none of the
     *        requested relationships
     *
     * @return DirectDebitDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebits(
        ?string $pageNumber = null,
        ?string $pageBefore = null,
        ?string $pageAfter = null,
        ?int $pageSize = null,
        ?array $filterOrganisationId = null,
        ?\DateTime $filterCreatedDateFrom = null,
        ?\DateTime $filterCreatedDateTo = null,
        ?\DateTime $filterModifiedDateFrom = null,
        ?\DateTime $filterModifiedDateTo = null,
        ?string $filterDebtorPartyAccountNumber = null,
        ?string $filterDebtorPartyBankId = null,
        ?string $filterBeneficiaryPartyAccountNumber = null,
        ?string $filterBeneficiaryPartyBankId = null,
        ?string $filterCurrency = null,
        ?string $filterPaymentScheme = null,
        ?string $filterPaymentType = null,
        ?\DateTime $filterProcessingDateFrom = null,
        ?\DateTime $filterProcessingDateTo = null,
        ?string $filterClearingId = null,
        ?\DateTime $filterAdmissionAdmissionDateFrom = null,
        ?\DateTime $filterAdmissionAdmissionDateTo = null,
        ?string $filterAdmissionStatus = null,
        ?string $filterAdmissionSchemeStatusCode = null,
        ?string $filterAmount = null,
        ?string $filterReference = null,
        ?string $filterUniqueSchemeId = null,
        ?\DateTime $filterSubmissionSubmissionDateFrom = null,
        ?\DateTime $filterSubmissionSubmissionDateTo = null,
        ?string $filterSubmissionStatus = null,
        ?string $filterSubmissionSchemeStatusCode = null,
        ?array $filterRelationships = null,
        ?array $filterNotRelationships = null
    ): DirectDebitDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/directdebits')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[before]', $pageBefore),
                QueryParam::init('page[after]', $pageAfter),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[created_date_from]', $filterCreatedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[created_date_to]', $filterCreatedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[modified_date_from]', $filterModifiedDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[modified_date_to]', $filterModifiedDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[debtor_party.account_number]', $filterDebtorPartyAccountNumber),
                QueryParam::init('filter[debtor_party.bank_id]', $filterDebtorPartyBankId),
                QueryParam::init('filter[beneficiary_party.account_number]', $filterBeneficiaryPartyAccountNumber),
                QueryParam::init('filter[beneficiary_party.bank_id]', $filterBeneficiaryPartyBankId),
                QueryParam::init('filter[currency]', $filterCurrency),
                QueryParam::init('filter[payment_scheme]', $filterPaymentScheme),
                QueryParam::init('filter[payment_type]', $filterPaymentType),
                QueryParam::init('filter[processing_date_from]', $filterProcessingDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[processing_date_to]', $filterProcessingDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[clearing_id]', $filterClearingId),
                QueryParam::init('filter[admission.admission_date_from]', $filterAdmissionAdmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.admission_date_to]', $filterAdmissionAdmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.status]', $filterAdmissionStatus),
                QueryParam::init('filter[admission.scheme_status_code]', $filterAdmissionSchemeStatusCode),
                QueryParam::init('filter[amount]', $filterAmount),
                QueryParam::init('filter[reference]', $filterReference),
                QueryParam::init('filter[unique_scheme_id]', $filterUniqueSchemeId),
                QueryParam::init('filter[submission.submission_date_from]', $filterSubmissionSubmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.submission_date_to]', $filterSubmissionSubmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.status]', $filterSubmissionStatus),
                QueryParam::init('filter[submission.scheme_status_code]', $filterSubmissionSchemeStatusCode),
                QueryParam::init('filter[relationships]', $filterRelationships)
                    ->serializeBy([FilterRelationshipsEnum::class, 'checkValue']),
                QueryParam::init('filter[not_relationships]', $filterNotRelationships)
                    ->serializeBy([FilterNotRelationshipsEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create Direct debit
     *
     * @param DirectDebitCreation|null $directDebitCreationRequest
     *
     * @return DirectDebitCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebits(
        ?DirectDebitCreation $directDebitCreationRequest = null
    ): DirectDebitCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/directdebits')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($directDebitCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Direct Debit creation error', ApiErrorException::class))
            ->type(DirectDebitCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch direct debit
     *
     * @param string $id Direct Debit Id
     *
     * @return DirectDebitDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsID(string $id): DirectDebitDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/directdebits/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(DirectDebitDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch Direct Debit Admission
     *
     * @param string $id Direct Debit Id
     * @param string $admissionId Direct Debit Admission Id
     *
     * @return DirectDebitAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDAdmissionsAdmissionID(
        string $id,
        string $admissionId
    ): DirectDebitAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('admissionId', $admissionId));

        $_resHandler = $this->responseHandler()->type(DirectDebitAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create direct debit decision
     *
     * @param string $id Direct Debit Id
     * @param DirectDebitDecisionCreation|null $directDebitDecisionCreationRequest
     *
     * @return DirectDebitDecisionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDDecisions(
        string $id,
        ?DirectDebitDecisionCreation $directDebitDecisionCreationRequest = null
    ): DirectDebitDecisionCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/directdebits/{id}/decisions')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($directDebitDecisionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Direct Debit decision creation error', ApiErrorException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Direct Debit decision creation conflict error', ApiErrorException::class)
            )
            ->type(DirectDebitDecisionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get direct debit decision
     *
     * @param string $id Direct Debit Id
     * @param string $decisionId Direct Debit decision id
     *
     * @return DirectDebitDecisionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDDecisionsDecisionID(
        string $id,
        string $decisionId
    ): DirectDebitDecisionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/decisions/{decisionId}'
        )->auth('OAuth2')->parameters(TemplateParam::init('id', $id), TemplateParam::init('decisionId', $decisionId));

        $_resHandler = $this->responseHandler()->type(DirectDebitDecisionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create direct debit decision admissions
     *
     * @param string $id Direct Debit Id
     * @param string $decisionId Direct Debit decision id
     * @param DirectDebitDecisionAdmissionCreation|null $directDebitAdmissionSubmissionCreationRequest
     *
     * @return DirectDebitDecisionAdmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDDecisionsDecisionIDAdmissions(
        string $id,
        string $decisionId,
        ?DirectDebitDecisionAdmissionCreation $directDebitAdmissionSubmissionCreationRequest = null
    ): DirectDebitDecisionAdmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/directdebits/{id}/decisions/{decisionId}/admissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('decisionId', $decisionId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($directDebitAdmissionSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Direct Debit decision admission creation error', ApiErrorException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init(
                    'Direct Debit decision submission creation conflict error',
                    ApiErrorException::class
                )
            )
            ->type(DirectDebitDecisionAdmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch decision admission
     *
     * @param string $id Direct Debit Id
     * @param string $decisionId Direct Debit decision id
     * @param string $admissionId Direct Debit Admission Id
     *
     * @return DirectDebitDecisionAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDDecisionsDecisionIDAdmissionsAdmissionID(
        string $id,
        string $decisionId,
        string $admissionId
    ): DirectDebitDecisionAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/decisions/{decisionId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('decisionId', $decisionId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitDecisionAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create direct debit decision submission
     *
     * @param string $id Direct Debit Id
     * @param string $decisionId Direct Debit decision id
     * @param DirectDebitDecisionSubmissionCreation|null $directDebitDecisionSubmissionCreationRequest
     *
     * @return DirectDebitDecisionSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDDecisionsDecisionIDSubmissions(
        string $id,
        string $decisionId,
        ?DirectDebitDecisionSubmissionCreation $directDebitDecisionSubmissionCreationRequest = null
    ): DirectDebitDecisionSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/directdebits/{id}/decisions/{decisionId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('decisionId', $decisionId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($directDebitDecisionSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Direct Debit decision submission creation error', ApiErrorException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init(
                    'Direct Debit decision submission creation conflict error',
                    ApiErrorException::class
                )
            )
            ->type(DirectDebitDecisionSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get direct debit decision submission
     *
     * @param string $id Direct Debit Id
     * @param string $decisionId Direct Debit decision id
     * @param string $submissionId Direct Debit decision submission id
     *
     * @return DirectDebitDecisionSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDDecisionsDecisionIDSubmissionsSubmissionID(
        string $id,
        string $decisionId,
        string $submissionId
    ): DirectDebitDecisionSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/decisions/{decisionId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('decisionId', $decisionId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitDecisionSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create recall
     *
     * @param string $id Direct Debit Id
     * @param DirectDebitRecallCreation|null $recallCreationRequest
     *
     * @return DirectDebitRecallCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDRecalls(
        string $id,
        ?DirectDebitRecallCreation $recallCreationRequest = null
    ): DirectDebitRecallCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/directdebits/{id}/recalls')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($recallCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Recall creation error', ApiErrorException::class))
            ->type(DirectDebitRecallCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall
     *
     * @param string $id Direct Debit Id
     * @param string $recallId Recall Id
     *
     * @return DirectDebitRecallDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDRecallsRecallID(string $id, string $recallId): DirectDebitRecallDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/recalls/{recallId}'
        )->auth('OAuth2')->parameters(TemplateParam::init('id', $id), TemplateParam::init('recallId', $recallId));

        $_resHandler = $this->responseHandler()->type(DirectDebitRecallDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall admission
     *
     * @param string $id Direct Debit Id
     * @param string $recallId Recall Id
     * @param string $admissionId Direct Debit Admission Id
     *
     * @return DirectDebitRecallAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDRecallsRecallIDAdmissionsAdmissionID(
        string $id,
        string $recallId,
        string $admissionId
    ): DirectDebitRecallAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/recalls/{recallId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitRecallAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall submission
     *
     * @param string $id Direct Debit Id
     * @param string $recallId Recall Id
     * @param string $submissionId Direct Debit decision submission id
     *
     * @return DirectDebitRecallSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDRecallsRecallIDSubmissionsSubmissionID(
        string $id,
        string $recallId,
        string $submissionId
    ): DirectDebitRecallSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/recalls/{recallId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitRecallSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create direct debit return
     *
     * @param string $id Direct Debit Id
     * @param DirectDebitReturnCreation|null $returnCreationRequest
     *
     * @return DirectDebitReturnCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDReturns(
        string $id,
        ?DirectDebitReturnCreation $returnCreationRequest = null
    ): DirectDebitReturnCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/directdebits/{id}/returns')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($returnCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Return creation error', ApiErrorException::class))
            ->type(DirectDebitReturnCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch direct debit return
     *
     * @param string $id Direct Debit Id
     * @param string $returnId Return Id
     *
     * @return DirectDebitReturnDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReturnsReturnID(string $id, string $returnId): DirectDebitReturnDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/returns/{returnId}'
        )->auth('OAuth2')->parameters(TemplateParam::init('id', $id), TemplateParam::init('returnId', $returnId));

        $_resHandler = $this->responseHandler()->type(DirectDebitReturnDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return admission
     *
     * @param string $id Direct Debit Id
     * @param string $returnId Return Id
     * @param string $admissionId Direct Debit Admission Id
     *
     * @return DirectDebitReturnAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReturnsReturnIDAdmissionsAdmissionID(
        string $id,
        string $returnId,
        string $admissionId
    ): DirectDebitReturnAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/returns/{returnId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitReturnAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return admission
     *
     * @param string $id Direct Debit Id
     * @param string $returnId Return Id
     * @param string $reversalId Reversal Id
     *
     * @return DirectDebitReturnReversalDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReturnsReturnIDReversalsReversalID(
        string $id,
        string $returnId,
        string $reversalId
    ): DirectDebitReturnReversalDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('reversalId', $reversalId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitReturnReversalDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return admission
     *
     * @param string $id Direct Debit Id
     * @param string $returnId Return Id
     * @param string $reversalId Reversal Id
     * @param string $admissionId Direct Debit Admission Id
     *
     * @return DirectDebitReturnReversalAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID(
        string $id,
        string $returnId,
        string $reversalId,
        string $admissionId
    ): DirectDebitReturnReversalAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}/admission' .
            's/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitReturnReversalAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create direct debit return submission
     *
     * @param string $id Direct Debit Id
     * @param string $returnId Return Id
     * @param DirectDebitReturnSubmissionCreation|null $returnSubmissionCreationRequest
     *
     * @return DirectDebitReturnSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDReturnsReturnIDSubmissions(
        string $id,
        string $returnId,
        ?DirectDebitReturnSubmissionCreation $returnSubmissionCreationRequest = null
    ): DirectDebitReturnSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/directdebits/{id}/returns/{returnId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($returnSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Return submission creation error', ApiErrorException::class))
            ->type(DirectDebitReturnSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return submission
     *
     * @param string $id Direct Debit Id
     * @param string $returnId Return Id
     * @param string $submissionId Direct Debit decision submission id
     *
     * @return DirectDebitReturnSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReturnsReturnIDSubmissionsSubmissionID(
        string $id,
        string $returnId,
        string $submissionId
    ): DirectDebitReturnSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/returns/{returnId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitReturnSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create direct debit reversal
     *
     * @param string $id Direct Debit Id
     * @param DirectDebitReversalCreation|null $reversalCreationRequest
     *
     * @return DirectDebitReversalCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDReversals(
        string $id,
        ?DirectDebitReversalCreation $reversalCreationRequest = null
    ): DirectDebitReversalCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/directdebits/{id}/reversals')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($reversalCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reversal creation error', ApiErrorException::class))
            ->type(DirectDebitReversalCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch direct debit reversal
     *
     * @param string $id Direct Debit Id
     * @param string $reversalId Reversal Id
     *
     * @return DirectDebitReversalDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReversalsReversalID(
        string $id,
        string $reversalId
    ): DirectDebitReversalDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/reversals/{reversalId}'
        )->auth('OAuth2')->parameters(TemplateParam::init('id', $id), TemplateParam::init('reversalId', $reversalId));

        $_resHandler = $this->responseHandler()->type(DirectDebitReversalDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch reversal admission
     *
     * @param string $id Direct Debit Id
     * @param string $reversalId Reversal Id
     * @param string $admissionId Direct Debit Admission Id
     *
     * @return DirectDebitReversalAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReversalsReversalIDAdmissionsAdmissionID(
        string $id,
        string $reversalId,
        string $admissionId
    ): DirectDebitReversalAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/reversals/{reversalId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitReversalAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create reversal submission
     *
     * @param string $id Direct Debit Id
     * @param string $reversalId Reversal Id
     * @param DirectDebitReversalSubmissionCreation|null $reversalSubmissionCreationRequest
     *
     * @return DirectDebitReversalSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDReversalsReversalIDSubmissions(
        string $id,
        string $reversalId,
        ?DirectDebitReversalSubmissionCreation $reversalSubmissionCreationRequest = null
    ): DirectDebitReversalSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/directdebits/{id}/reversals/{reversalId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('reversalId', $reversalId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($reversalSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reversal submission creation error', ApiErrorException::class))
            ->type(DirectDebitReversalSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch reversal submission
     *
     * @param string $id Direct Debit Id
     * @param string $reversalId Reversal Id
     * @param string $submissionId Direct Debit decision submission id
     *
     * @return DirectDebitReversalSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDReversalsReversalIDSubmissionsSubmissionID(
        string $id,
        string $reversalId,
        string $submissionId
    ): DirectDebitReversalSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/reversals/{reversalId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(DirectDebitReversalSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create direct debit submission
     *
     * @param string $id Direct Debit Id
     * @param DirectDebitSubmissionCreation|null $directDebitSubmissionCreationRequest
     *
     * @return DirectDebitSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postDirectdebitsIDSubmissions(
        string $id,
        ?DirectDebitSubmissionCreation $directDebitSubmissionCreationRequest = null
    ): DirectDebitSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/directdebits/{id}/submissions')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($directDebitSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Return submission creation error', ApiErrorException::class))
            ->type(DirectDebitSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get direct debit submission
     *
     * @param string $id Direct Debit Id
     * @param string $submissionId Direct Debit decision submission id
     *
     * @return DirectDebitSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDirectdebitsIDSubmissionsSubmissionID(
        string $id,
        string $submissionId
    ): DirectDebitSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/directdebits/{id}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('submissionId', $submissionId));

        $_resHandler = $this->responseHandler()->type(DirectDebitSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
