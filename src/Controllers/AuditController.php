<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\AuditEntryListResponse;
use Form3PublicAPILib\Utils\DateTimeHelper;

class AuditController extends BaseController
{
    /**
     * List audit entries for this record type
     *
     * @param string $recordType Record Type
     * @param int|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string|null $pageAfter Cursor for next page (this is a base64-encoded UUID
     *        continuation token returned from the application and should not be manually
     *        generated)
     * @param string[]|null $filterOrganisationId Filter by organisation id
     * @param \DateTime|null $filterActionTimeFrom
     * @param \DateTime|null $filterActionTimeTo
     *
     * @return AuditEntryListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAuditEntriesForThisRecordType(
        string $recordType,
        ?int $pageNumber = null,
        ?int $pageSize = null,
        ?string $pageAfter = null,
        ?array $filterOrganisationId = null,
        ?\DateTime $filterActionTimeFrom = null,
        ?\DateTime $filterActionTimeTo = null
    ): AuditEntryListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/audit/entries/{record_type}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('record_type', $recordType),
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('page[after]', $pageAfter),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[action_time_from]', $filterActionTimeFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[action_time_to]', $filterActionTimeTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime'])
            );

        $_resHandler = $this->responseHandler()->type(AuditEntryListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch audit entry list for this record type/id
     *
     * @param string $recordType Record Type
     * @param string $id Record Id
     *
     * @return AuditEntryListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAuditEntryListForThisRecordTypeId(string $recordType, string $id): AuditEntryListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/audit/entries/{record_type}/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('record_type', $recordType), TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(AuditEntryListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
