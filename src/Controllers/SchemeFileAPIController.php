<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\ListSchemeFilesResponse;
use Form3PublicAPILib\Models\SchemeFileAdmissionCreation;
use Form3PublicAPILib\Models\SchemeFileAdmissionResponse;
use Form3PublicAPILib\Models\SchemeFileCreation;
use Form3PublicAPILib\Models\SchemeFileResponse;
use Form3PublicAPILib\Models\SchemeFileSubmissionCreation;
use Form3PublicAPILib\Models\SchemeFileSubmissionResponse;
use Form3PublicAPILib\Utils\DateTimeHelper;
use Form3PublicAPILib\Utils\FileWrapper;

class SchemeFileAPIController extends BaseController
{
    /**
     * List Scheme files
     *
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterOrganisationId Find all Scheme File resources with a given
     *        organisation ID
     * @param string|null $filterPaymentScheme Find Scheme File resources by a certain scheme
     * @param string|null $filterFileFormat Find Scheme File resources by the format of the file
     * @param string|null $filterFileType Find Scheme File resources by the type of the file
     * @param \DateTime|null $filterCreatedOnFrom Find all Scheme File resources created from this
     *        date, in format YYYY-MM-DD
     * @param \DateTime|null $filterCreatedOnTo Find all Scheme File resources created up to this
     *        date, in format YYYY-MM-DD
     * @param string|null $filterSubmissionStatus Find all Scheme File resources with a certain
     *        submission status
     * @param \DateTime|null $filterSubmissionSubmissionDateFrom Find all Scheme File resources
     *        submitted from and including this date/time
     * @param \DateTime|null $filterSubmissionSubmissionDateTo Find all Scheme File resources
     *        submitted up to and included this date/time
     * @param string|null $filterAdmissionStatus Find all File resources with a certain admission
     *        status
     * @param \DateTime|null $filterAdmissionAdmissionDateFrom Find all File resources admitted from
     *        and including this date/time
     * @param \DateTime|null $filterAdmissionAdmissionDateTo Find all File resources admitted up to
     *        and included this date/time
     *
     * @return ListSchemeFilesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listSchemeFiles(
        ?string $pageNumber = null,
        ?int $pageSize = 100,
        ?array $filterOrganisationId = null,
        ?string $filterPaymentScheme = null,
        ?string $filterFileFormat = null,
        ?string $filterFileType = null,
        ?\DateTime $filterCreatedOnFrom = null,
        ?\DateTime $filterCreatedOnTo = null,
        ?string $filterSubmissionStatus = null,
        ?\DateTime $filterSubmissionSubmissionDateFrom = null,
        ?\DateTime $filterSubmissionSubmissionDateTo = null,
        ?string $filterAdmissionStatus = null,
        ?\DateTime $filterAdmissionAdmissionDateFrom = null,
        ?\DateTime $filterAdmissionAdmissionDateTo = null
    ): ListSchemeFilesResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/files/schemefiles')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[payment_scheme]', $filterPaymentScheme),
                QueryParam::init('filter[file_format]', $filterFileFormat),
                QueryParam::init('filter[file_type]', $filterFileType),
                QueryParam::init('filter[created_on_from]', $filterCreatedOnFrom)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[created_on_to]', $filterCreatedOnTo)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[submission.status]', $filterSubmissionStatus),
                QueryParam::init('filter[submission.submission_date_from]', $filterSubmissionSubmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.submission_date_to]', $filterSubmissionSubmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.status]', $filterAdmissionStatus),
                QueryParam::init('filter[admission.admission_date_from]', $filterAdmissionAdmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.admission_date_to]', $filterAdmissionAdmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reports bad request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(ListSchemeFilesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a Scheme File
     *
     * @param SchemeFileCreation|null $schemeFileCreationRequest
     *
     * @return SchemeFileResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createSchemeFile(?SchemeFileCreation $schemeFileCreationRequest = null): SchemeFileResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/files/schemefiles')
            ->auth('OAuth2')
            ->parameters(BodyParam::init($schemeFileCreationRequest));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Scheme file
     *
     * @param string $schemeFileId Scheme File Id
     * @param string|null $accept Acceptable Formats, possible values are "application/vnd.api+json"
     *        and "application/xml"
     *
     * @return SchemeFileResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getSchemeFile(string $schemeFileId, ?string $accept = null): SchemeFileResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/files/schemefiles/{scheme_file_id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('scheme_file_id', $schemeFileId),
                HeaderParam::init('Accept', $accept)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Put Scheme file chunk
     *
     * @param string $schemeFileId Scheme File Id
     * @param string $xForm3UploadPart Which part of the file we are uploading
     * @param FileWrapper $payload
     *
     * @return SchemeFileResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadSchemeFile(
        string $schemeFileId,
        string $xForm3UploadPart,
        FileWrapper $payload
    ): SchemeFileResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/files/schemefiles/{scheme_file_id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('scheme_file_id', $schemeFileId),
                HeaderParam::init('X-Form3-Upload-Part', $xForm3UploadPart),
                FormParam::init('payload', $payload),
                HeaderParam::init('Content-Type', 'application/octet-stream')
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Scheme File Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Scheme File Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a Scheme File Admission
     *
     * @param string $schemeFileId Scheme File Id
     * @param SchemeFileAdmissionCreation|null $schemeFileAdmissionCreationRequest
     *
     * @return SchemeFileAdmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createSchemeFileAdmission(
        string $schemeFileId,
        ?SchemeFileAdmissionCreation $schemeFileAdmissionCreationRequest = null
    ): SchemeFileAdmissionResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/files/schemefiles/{scheme_file_id}/admissions')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('scheme_file_id', $schemeFileId),
                BodyParam::init($schemeFileAdmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Scheme File Admission Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileAdmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch scheme file admission
     *
     * @param string $schemeFileId Scheme File Id
     * @param string $schemeFileAdmissionId Scheme File Admission Id
     *
     * @return SchemeFileAdmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getSchemeFileAdmission(
        string $schemeFileId,
        string $schemeFileAdmissionId
    ): SchemeFileAdmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/files/schemefiles/{scheme_file_id}/admissions/{scheme_file_admission_id}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('scheme_file_id', $schemeFileId),
                TemplateParam::init('scheme_file_admission_id', $schemeFileAdmissionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileAdmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a Scheme File Submission
     *
     * @param string $schemeFileId Scheme File Id
     * @param SchemeFileSubmissionCreation|null $schemeFileSubmissionCreationRequest
     *
     * @return SchemeFileSubmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createSchemeFileSubmission(
        string $schemeFileId,
        ?SchemeFileSubmissionCreation $schemeFileSubmissionCreationRequest = null
    ): SchemeFileSubmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/files/schemefiles/{scheme_file_id}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('scheme_file_id', $schemeFileId),
                BodyParam::init($schemeFileSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Scheme File Submission Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileSubmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Scheme file submission
     *
     * @param string $schemeFileId Scheme File Id
     * @param string $schemeFileSubmissionId Scheme File Submission Id
     *
     * @return SchemeFileSubmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getSchemeFileSubmission(
        string $schemeFileId,
        string $schemeFileSubmissionId
    ): SchemeFileSubmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('scheme_file_id', $schemeFileId),
                TemplateParam::init('scheme_file_submission_id', $schemeFileSubmissionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(SchemeFileSubmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
