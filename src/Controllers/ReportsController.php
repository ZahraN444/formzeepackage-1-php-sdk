<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\ReportAdmissionDetailsResponse;
use Form3PublicAPILib\Models\ReportDetailsListResponse;
use Form3PublicAPILib\Models\ReportDetailsResponse;
use Form3PublicAPILib\Utils\DateTimeHelper;

class ReportsController extends BaseController
{
    /**
     * List reports
     *
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterOrganisationId Filter by organisation Ids
     * @param string|null $filterReportType Filter by ReportType
     * @param string|null $filterReportTypeDescription Filter by Report Type Description
     * @param string|null $filterReportSource Filter by Report Source
     * @param \DateTime|null $filterCreatedOnAfter Request reports created after specific date time
     * @param \DateTime|null $filterCreatedOnBefore Request reports created after specific date time
     * @param \DateTime|null $filterModifiedOnAfter Request reports modified after specific date
     *        time
     * @param \DateTime|null $filterModifiedOnBefore Request reports modified before specific date
     *        time
     * @param \DateTime|null $filterProcessingDateFrom Request reports with processing date from
     *        specific date (inclusive)
     * @param \DateTime|null $filterProcessingDateTo Request reports with processing date to
     *        specific date (inclusive)
     *
     * @return ReportDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listReports(
        ?string $pageNumber = null,
        ?int $pageSize = 100,
        ?array $filterOrganisationId = null,
        ?string $filterReportType = null,
        ?string $filterReportTypeDescription = null,
        ?string $filterReportSource = null,
        ?\DateTime $filterCreatedOnAfter = null,
        ?\DateTime $filterCreatedOnBefore = null,
        ?\DateTime $filterModifiedOnAfter = null,
        ?\DateTime $filterModifiedOnBefore = null,
        ?\DateTime $filterProcessingDateFrom = null,
        ?\DateTime $filterProcessingDateTo = null
    ): ReportDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/notification/reports')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[report_type]', $filterReportType),
                QueryParam::init('filter[report_type_description]', $filterReportTypeDescription),
                QueryParam::init('filter[report_source]', $filterReportSource),
                QueryParam::init('filter[created_on_after]', $filterCreatedOnAfter)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[created_on_before]', $filterCreatedOnBefore)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[modified_on_after]', $filterModifiedOnAfter)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[modified_on_before]', $filterModifiedOnBefore)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[processing_date_from]', $filterProcessingDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[processing_date_to]', $filterProcessingDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reports bad request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->type(ReportDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get report by ID
     *
     * @param string $id Report ID
     * @param string $accept Acceptable Format
     *
     * @return ReportDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getReport(string $id, string $accept): ReportDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/notification/reports/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), HeaderParam::init('Accept', $accept));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Report Not Found', ApiErrorException::class))
            ->throwErrorOn(
                '406',
                ErrorType::init('Report not available in acceptable format', ApiErrorException::class)
            )
            ->type(ReportDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Report Admission by ID
     *
     * @param string $id Report Id
     * @param string $admissionId Report Admission ID
     *
     * @return ReportAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getReportAdmissionByID(string $id, string $admissionId): ReportAdmissionDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/notification/reports/{id}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('admissionId', $admissionId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(ReportAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
