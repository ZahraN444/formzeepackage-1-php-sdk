<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\SigningKeysListResponse;
use Form3PublicAPILib\Models\SigningKeysResponse;

class PlatformsecurityapiController extends BaseController
{
    /**
     * Get a list of Signing Keys
     *
     * @return SigningKeysListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAListOfSigningKeys(): SigningKeysListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/platform/security/signing_keys')->auth('OAuth2');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Action Forbidden', ApiErrorException::class))
            ->throwErrorOn('502', ErrorType::init('Bad Gateway', ApiErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Unexpected Error', ApiErrorException::class))
            ->type(SigningKeysListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch a Signing Key
     *
     * @param string $signingkeyId Signing Key ID
     *
     * @return SigningKeysResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchASigningKey(string $signingkeyId): SigningKeysResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/platform/security/signing_keys/{signingkey_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('signingkey_id', $signingkeyId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Action Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('502', ErrorType::init('Bad Gateway', ApiErrorException::class))
            ->throwErrorOn('0', ErrorType::init('Unexpected Error', ApiErrorException::class))
            ->type(SigningKeysResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
