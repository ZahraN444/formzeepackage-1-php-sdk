<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\ListTransactionFilesResponse;
use Form3PublicAPILib\Models\TransactionFileAdmissionCreation;
use Form3PublicAPILib\Models\TransactionFileAdmissionResponse;
use Form3PublicAPILib\Models\TransactionFileCreation;
use Form3PublicAPILib\Models\TransactionFileResponse;
use Form3PublicAPILib\Models\TransactionFileSubmissionCreation;
use Form3PublicAPILib\Models\TransactionFileSubmissionResponse;
use Form3PublicAPILib\Utils\DateTimeHelper;
use Form3PublicAPILib\Utils\FileWrapper;

class TransactionFileAPIController extends BaseController
{
    /**
     * List transaction files
     *
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterOrganisationId Find all File resources with a given organisation
     *        ID
     * @param string|null $filterPaymentScheme Find File resources by a certain scheme
     * @param string|null $filterFileFormat Find File resources by the format of the file
     * @param \DateTime|null $filterCreatedOnFrom Find all File resources created from this date, in
     *        format YYYY-MM-DD
     * @param \DateTime|null $filterCreatedOnTo Find all File resources created up to this date, in
     *        format YYYY-MM-DD
     * @param string|null $filterSubmissionStatus Find all File resources with a certain submission
     *        status
     * @param \DateTime|null $filterSubmissionSubmissionDateFrom Find all File resources submitted
     *        from and including this date/time
     * @param \DateTime|null $filterSubmissionSubmissionDateTo Find all File resources submitted up
     *        to and included this date/time
     * @param string|null $filterSubmissionSchemeReferencesFileIdentifier Find File resources the id
     *        of the submission to to the scheme
     * @param string|null $filterSubmissionSchemeReferencesFileNumber Find File resources by the id
     *        of the file sent to the scheme
     * @param string|null $filterSubmissionSchemeReferencesClearingId Find File resources by the
     *        Service User Number (SUN) of the payment originator
     * @param string|null $filterAdmissionStatus Find all File resources with a certain admission
     *        status
     * @param \DateTime|null $filterAdmissionAdmissionDateFrom Find all File resources admitted from
     *        and including this date/time
     * @param \DateTime|null $filterAdmissionAdmissionDateTo Find all File resources admitted up to
     *        and included this date/time
     *
     * @return ListTransactionFilesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listTransactionFiles(
        ?string $pageNumber = null,
        ?int $pageSize = 100,
        ?array $filterOrganisationId = null,
        ?string $filterPaymentScheme = null,
        ?string $filterFileFormat = null,
        ?\DateTime $filterCreatedOnFrom = null,
        ?\DateTime $filterCreatedOnTo = null,
        ?string $filterSubmissionStatus = null,
        ?\DateTime $filterSubmissionSubmissionDateFrom = null,
        ?\DateTime $filterSubmissionSubmissionDateTo = null,
        ?string $filterSubmissionSchemeReferencesFileIdentifier = null,
        ?string $filterSubmissionSchemeReferencesFileNumber = null,
        ?string $filterSubmissionSchemeReferencesClearingId = null,
        ?string $filterAdmissionStatus = null,
        ?\DateTime $filterAdmissionAdmissionDateFrom = null,
        ?\DateTime $filterAdmissionAdmissionDateTo = null
    ): ListTransactionFilesResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/files/transactions')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[payment_scheme]', $filterPaymentScheme),
                QueryParam::init('filter[file_format]', $filterFileFormat),
                QueryParam::init('filter[created_on_from]', $filterCreatedOnFrom)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[created_on_to]', $filterCreatedOnTo)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[submission.status]', $filterSubmissionStatus),
                QueryParam::init('filter[submission.submission_date_from]', $filterSubmissionSubmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.submission_date_to]', $filterSubmissionSubmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init(
                    'filter[submission.scheme_references.file_identifier]',
                    $filterSubmissionSchemeReferencesFileIdentifier
                ),
                QueryParam::init(
                    'filter[submission.scheme_references.file_number]',
                    $filterSubmissionSchemeReferencesFileNumber
                ),
                QueryParam::init(
                    'filter[submission.scheme_references.clearing_id]',
                    $filterSubmissionSchemeReferencesClearingId
                ),
                QueryParam::init('filter[admission.status]', $filterAdmissionStatus),
                QueryParam::init('filter[admission.admission_date_from]', $filterAdmissionAdmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.admission_date_to]', $filterAdmissionAdmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reports bad request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(ListTransactionFilesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a Transaction File
     *
     * @param TransactionFileCreation|null $transactionFileCreationRequest
     *
     * @return TransactionFileResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createTransactionFile(
        ?TransactionFileCreation $transactionFileCreationRequest = null
    ): TransactionFileResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/files/transactions')
            ->auth('OAuth2')
            ->parameters(BodyParam::init($transactionFileCreationRequest));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch transaction file
     *
     * @param string $transactionFileId Transaction File Id
     * @param string|null $accept Acceptable Formats, possible values are
     *        "application/vnd.api+json", "application/x-ndjson" and "application/x.form3.
     *        standard18"
     *
     * @return TransactionFileResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTransactionFile(string $transactionFileId, ?string $accept = null): TransactionFileResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/files/transactions/{transaction_file_id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('transaction_file_id', $transactionFileId),
                HeaderParam::init('Accept', $accept)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Put Transaction file chunk
     *
     * @param string $transactionFileId Transaction File Id
     * @param string $xForm3UploadPart Which part of the file we are uploading
     * @param FileWrapper $payload
     *
     * @return TransactionFileResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadTransactionFile(
        string $transactionFileId,
        string $xForm3UploadPart,
        FileWrapper $payload
    ): TransactionFileResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/files/transactions/{transaction_file_id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('transaction_file_id', $transactionFileId),
                HeaderParam::init('X-Form3-Upload-Part', $xForm3UploadPart),
                FormParam::init('payload', $payload),
                HeaderParam::init('Content-Type', 'application/octet-stream')
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Transaction File Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Transaction File Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a Transaction File Admission
     *
     * @param string $transactionFileId Transaction File Id
     * @param TransactionFileAdmissionCreation|null $transactionFileAdmissionCreationRequest
     *
     * @return TransactionFileAdmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createTransactionFileAdmission(
        string $transactionFileId,
        ?TransactionFileAdmissionCreation $transactionFileAdmissionCreationRequest = null
    ): TransactionFileAdmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/files/transactions/{transaction_file_id}/admissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('transaction_file_id', $transactionFileId),
                BodyParam::init($transactionFileAdmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Transaction File Admission Conflict', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileAdmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch transaction file admission
     *
     * @param string $transactionFileId Transaction File Id
     * @param string $transactionFileAdmissionId Transaction File Admission Id
     *
     * @return TransactionFileAdmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTransactionFileAdmission(
        string $transactionFileId,
        string $transactionFileAdmissionId
    ): TransactionFileAdmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/files/transactions/{transaction_file_id}/admissions/{transaction_file_admission_id}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('transaction_file_id', $transactionFileId),
                TemplateParam::init('transaction_file_admission_id', $transactionFileAdmissionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileAdmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a Transaction File Submission
     *
     * @param string $transactionFileId Transaction File Id
     * @param TransactionFileSubmissionCreation|null $transactionFileSubmissionCreationRequest
     *
     * @return TransactionFileSubmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createTransactionFileSubmission(
        string $transactionFileId,
        ?TransactionFileSubmissionCreation $transactionFileSubmissionCreationRequest = null
    ): TransactionFileSubmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/files/transactions/{transaction_file_id}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('transaction_file_id', $transactionFileId),
                BodyParam::init($transactionFileSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', ApiErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn(
                '409',
                ErrorType::init('Transaction File Submission Conflict', ApiErrorException::class)
            )
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileSubmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch transaction file submission
     *
     * @param string $transactionFileId Transaction File Id
     * @param string $transactionFileSubmissionId Transaction File Submission Id
     *
     * @return TransactionFileSubmissionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTransactionFileSubmission(
        string $transactionFileId,
        string $transactionFileSubmissionId
    ): TransactionFileSubmissionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/files/transactions/{transaction_file_id}/submissions/{transaction_file_submission_id}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('transaction_file_id', $transactionFileId),
                TemplateParam::init('transaction_file_submission_id', $transactionFileSubmissionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error', ApiErrorException::class))
            ->type(TransactionFileSubmissionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
