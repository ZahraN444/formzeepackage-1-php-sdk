<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\AceDetailsListResponse;
use Form3PublicAPILib\Models\CredentialCreationResponse;
use Form3PublicAPILib\Models\UserCreation;
use Form3PublicAPILib\Models\UserCreationResponse;
use Form3PublicAPILib\Models\UserCredentialListResponse;
use Form3PublicAPILib\Models\UserDetailsListResponse;
use Form3PublicAPILib\Models\UserDetailsResponse;
use Form3PublicAPILib\Models\UserRoleListResponse;

class UsersController extends BaseController
{
    /**
     * List all users
     *
     * @param int|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     *
     * @return UserDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllUsers(?int $pageNumber = null, ?int $pageSize = null): UserDetailsListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/users')
            ->auth('OAuth2')
            ->parameters(QueryParam::init('page[number]', $pageNumber), QueryParam::init('page[size]', $pageSize));

        $_resHandler = $this->responseHandler()->type(UserDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create user
     *
     * @param UserCreation|null $userCreationRequest
     *
     * @return UserCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createUser(?UserCreation $userCreationRequest = null): UserCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/security/users')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($userCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(UserCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete user
     *
     * @param string $userId User Id
     * @param int $version Version
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteUser(string $userId, int $version): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/security/users/{user_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('user_id', $userId), QueryParam::init('version', $version));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch user
     *
     * @param string $userId User Id
     *
     * @return UserDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchUser(string $userId): UserDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/users/{user_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(UserDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update user details
     *
     * @param string $userId User Id
     * @param UserCreation|null $userUpdateRequest
     *
     * @return UserDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateUserDetails(string $userId, ?UserCreation $userUpdateRequest = null): UserDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/security/users/{user_id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('user_id', $userId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($userUpdateRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(UserDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch access control list for user
     *
     * @param string $userId User Id
     * @param string|null $filterRecordType Record type
     * @param string|null $filterAction Access action
     *
     * @return AceDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAccessControlListForUser(
        string $userId,
        ?string $filterRecordType = null,
        ?string $filterAction = null
    ): AceDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/users/{user_id}/aces')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('user_id', $userId),
                QueryParam::init('filter[record_type]', $filterRecordType),
                QueryParam::init('filter[action]', $filterAction)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(AceDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch credentials for user
     *
     * @param string $userId User Id
     *
     * @return UserCredentialListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchCredentialsForUser(string $userId): UserCredentialListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/users/{user_id}/credentials')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(UserCredentialListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create new credentials for user
     *
     * @param string $userId User Id
     *
     * @return CredentialCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createNewCredentialsForUser(string $userId): CredentialCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/security/users/{user_id}/credentials')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('user_id', $userId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json')
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(CredentialCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete credentials for user
     *
     * @param string $userId User Id
     * @param string $clientId client id
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteCredentialsForUser(string $userId, string $clientId): void
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/security/users/{user_id}/credentials/{client_id}'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('user_id', $userId), TemplateParam::init('client_id', $clientId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch all roles for user
     *
     * @param string $userId User Id
     *
     * @return UserRoleListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAllRolesForUser(string $userId): UserRoleListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/users/{user_id}/roles')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(UserRoleListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove role from user
     *
     * @param string $userId User Id
     * @param string $roleId Role Id
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function removeRoleFromUser(string $userId, string $roleId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/security/users/{user_id}/roles/{role_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('user_id', $userId), TemplateParam::init('role_id', $roleId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Add role to user
     *
     * @param string $userId User Id
     * @param string $roleId Role Id
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addRoleToUser(string $userId, string $roleId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/security/users/{user_id}/roles/{role_id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('user_id', $userId),
                TemplateParam::init('role_id', $roleId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json')
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
