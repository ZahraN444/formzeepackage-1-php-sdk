<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\AccountNumberDetailsResponse;
use Form3PublicAPILib\Models\SortCodeDetailsResponse;

class AccountValidationController extends BaseController
{
    /**
     * Fetch sort code details
     *
     * @param string $sortcode Sort code
     *
     * @return SortCodeDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchSortCodeDetails(string $sortcode): SortCodeDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/validations/gbdsc/sortcodes/{sortcode}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('sortcode', $sortcode));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Validation failed', ApiErrorException::class))
            ->type(SortCodeDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Validate sortcode and account number details
     *
     * @param string $sortcode Sort code
     * @param string $accountnumber Account number
     *
     * @return AccountNumberDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function validateSortcodeAndAccountNumberDetails(
        string $sortcode,
        string $accountnumber
    ): AccountNumberDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/validations/gbdsc/sortcodes/{sortcode}/accountnumbers/{accountnumber}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('sortcode', $sortcode),
                TemplateParam::init('accountnumber', $accountnumber)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Validation error', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Validation failed', ApiErrorException::class))
            ->type(AccountNumberDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
