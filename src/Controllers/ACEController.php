<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\AceCreation;
use Form3PublicAPILib\Models\AceCreationResponse;
use Form3PublicAPILib\Models\AceDetailsListResponse;
use Form3PublicAPILib\Models\AceDetailsResponse;

class ACEController extends BaseController
{
    /**
     * List all Access Controls for role
     *
     * @param string $roleId Role Id
     *
     * @return AceDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllAccessControlsForRole(string $roleId): AceDetailsListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/roles/{role_id}/aces')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('role_id', $roleId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(AceDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create Access Control Entry
     *
     * @param string $roleId Role Id
     * @param AceCreation|null $aCECreationRequest
     *
     * @return AceCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAccessControlEntry(
        string $roleId,
        ?AceCreation $aCECreationRequest = null
    ): AceCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/security/roles/{role_id}/aces')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('role_id', $roleId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($aCECreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(AceCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete Access Control Entry
     *
     * @param string $roleId Role Id
     * @param string $aceId Ace Id
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAccessControlEntry(string $roleId, string $aceId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/security/roles/{role_id}/aces/{ace_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('role_id', $roleId), TemplateParam::init('ace_id', $aceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', ApiErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch Access Control Entry
     *
     * @param string $roleId Role Id
     * @param string $aceId Ace Id
     *
     * @return AceDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAccessControlEntry(string $roleId, string $aceId): AceDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/roles/{role_id}/aces/{ace_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('role_id', $roleId), TemplateParam::init('ace_id', $aceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(AceDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
