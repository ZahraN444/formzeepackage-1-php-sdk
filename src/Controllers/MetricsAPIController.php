<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Exceptions\MetricsQueryResponseErrorException;
use Form3PublicAPILib\Models\MetricsQueryResponse;

class MetricsAPIController extends BaseController
{
    /**
     * Query Endpoint for metrics
     *
     * @param string $query Query to Execute
     * @param string|null $time RFC3339 or unix_timestamp
     * @param string|null $timeout See
     *        https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations
     *
     * @return MetricsQueryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queryEndpointForMetrics(
        string $query,
        ?string $time = null,
        ?string $timeout = null
    ): MetricsQueryResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/metrics/prometheus/api/v1/query')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('query', $query),
                QueryParam::init('time', $time),
                QueryParam::init('timeout', $timeout)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', MetricsQueryResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(MetricsQueryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Query Endpoint for metrics
     *
     * @param string $query Query to Execute
     * @param string|null $time RFC3339 or unix_timestamp
     * @param string|null $timeout See
     *        https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations
     *
     * @return MetricsQueryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queryEndpointForMetrics1(
        string $query,
        ?string $time = null,
        ?string $timeout = null
    ): MetricsQueryResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/metrics/prometheus/api/v1/query')
            ->auth('OAuth2')
            ->parameters(
                FormParam::init('query', $query),
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('time', $time),
                FormParam::init('timeout', $timeout)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', MetricsQueryResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(MetricsQueryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Query Range Endpoint for metrics
     *
     * @param string $query Query to Execute
     * @param string|null $time RFC3339 or unix_timestamp
     * @param string|null $timeout See
     *        https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations
     * @param string|null $start RFC3339 or unix_timestamp
     * @param string|null $end RFC3339 or unix_timestamp
     * @param string|null $step duration or float
     *
     * @return MetricsQueryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queryRangeEndpointForMetrics(
        string $query,
        ?string $time = null,
        ?string $timeout = null,
        ?string $start = null,
        ?string $end = null,
        ?string $step = null
    ): MetricsQueryResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/metrics/prometheus/api/v1/query_range')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('query', $query),
                QueryParam::init('time', $time),
                QueryParam::init('timeout', $timeout),
                QueryParam::init('start', $start),
                QueryParam::init('end', $end),
                QueryParam::init('step', $step)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', MetricsQueryResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(MetricsQueryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Query Range Endpoint for metrics
     *
     * @param string $query Query to Execute
     * @param string|null $time RFC3339 or unix_timestamp
     * @param string|null $timeout See
     *        https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations
     * @param string|null $start RFC3339 or unix_timestamp
     * @param string|null $end RFC3339 or unix_timestamp
     * @param string|null $step duration or float
     *
     * @return MetricsQueryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function queryRangeEndpointForMetrics1(
        string $query,
        ?string $time = null,
        ?string $timeout = null,
        ?string $start = null,
        ?string $end = null,
        ?string $step = null
    ): MetricsQueryResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/metrics/prometheus/api/v1/query_range')
            ->auth('OAuth2')
            ->parameters(
                FormParam::init('query', $query),
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('time', $time),
                FormParam::init('timeout', $timeout),
                FormParam::init('start', $start),
                FormParam::init('end', $end),
                FormParam::init('step', $step)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', MetricsQueryResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'))
            ->type(MetricsQueryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Federate Endpoint for metrics
     *
     * @param string[] $match See
     *        https://prometheus.io/docs/prometheus/latest/querying/basics/#instant-vector-
     *        selectors
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function federateEndpointForMetrics(array $match): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/metrics/prometheus/federate')
            ->auth('OAuth2')
            ->parameters(QueryParam::init('match', $match));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', MetricsQueryResponseErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden'))
            ->throwErrorOn('500', ErrorType::init('Internal Server Error'));

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
