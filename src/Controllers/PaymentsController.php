<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\AdviceCreation;
use Form3PublicAPILib\Models\AdviceCreationResponse;
use Form3PublicAPILib\Models\AdviceDetailsResponse;
use Form3PublicAPILib\Models\AdviceSubmissionCreation;
use Form3PublicAPILib\Models\AdviceSubmissionCreationResponse;
use Form3PublicAPILib\Models\AdviceSubmissionDetailsResponse;
use Form3PublicAPILib\Models\FilterNotRelationships1Enum;
use Form3PublicAPILib\Models\FilterRelationships1Enum;
use Form3PublicAPILib\Models\PaymentAdmissionDetailsResponse;
use Form3PublicAPILib\Models\PaymentAdmissionTaskAmendment;
use Form3PublicAPILib\Models\PaymentAdmissionTaskDetailsResponse;
use Form3PublicAPILib\Models\PaymentAdmissionTaskListResponse;
use Form3PublicAPILib\Models\PaymentCreation;
use Form3PublicAPILib\Models\PaymentCreationResponse;
use Form3PublicAPILib\Models\PaymentDetailsListResponse;
use Form3PublicAPILib\Models\PaymentDetailsResponse;
use Form3PublicAPILib\Models\PaymentSubmissionCreation;
use Form3PublicAPILib\Models\PaymentSubmissionCreationResponse;
use Form3PublicAPILib\Models\PaymentSubmissionDetailsResponse;
use Form3PublicAPILib\Models\PaymentSubmissionTaskAmendment;
use Form3PublicAPILib\Models\PaymentSubmissionTaskDetailsResponse;
use Form3PublicAPILib\Models\PositionDetailsListResponse;
use Form3PublicAPILib\Models\RecallAdmissionDetailsResponse;
use Form3PublicAPILib\Models\RecallCreation;
use Form3PublicAPILib\Models\RecallCreationResponse;
use Form3PublicAPILib\Models\RecallDecisionAdmissionDetailsResponse;
use Form3PublicAPILib\Models\RecallDecisionCreation;
use Form3PublicAPILib\Models\RecallDecisionCreationResponse;
use Form3PublicAPILib\Models\RecallDecisionDetailsResponse;
use Form3PublicAPILib\Models\RecallDecisionSubmissionCreation;
use Form3PublicAPILib\Models\RecallDecisionSubmissionCreationResponse;
use Form3PublicAPILib\Models\RecallDecisionSubmissionDetailsResponse;
use Form3PublicAPILib\Models\RecallDetailsResponse;
use Form3PublicAPILib\Models\RecallReversalAdmissionDetailsResponse;
use Form3PublicAPILib\Models\RecallReversalDetailsResponse;
use Form3PublicAPILib\Models\RecallSubmissionCreation;
use Form3PublicAPILib\Models\RecallSubmissionCreationResponse;
use Form3PublicAPILib\Models\RecallSubmissionDetailsResponse;
use Form3PublicAPILib\Models\ReturnAdmissionFetchResponse;
use Form3PublicAPILib\Models\ReturnCreation;
use Form3PublicAPILib\Models\ReturnCreationResponse;
use Form3PublicAPILib\Models\ReturnDetailsResponse;
use Form3PublicAPILib\Models\ReturnReversalAdmissionDetailsResponse;
use Form3PublicAPILib\Models\ReturnReversalCreation;
use Form3PublicAPILib\Models\ReturnReversalCreationResponse;
use Form3PublicAPILib\Models\ReturnReversalDetailsResponse;
use Form3PublicAPILib\Models\ReturnSubmissionCreation;
use Form3PublicAPILib\Models\ReturnSubmissionCreationResponse;
use Form3PublicAPILib\Models\ReturnSubmissionDetailsResponse;
use Form3PublicAPILib\Models\ReturnSubmissionTaskAmendment;
use Form3PublicAPILib\Models\ReturnSubmissionTaskDetailsResponse;
use Form3PublicAPILib\Models\ReversalAdmissionDetailsResponse;
use Form3PublicAPILib\Models\ReversalCreation;
use Form3PublicAPILib\Models\ReversalCreationResponse;
use Form3PublicAPILib\Models\ReversalDetailsResponse;
use Form3PublicAPILib\Models\ReversalSubmissionCreation;
use Form3PublicAPILib\Models\ReversalSubmissionCreationResponse;
use Form3PublicAPILib\Models\ReversalSubmissionDetailsResponse;
use Form3PublicAPILib\Utils\DateTimeHelper;

class PaymentsController extends BaseController
{
    /**
     * List Positions
     *
     * @return PositionDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listPositions(): PositionDetailsListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/positions')->auth('OAuth2');

        $_resHandler = $this->responseHandler()->type(PositionDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * List payments
     *
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string|null $pageBefore Cursor for previous page (this is a base64-encoded UUID
     *        continuation token returned from the application and should not be manually
     *        generated, unless requesting the last page, where the value should be set to "end").
     * @param string|null $pageAfter Cursor for next page (this is a base64-encoded UUID
     *        continuation token returned from the application and should not be manually
     *        generated, unless requesting the first page, where the value should be set to
     *        "start").
     * @param string[]|null $filterOrganisationId Filter by organisation id
     * @param string|null $filterDebtorPartyAccountNumber
     * @param string|null $filterDebtorPartyAccountName
     * @param string|null $filterDebtorPartyBankId
     * @param string|null $filterBeneficiaryPartyAccountNumber
     * @param string|null $filterBeneficiaryPartyAccountName
     * @param string|null $filterBeneficiaryPartyBankId
     * @param string|null $filterCurrency
     * @param string|null $filterEndToEndReference
     * @param string|null $filterReturnUniqueSchemeId
     * @param string|null $filterSchemeTransactionId
     * @param string|null $filterPaymentScheme
     * @param string|null $filterPaymentType
     * @param \DateTime|null $filterProcessingDateFrom
     * @param \DateTime|null $filterProcessingDateTo
     * @param string|null $filterUniqueSchemeId
     * @param string|null $filterAmount
     * @param string|null $filterReference
     * @param string|null $filterRoute
     * @param \DateTime|null $filterSubmissionSubmissionDateFrom
     * @param \DateTime|null $filterSubmissionSubmissionDateTo
     * @param string|null $filterSubmissionStatus Filter by submission status
     * @param string|null $filterSubmissionSchemeStatusCode Filter by submission scheme status code
     * @param \DateTime|null $filterReturnSubmissionSubmissionDateFrom
     * @param \DateTime|null $filterReturnSubmissionSubmissionDateTo
     * @param string|null $filterReturnSubmissionStatus Filter by return submission status
     * @param \DateTime|null $filterAdmissionAdmissionDateFrom
     * @param \DateTime|null $filterAdmissionAdmissionDateTo
     * @param string|null $filterAdmissionStatus Filter by admission status
     * @param string|null $filterAdmissionSchemeStatusCode Filter by admission scheme status code
     * @param string[]|null $filterRelationships Filter for payments containing all of the requested
     *        relationships
     * @param string[]|null $filterNotRelationships Filter for payments containing none of the
     *        requested relationships
     *
     * @return PaymentDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listPayments(
        ?string $pageNumber = null,
        ?int $pageSize = null,
        ?string $pageBefore = null,
        ?string $pageAfter = null,
        ?array $filterOrganisationId = null,
        ?string $filterDebtorPartyAccountNumber = null,
        ?string $filterDebtorPartyAccountName = null,
        ?string $filterDebtorPartyBankId = null,
        ?string $filterBeneficiaryPartyAccountNumber = null,
        ?string $filterBeneficiaryPartyAccountName = null,
        ?string $filterBeneficiaryPartyBankId = null,
        ?string $filterCurrency = null,
        ?string $filterEndToEndReference = null,
        ?string $filterReturnUniqueSchemeId = null,
        ?string $filterSchemeTransactionId = null,
        ?string $filterPaymentScheme = null,
        ?string $filterPaymentType = null,
        ?\DateTime $filterProcessingDateFrom = null,
        ?\DateTime $filterProcessingDateTo = null,
        ?string $filterUniqueSchemeId = null,
        ?string $filterAmount = null,
        ?string $filterReference = null,
        ?string $filterRoute = null,
        ?\DateTime $filterSubmissionSubmissionDateFrom = null,
        ?\DateTime $filterSubmissionSubmissionDateTo = null,
        ?string $filterSubmissionStatus = null,
        ?string $filterSubmissionSchemeStatusCode = null,
        ?\DateTime $filterReturnSubmissionSubmissionDateFrom = null,
        ?\DateTime $filterReturnSubmissionSubmissionDateTo = null,
        ?string $filterReturnSubmissionStatus = null,
        ?\DateTime $filterAdmissionAdmissionDateFrom = null,
        ?\DateTime $filterAdmissionAdmissionDateTo = null,
        ?string $filterAdmissionStatus = null,
        ?string $filterAdmissionSchemeStatusCode = null,
        ?array $filterRelationships = null,
        ?array $filterNotRelationships = null
    ): PaymentDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/payments')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('page[before]', $pageBefore),
                QueryParam::init('page[after]', $pageAfter),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[debtor_party.account_number]', $filterDebtorPartyAccountNumber),
                QueryParam::init('filter[debtor_party.account_name]', $filterDebtorPartyAccountName),
                QueryParam::init('filter[debtor_party.bank_id]', $filterDebtorPartyBankId),
                QueryParam::init('filter[beneficiary_party.account_number]', $filterBeneficiaryPartyAccountNumber),
                QueryParam::init('filter[beneficiary_party.account_name]', $filterBeneficiaryPartyAccountName),
                QueryParam::init('filter[beneficiary_party.bank_id]', $filterBeneficiaryPartyBankId),
                QueryParam::init('filter[currency]', $filterCurrency),
                QueryParam::init('filter[end_to_end_reference]', $filterEndToEndReference),
                QueryParam::init('filter[return.unique_scheme_id]', $filterReturnUniqueSchemeId),
                QueryParam::init('filter[scheme_transaction_id]', $filterSchemeTransactionId),
                QueryParam::init('filter[payment_scheme]', $filterPaymentScheme),
                QueryParam::init('filter[payment_type]', $filterPaymentType),
                QueryParam::init('filter[processing_date_from]', $filterProcessingDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[processing_date_to]', $filterProcessingDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toSimpleDate']),
                QueryParam::init('filter[unique_scheme_id]', $filterUniqueSchemeId),
                QueryParam::init('filter[amount]', $filterAmount),
                QueryParam::init('filter[reference]', $filterReference),
                QueryParam::init('filter[route]', $filterRoute),
                QueryParam::init('filter[submission.submission_date_from]', $filterSubmissionSubmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.submission_date_to]', $filterSubmissionSubmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[submission.status]', $filterSubmissionStatus),
                QueryParam::init('filter[submission.scheme_status_code]', $filterSubmissionSchemeStatusCode),
                QueryParam::init(
                    'filter[return_submission.submission_date_from]',
                    $filterReturnSubmissionSubmissionDateFrom
                )->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init(
                    'filter[return_submission.submission_date_to]',
                    $filterReturnSubmissionSubmissionDateTo
                )->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[return_submission.status]', $filterReturnSubmissionStatus),
                QueryParam::init('filter[admission.admission_date_from]', $filterAdmissionAdmissionDateFrom)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.admission_date_to]', $filterAdmissionAdmissionDateTo)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('filter[admission.status]', $filterAdmissionStatus),
                QueryParam::init('filter[admission.scheme_status_code]', $filterAdmissionSchemeStatusCode),
                QueryParam::init('filter[relationships]', $filterRelationships)
                    ->serializeBy([FilterRelationships1Enum::class, 'checkValue']),
                QueryParam::init('filter[not_relationships]', $filterNotRelationships)
                    ->serializeBy([FilterNotRelationships1Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()->type(PaymentDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create payment
     *
     * @param PaymentCreation|null $paymentCreationRequest
     *
     * @return PaymentCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createPayment(?PaymentCreation $paymentCreationRequest = null): PaymentCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/payments')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($paymentCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Payment creation error', ApiErrorException::class))
            ->type(PaymentCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch payment
     *
     * @param string $id Payment Id
     *
     * @return PaymentDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchPayment(string $id): PaymentDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/payments/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(PaymentDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch admission
     *
     * @param string $id Payment Id
     * @param string $admissionId Admission Id
     *
     * @return PaymentAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAdmission(string $id, string $admissionId): PaymentAdmissionDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('admissionId', $admissionId));

        $_resHandler = $this->responseHandler()->type(PaymentAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * List tasks
     *
     * @param string $id Payment Id
     * @param string $admissionId Admission Id
     *
     * @return PaymentAdmissionTaskListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listTasks(string $id, string $admissionId): PaymentAdmissionTaskListResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/admissions/{admissionId}/tasks'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('admissionId', $admissionId));

        $_resHandler = $this->responseHandler()->type(PaymentAdmissionTaskListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Payment Admission Task By ID
     *
     * @param string $id Payment Id
     * @param string $admissionId Admission Id
     * @param string $taskId Payment Admission Task Id
     *
     * @return PaymentAdmissionTaskDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPaymentAdmissionTaskByID(
        string $id,
        string $admissionId,
        string $taskId
    ): PaymentAdmissionTaskDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('admissionId', $admissionId),
                TemplateParam::init('taskId', $taskId)
            );

        $_resHandler = $this->responseHandler()->type(PaymentAdmissionTaskDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Patch Payment Admission Task
     *
     * @param string $id Payment Id
     * @param string $admissionId Admission Id
     * @param string $taskId Payment Admission Task Id
     * @param PaymentAdmissionTaskAmendment|null $paymentAdmissionTaskPatchRequest
     *
     * @return PaymentAdmissionTaskDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function patchPaymentAdmissionTask(
        string $id,
        string $admissionId,
        string $taskId,
        ?PaymentAdmissionTaskAmendment $paymentAdmissionTaskPatchRequest = null
    ): PaymentAdmissionTaskDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PATCH,
            '/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('admissionId', $admissionId),
                TemplateParam::init('taskId', $taskId),
                BodyParam::init($paymentAdmissionTaskPatchRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(PaymentAdmissionTaskDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create advice
     *
     * @param string $id Payment Id
     * @param AdviceCreation|null $adviceCreationRequest
     *
     * @return AdviceCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAdvice(string $id, ?AdviceCreation $adviceCreationRequest = null): AdviceCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/payments/{id}/advices')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($adviceCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Advice creation error', ApiErrorException::class))
            ->type(AdviceCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch advice
     *
     * @param string $id Payment Id
     * @param string $adviceId Advice Id
     *
     * @return AdviceDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAdvice(string $id, string $adviceId): AdviceDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/payments/{id}/advices/{adviceId}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('adviceId', $adviceId));

        $_resHandler = $this->responseHandler()->type(AdviceDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create advice submission
     *
     * @param string $id Payment Id
     * @param string $adviceId Advice Id
     * @param AdviceSubmissionCreation|null $adviceSubmissionCreationRequest
     *
     * @return AdviceSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAdviceSubmission(
        string $id,
        string $adviceId,
        ?AdviceSubmissionCreation $adviceSubmissionCreationRequest = null
    ): AdviceSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/advices/{adviceId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('adviceId', $adviceId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($adviceSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Advice submission creation error', ApiErrorException::class))
            ->type(AdviceSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch advice submission
     *
     * @param string $id Payment Id
     * @param string $adviceId Advice Id
     * @param string $submissionId Submission Id
     *
     * @return AdviceSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchAdviceSubmission(
        string $id,
        string $adviceId,
        string $submissionId
    ): AdviceSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/advices/{adviceId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('adviceId', $adviceId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(AdviceSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create recall
     *
     * @param string $id Payment Id
     * @param RecallCreation|null $recallCreationRequest
     *
     * @return RecallCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRecall(string $id, ?RecallCreation $recallCreationRequest = null): RecallCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/payments/{id}/recalls')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($recallCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Recall creation error', ApiErrorException::class))
            ->type(RecallCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     *
     * @return RecallDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecall(string $id, string $recallId): RecallDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/payments/{id}/recalls/{recallId}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('recallId', $recallId));

        $_resHandler = $this->responseHandler()->type(RecallDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall admission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $admissionId Admission Id
     *
     * @return RecallAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallAdmission(
        string $id,
        string $recallId,
        string $admissionId
    ): RecallAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(RecallAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create recall decision
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param RecallDecisionCreation|null $recallDecisionCreationRequest
     *
     * @return RecallDecisionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRecallDecision(
        string $id,
        string $recallId,
        ?RecallDecisionCreation $recallDecisionCreationRequest = null
    ): RecallDecisionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/recalls/{recallId}/decisions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($recallDecisionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Recall decision creation error', ApiErrorException::class))
            ->type(RecallDecisionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall decision
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $decisionId Decision Id
     *
     * @return RecallDecisionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallDecision(
        string $id,
        string $recallId,
        string $decisionId
    ): RecallDecisionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('decisionId', $decisionId)
            );

        $_resHandler = $this->responseHandler()->type(RecallDecisionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall decision admission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $decisionId Decision Id
     * @param string $admissionId Admission Id
     *
     * @return RecallDecisionAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallDecisionAdmission(
        string $id,
        string $recallId,
        string $decisionId,
        string $admissionId
    ): RecallDecisionAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('decisionId', $decisionId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(RecallDecisionAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create recall decision submission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $decisionId Decision Id
     * @param RecallDecisionSubmissionCreation|null $recallDecisionSubmissionCreationRequest
     *
     * @return RecallDecisionSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRecallDecisionSubmission(
        string $id,
        string $recallId,
        string $decisionId,
        ?RecallDecisionSubmissionCreation $recallDecisionSubmissionCreationRequest = null
    ): RecallDecisionSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('decisionId', $decisionId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($recallDecisionSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Recall decision submission creation error', ApiErrorException::class)
            )
            ->type(RecallDecisionSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall decision submission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $decisionId Decision Id
     * @param string $submissionId Submission Id
     *
     * @return RecallDecisionSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallDecisionSubmission(
        string $id,
        string $recallId,
        string $decisionId,
        string $submissionId
    ): RecallDecisionSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('decisionId', $decisionId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(RecallDecisionSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall reversal
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $reversalId Reversal Id
     *
     * @return RecallReversalDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallReversal(
        string $id,
        string $recallId,
        string $reversalId
    ): RecallReversalDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('reversalId', $reversalId)
            );

        $_resHandler = $this->responseHandler()->type(RecallReversalDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall reversal admission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $reversalId Reversal Id
     * @param string $admissionId Admission Id
     *
     * @return RecallReversalAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallReversalAdmission(
        string $id,
        string $recallId,
        string $reversalId,
        string $admissionId
    ): RecallReversalAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(RecallReversalAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create recall submission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param RecallSubmissionCreation|null $recallSubmissionCreationRequest
     *
     * @return RecallSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRecallSubmission(
        string $id,
        string $recallId,
        ?RecallSubmissionCreation $recallSubmissionCreationRequest = null
    ): RecallSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/recalls/{recallId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($recallSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Recall submission creation error', ApiErrorException::class))
            ->type(RecallSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch recall submission
     *
     * @param string $id Payment Id
     * @param string $recallId Recall Id
     * @param string $submissionId Submission Id
     *
     * @return RecallSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRecallSubmission(
        string $id,
        string $recallId,
        string $submissionId
    ): RecallSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/recalls/{recallId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('recallId', $recallId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(RecallSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create return
     *
     * @param string $id Payment Id
     * @param ReturnCreation|null $returnCreationRequest
     *
     * @return ReturnCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createReturn(string $id, ?ReturnCreation $returnCreationRequest = null): ReturnCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/payments/{id}/returns')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($returnCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Return creation error', ApiErrorException::class))
            ->type(ReturnCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     *
     * @return ReturnDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReturn(string $id, string $returnId): ReturnDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transaction/payments/{id}/returns/{returnId}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('returnId', $returnId));

        $_resHandler = $this->responseHandler()->type(ReturnDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return admission
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     * @param string $admissionId Admission Id
     *
     * @return ReturnAdmissionFetchResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReturnAdmission(
        string $id,
        string $returnId,
        string $admissionId
    ): ReturnAdmissionFetchResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/returns/{returnId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(ReturnAdmissionFetchResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create return reversal
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     * @param ReturnReversalCreation|null $returnReversalCreationRequest
     *
     * @return ReturnReversalCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createReturnReversal(
        string $id,
        string $returnId,
        ?ReturnReversalCreation $returnReversalCreationRequest = null
    ): ReturnReversalCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/returns/{returnId}/reversals'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($returnReversalCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reversal creation error', ApiErrorException::class))
            ->type(ReturnReversalCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return reversal
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     * @param string $reversalId Reversal Id
     *
     * @return ReturnReversalDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReturnReversal(
        string $id,
        string $returnId,
        string $reversalId
    ): ReturnReversalDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('reversalId', $reversalId)
            );

        $_resHandler = $this->responseHandler()->type(ReturnReversalDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return reversal admission
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     * @param string $reversalId Reversal Id
     * @param string $admissionId Admission Id
     *
     * @return ReturnReversalAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReturnReversalAdmission(
        string $id,
        string $returnId,
        string $reversalId,
        string $admissionId
    ): ReturnReversalAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(ReturnReversalAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create return submission
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     * @param ReturnSubmissionCreation|null $returnSubmissionCreationRequest
     *
     * @return ReturnSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createReturnSubmission(
        string $id,
        string $returnId,
        ?ReturnSubmissionCreation $returnSubmissionCreationRequest = null
    ): ReturnSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/returns/{returnId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($returnSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Return submission creation error', ApiErrorException::class))
            ->type(ReturnSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch return submission
     *
     * @param string $id Payment Id
     * @param string $returnId Return Id
     * @param string $submissionId Submission Id
     *
     * @return ReturnSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReturnSubmission(
        string $id,
        string $returnId,
        string $submissionId
    ): ReturnSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/returns/{returnId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(ReturnSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create reversal
     *
     * @param string $id Payment Id
     * @param ReversalCreation|null $reversalCreationRequest
     *
     * @return ReversalCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createReversal(
        string $id,
        ?ReversalCreation $reversalCreationRequest = null
    ): ReversalCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/payments/{id}/reversals')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($reversalCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reversal creation error', ApiErrorException::class))
            ->type(ReversalCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch reversal
     *
     * @param string $id Payment Id
     * @param string $reversalId Reversal Id
     *
     * @return ReversalDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReversal(string $id, string $reversalId): ReversalDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/reversals/{reversalId}'
        )->auth('OAuth2')->parameters(TemplateParam::init('id', $id), TemplateParam::init('reversalId', $reversalId));

        $_resHandler = $this->responseHandler()->type(ReversalDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch reversal admission
     *
     * @param string $id Payment Id
     * @param string $reversalId Reversal Id
     * @param string $admissionId Admission Id
     *
     * @return ReversalAdmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReversalAdmission(
        string $id,
        string $reversalId,
        string $admissionId
    ): ReversalAdmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('admissionId', $admissionId)
            );

        $_resHandler = $this->responseHandler()->type(ReversalAdmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create reversal submission
     *
     * @param string $id Payment Id
     * @param string $reversalId Reversal Id
     * @param ReversalSubmissionCreation|null $reversalSubmissionCreationRequest
     *
     * @return ReversalSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createReversalSubmission(
        string $id,
        string $reversalId,
        ?ReversalSubmissionCreation $reversalSubmissionCreationRequest = null
    ): ReversalSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/transaction/payments/{id}/reversals/{reversalId}/submissions'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('reversalId', $reversalId),
                HeaderParam::init('Content-Type', 'application/vnc.api+json'),
                BodyParam::init($reversalSubmissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Reversal submission creation error', ApiErrorException::class))
            ->type(ReversalSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch reversal submission
     *
     * @param string $id Payment Id
     * @param string $reversalId Reversal Id
     * @param string $submissionId Submission Id
     *
     * @return ReversalSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchReversalSubmission(
        string $id,
        string $reversalId,
        string $submissionId
    ): ReversalSubmissionDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/reversals/{reversalId}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('reversalId', $reversalId),
                TemplateParam::init('submissionId', $submissionId)
            );

        $_resHandler = $this->responseHandler()->type(ReversalSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * create submission
     *
     * @param string $id Payment Id
     * @param PaymentSubmissionCreation|null $submissionCreationRequest
     *
     * @return PaymentSubmissionCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createSubmission(
        string $id,
        ?PaymentSubmissionCreation $submissionCreationRequest = null
    ): PaymentSubmissionCreationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction/payments/{id}/submissions')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($submissionCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Submission creation error', ApiErrorException::class))
            ->type(PaymentSubmissionCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch submission
     *
     * @param string $id Payment Id
     * @param string $submissionId Submission Id
     *
     * @return PaymentSubmissionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchSubmission(string $id, string $submissionId): PaymentSubmissionDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/transaction/payments/{id}/submissions/{submissionId}'
        )
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), TemplateParam::init('submissionId', $submissionId));

        $_resHandler = $this->responseHandler()->type(PaymentSubmissionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Patch Payment Submission Task
     *
     * @param string $id Payment Id
     * @param string $submissionId Submission Id
     * @param string $taskId Payment Submission Task Id
     * @param PaymentSubmissionTaskAmendment|null $paymentSubmissionTaskPatchRequest
     *
     * @return PaymentSubmissionTaskDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function patchPaymentSubmissionTask(
        string $id,
        string $submissionId,
        string $taskId,
        ?PaymentSubmissionTaskAmendment $paymentSubmissionTaskPatchRequest = null
    ): PaymentSubmissionTaskDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PATCH,
            '/transaction/payments/{id}/submissions/{submissionId}/tasks/{taskId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                TemplateParam::init('submissionId', $submissionId),
                TemplateParam::init('taskId', $taskId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($paymentSubmissionTaskPatchRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(PaymentSubmissionTaskDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Patch Return Submission Task
     *
     * @param string $paymentId Payment ID
     * @param string $returnId Return ID
     * @param string $returnSubmissionId Return Submission ID
     * @param string $taskId Return Submission Task Id
     * @param ReturnSubmissionTaskAmendment|null $returnSubmissionTaskPatchRequest
     *
     * @return ReturnSubmissionTaskDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function patchReturnSubmissionTask(
        string $paymentId,
        string $returnId,
        string $returnSubmissionId,
        string $taskId,
        ?ReturnSubmissionTaskAmendment $returnSubmissionTaskPatchRequest = null
    ): ReturnSubmissionTaskDetailsResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PATCH,
            '/transaction/payments/{paymentId}/returns/{returnId}/submissions/{returnSubmission' .
            'Id}/tasks/{taskId}'
        )
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('paymentId', $paymentId),
                TemplateParam::init('returnId', $returnId),
                TemplateParam::init('returnSubmissionId', $returnSubmissionId),
                TemplateParam::init('taskId', $taskId),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($returnSubmissionTaskPatchRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(ReturnSubmissionTaskDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
