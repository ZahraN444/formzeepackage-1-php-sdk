<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\BranchAmendment;
use Form3PublicAPILib\Models\BranchCreation;
use Form3PublicAPILib\Models\BranchCreationResponse;
use Form3PublicAPILib\Models\BranchDetailsListResponse;
use Form3PublicAPILib\Models\BranchDetailsResponse;

class BranchesController extends BaseController
{
    /**
     * List branches
     *
     * @param string|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     * @param string[]|null $filterOrganisationId Filter by organisation id
     * @param string[]|null $filterBankId Filter by bank id e.g. sort code or bic
     * @param string[]|null $filterBankIdCode Filter by type of bank id e.g. "GBDSC"
     * @param string[]|null $filterAcceptanceQualifier Filter by acceptance qualifier
     * @param string[]|null $filterValidationType Filter by validation type e.g. card
     * @param string[]|null $filterReferenceMask Filter by reference mask
     *
     * @return BranchDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listBranches(
        ?string $pageNumber = null,
        ?int $pageSize = null,
        ?array $filterOrganisationId = null,
        ?array $filterBankId = null,
        ?array $filterBankIdCode = null,
        ?array $filterAcceptanceQualifier = null,
        ?array $filterValidationType = null,
        ?array $filterReferenceMask = null
    ): BranchDetailsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/branches')
            ->auth('OAuth2')
            ->parameters(
                QueryParam::init('page[number]', $pageNumber),
                QueryParam::init('page[size]', $pageSize),
                QueryParam::init('filter[organisation_id]', $filterOrganisationId),
                QueryParam::init('filter[bank_id]', $filterBankId),
                QueryParam::init('filter[bank_id_code]', $filterBankIdCode),
                QueryParam::init('filter[acceptance_qualifier]', $filterAcceptanceQualifier),
                QueryParam::init('filter[validation_type]', $filterValidationType),
                QueryParam::init('filter[reference_mask]', $filterReferenceMask)
            );

        $_resHandler = $this->responseHandler()->type(BranchDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a Branch
     *
     * @param BranchCreation|null $branchCreationRequest
     *
     * @return BranchCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createABranch(?BranchCreation $branchCreationRequest = null): BranchCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/organisation/branches')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($branchCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '409',
                ErrorType::init(
                    'Branch creation error, constraint violation of organisation id and bank id',
                    ApiErrorException::class
                )
            )
            ->type(BranchCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete branch
     *
     * @param string $id Branch Id
     * @param int $version Version
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteBranch(string $id, int $version): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/organisation/branches/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id), QueryParam::init('version', $version));

        $this->execute($_reqBuilder);
    }

    /**
     * Fetch branch
     *
     * @param string $id Branch Id
     *
     * @return BranchDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchBranch(string $id): BranchDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/organisation/branches/{id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(BranchDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Amend branch
     *
     * @param string $id Branches Id
     * @param BranchAmendment|null $branchAmendRequest
     *
     * @return BranchDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function amendBranch(string $id, ?BranchAmendment $branchAmendRequest = null): BranchDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/organisation/branches/{id}')
            ->auth('OAuth2')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($branchAmendRequest)
            );

        $_resHandler = $this->responseHandler()->type(BranchDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
