<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use Form3PublicAPILib\Exceptions\ApiErrorException;
use Form3PublicAPILib\Exceptions\ApiException;
use Form3PublicAPILib\Models\RoleCreation;
use Form3PublicAPILib\Models\RoleCreationResponse;
use Form3PublicAPILib\Models\RoleDetailsListResponse;
use Form3PublicAPILib\Models\RoleDetailsResponse;

class RolesController extends BaseController
{
    /**
     * List all roles
     *
     * @param int|null $pageNumber Which page to select
     * @param int|null $pageSize Number of items to select
     *
     * @return RoleDetailsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllRoles(?int $pageNumber = null, ?int $pageSize = null): RoleDetailsListResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/roles')
            ->auth('OAuth2')
            ->parameters(QueryParam::init('page[number]', $pageNumber), QueryParam::init('page[size]', $pageSize));

        $_resHandler = $this->responseHandler()->type(RoleDetailsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create role
     *
     * @param RoleCreation|null $roleCreationRequest
     *
     * @return RoleCreationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRole(?RoleCreation $roleCreationRequest = null): RoleCreationResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/security/roles')
            ->auth('OAuth2')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/vnd.api+json'),
                BodyParam::init($roleCreationRequest)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class))
            ->type(RoleCreationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete role
     *
     * @param string $roleId Role Id
     * @param int $version Version
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteRole(string $roleId, int $version): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/security/roles/{role_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('role_id', $roleId), QueryParam::init('version', $version));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->throwErrorOn('409', ErrorType::init('Conflict', ApiErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch role
     *
     * @param string $roleId Role Id
     *
     * @return RoleDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchRole(string $roleId): RoleDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/security/roles/{role_id}')
            ->auth('OAuth2')
            ->parameters(TemplateParam::init('role_id', $roleId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('404', ErrorType::init('Not Found', ApiErrorException::class))
            ->type(RoleDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
