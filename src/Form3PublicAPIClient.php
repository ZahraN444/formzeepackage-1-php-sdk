<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use Form3PublicAPILib\Authentication\BasicCredentials;
use Form3PublicAPILib\Authentication\BasicCredentialsBuilder;
use Form3PublicAPILib\Authentication\BasicManager;
use Form3PublicAPILib\Authentication\OAuth2Credentials;
use Form3PublicAPILib\Authentication\OAuth2CredentialsBuilder;
use Form3PublicAPILib\Authentication\OAuth2Manager;
use Form3PublicAPILib\Controllers\AccountIdentificationController;
use Form3PublicAPILib\Controllers\AccountsController;
use Form3PublicAPILib\Controllers\AccountValidationController;
use Form3PublicAPILib\Controllers\ACEController;
use Form3PublicAPILib\Controllers\AuditController;
use Form3PublicAPILib\Controllers\BranchesController;
use Form3PublicAPILib\Controllers\BranchIdentificationController;
use Form3PublicAPILib\Controllers\ClaimsController;
use Form3PublicAPILib\Controllers\DirectDebitsController;
use Form3PublicAPILib\Controllers\MandatesController;
use Form3PublicAPILib\Controllers\MetricsAPIController;
use Form3PublicAPILib\Controllers\NameVerificationAPIController;
use Form3PublicAPILib\Controllers\Oauth2Controller;
use Form3PublicAPILib\Controllers\OAuthAuthorizationController;
use Form3PublicAPILib\Controllers\OrganisationsController;
use Form3PublicAPILib\Controllers\PaymentsController;
use Form3PublicAPILib\Controllers\PlatformsecurityapiController;
use Form3PublicAPILib\Controllers\QueryApiController;
use Form3PublicAPILib\Controllers\ReportsController;
use Form3PublicAPILib\Controllers\RolesController;
use Form3PublicAPILib\Controllers\SchemeFileAPIController;
use Form3PublicAPILib\Controllers\SchemeMessagesController;
use Form3PublicAPILib\Controllers\SubscriptionsController;
use Form3PublicAPILib\Controllers\TransactionFileAPIController;
use Form3PublicAPILib\Controllers\UsersController;
use Form3PublicAPILib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class Form3PublicAPIClient implements ConfigurationInterface
{
    private $audit;

    private $schemeFileAPI;

    private $transactionFileAPI;

    private $metricsAPI;

    private $reports;

    private $schemeMessages;

    private $subscriptions;

    private $oauth2;

    private $accounts;

    private $accountIdentification;

    private $branches;

    private $branchIdentification;

    private $nameVerificationAPI;

    private $payments;

    private $organisations;

    private $platformsecurityapi;

    private $roles;

    private $aCE;

    private $users;

    private $claims;

    private $directDebits;

    private $mandates;

    private $queryApi;

    private $accountValidation;

    private $oAuthAuthorization;

    private $basicManager;

    private $oAuth2Manager;

    private $config;

    private $client;

    /**
     * @see Form3PublicAPIClientBuilder::init()
     * @see Form3PublicAPIClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->basicManager = new BasicManager(
            $this->config['username'] ?? ConfigurationDefaults::USERNAME,
            $this->config['password'] ?? ConfigurationDefaults::PASSWORD
        );
        $this->oAuth2Manager = new OAuth2Manager(
            $this->config['oAuthClientId'] ?? ConfigurationDefaults::O_AUTH_CLIENT_ID,
            $this->config['oAuthClientSecret'] ?? ConfigurationDefaults::O_AUTH_CLIENT_SECRET,
            $this->config['oAuthToken']
        );
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::DEFAULT_)
            ->authManagers(['Basic' => $this->basicManager, 'OAuth2' => $this->oAuth2Manager])
            ->build();
        $this->oAuth2Manager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return Form3PublicAPIClientBuilder Form3PublicAPIClientBuilder instance
     */
    public function toBuilder(): Form3PublicAPIClientBuilder
    {
        $builder = Form3PublicAPIClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $basic = $this->getBasicCredentialsBuilder();
        if ($basic != null) {
            $builder->basicCredentials($basic);
        }

        $oAuth2 = $this->getOAuth2CredentialsBuilder();
        if ($oAuth2 != null) {
            $builder->oAuth2Credentials($oAuth2);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getBasicCredentials(): BasicCredentials
    {
        return $this->basicManager;
    }

    public function getBasicCredentialsBuilder(): ?BasicCredentialsBuilder
    {
        if (empty($this->basicManager->getUsername()) && empty($this->basicManager->getPassword())) {
            return null;
        }
        return BasicCredentialsBuilder::init(
            $this->basicManager->getUsername(),
            $this->basicManager->getPassword()
        );
    }

    public function getOAuth2Credentials(): OAuth2Credentials
    {
        return $this->oAuth2Manager;
    }

    public function getOAuth2CredentialsBuilder(): ?OAuth2CredentialsBuilder
    {
        if (empty($this->oAuth2Manager->getOAuthClientId()) && empty($this->oAuth2Manager->getOAuthClientSecret())) {
            return null;
        }
        return OAuth2CredentialsBuilder::init(
            $this->oAuth2Manager->getOAuthClientId(),
            $this->oAuth2Manager->getOAuthClientSecret()
        )->oAuthToken($this->oAuth2Manager->getOAuthToken());
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see Form3PublicAPIClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see Form3PublicAPIClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Audit Controller
     */
    public function getAuditController(): AuditController
    {
        if ($this->audit == null) {
            $this->audit = new AuditController($this->client);
        }
        return $this->audit;
    }

    /**
     * Returns Scheme File API Controller
     */
    public function getSchemeFileAPIController(): SchemeFileAPIController
    {
        if ($this->schemeFileAPI == null) {
            $this->schemeFileAPI = new SchemeFileAPIController($this->client);
        }
        return $this->schemeFileAPI;
    }

    /**
     * Returns Transaction File API Controller
     */
    public function getTransactionFileAPIController(): TransactionFileAPIController
    {
        if ($this->transactionFileAPI == null) {
            $this->transactionFileAPI = new TransactionFileAPIController($this->client);
        }
        return $this->transactionFileAPI;
    }

    /**
     * Returns Metrics API Controller
     */
    public function getMetricsAPIController(): MetricsAPIController
    {
        if ($this->metricsAPI == null) {
            $this->metricsAPI = new MetricsAPIController($this->client);
        }
        return $this->metricsAPI;
    }

    /**
     * Returns Reports Controller
     */
    public function getReportsController(): ReportsController
    {
        if ($this->reports == null) {
            $this->reports = new ReportsController($this->client);
        }
        return $this->reports;
    }

    /**
     * Returns Scheme Messages Controller
     */
    public function getSchemeMessagesController(): SchemeMessagesController
    {
        if ($this->schemeMessages == null) {
            $this->schemeMessages = new SchemeMessagesController($this->client);
        }
        return $this->schemeMessages;
    }

    /**
     * Returns Subscriptions Controller
     */
    public function getSubscriptionsController(): SubscriptionsController
    {
        if ($this->subscriptions == null) {
            $this->subscriptions = new SubscriptionsController($this->client);
        }
        return $this->subscriptions;
    }

    /**
     * Returns Oauth 2 Controller
     */
    public function getOauth2Controller(): Oauth2Controller
    {
        if ($this->oauth2 == null) {
            $this->oauth2 = new Oauth2Controller($this->client);
        }
        return $this->oauth2;
    }

    /**
     * Returns Accounts Controller
     */
    public function getAccountsController(): AccountsController
    {
        if ($this->accounts == null) {
            $this->accounts = new AccountsController($this->client);
        }
        return $this->accounts;
    }

    /**
     * Returns Account Identification Controller
     */
    public function getAccountIdentificationController(): AccountIdentificationController
    {
        if ($this->accountIdentification == null) {
            $this->accountIdentification = new AccountIdentificationController($this->client);
        }
        return $this->accountIdentification;
    }

    /**
     * Returns Branches Controller
     */
    public function getBranchesController(): BranchesController
    {
        if ($this->branches == null) {
            $this->branches = new BranchesController($this->client);
        }
        return $this->branches;
    }

    /**
     * Returns Branch Identification Controller
     */
    public function getBranchIdentificationController(): BranchIdentificationController
    {
        if ($this->branchIdentification == null) {
            $this->branchIdentification = new BranchIdentificationController($this->client);
        }
        return $this->branchIdentification;
    }

    /**
     * Returns Name Verification API Controller
     */
    public function getNameVerificationAPIController(): NameVerificationAPIController
    {
        if ($this->nameVerificationAPI == null) {
            $this->nameVerificationAPI = new NameVerificationAPIController($this->client);
        }
        return $this->nameVerificationAPI;
    }

    /**
     * Returns Payments Controller
     */
    public function getPaymentsController(): PaymentsController
    {
        if ($this->payments == null) {
            $this->payments = new PaymentsController($this->client);
        }
        return $this->payments;
    }

    /**
     * Returns Organisations Controller
     */
    public function getOrganisationsController(): OrganisationsController
    {
        if ($this->organisations == null) {
            $this->organisations = new OrganisationsController($this->client);
        }
        return $this->organisations;
    }

    /**
     * Returns Platformsecurityapi Controller
     */
    public function getPlatformsecurityapiController(): PlatformsecurityapiController
    {
        if ($this->platformsecurityapi == null) {
            $this->platformsecurityapi = new PlatformsecurityapiController($this->client);
        }
        return $this->platformsecurityapi;
    }

    /**
     * Returns Roles Controller
     */
    public function getRolesController(): RolesController
    {
        if ($this->roles == null) {
            $this->roles = new RolesController($this->client);
        }
        return $this->roles;
    }

    /**
     * Returns ACE Controller
     */
    public function getACEController(): ACEController
    {
        if ($this->aCE == null) {
            $this->aCE = new ACEController($this->client);
        }
        return $this->aCE;
    }

    /**
     * Returns Users Controller
     */
    public function getUsersController(): UsersController
    {
        if ($this->users == null) {
            $this->users = new UsersController($this->client);
        }
        return $this->users;
    }

    /**
     * Returns Claims Controller
     */
    public function getClaimsController(): ClaimsController
    {
        if ($this->claims == null) {
            $this->claims = new ClaimsController($this->client);
        }
        return $this->claims;
    }

    /**
     * Returns Direct Debits Controller
     */
    public function getDirectDebitsController(): DirectDebitsController
    {
        if ($this->directDebits == null) {
            $this->directDebits = new DirectDebitsController($this->client);
        }
        return $this->directDebits;
    }

    /**
     * Returns Mandates Controller
     */
    public function getMandatesController(): MandatesController
    {
        if ($this->mandates == null) {
            $this->mandates = new MandatesController($this->client);
        }
        return $this->mandates;
    }

    /**
     * Returns Query Api Controller
     */
    public function getQueryApiController(): QueryApiController
    {
        if ($this->queryApi == null) {
            $this->queryApi = new QueryApiController($this->client);
        }
        return $this->queryApi;
    }

    /**
     * Returns Account Validation Controller
     */
    public function getAccountValidationController(): AccountValidationController
    {
        if ($this->accountValidation == null) {
            $this->accountValidation = new AccountValidationController($this->client);
        }
        return $this->accountValidation;
    }

    /**
     * Returns O Auth Authorization Controller
     */
    public function getOAuthAuthorizationController(): OAuthAuthorizationController
    {
        if ($this->oAuthAuthorization == null) {
            $this->oAuthAuthorization = new OAuthAuthorizationController($this->client);
        }
        return $this->oAuthAuthorization;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [Environment::PRODUCTION => [Server::DEFAULT_ => 'https://api.form3.tech/v1']];
}
