<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class Attributes69 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $errorCategory;

    /**
     * @var string|null
     */
    private $errorMessage;

    /**
     * @var \DateTime|null
     */
    private $occurredOn;

    /**
     * Returns Error Category.
     */
    public function getErrorCategory(): ?string
    {
        return $this->errorCategory;
    }

    /**
     * Sets Error Category.
     *
     * @maps error_category
     */
    public function setErrorCategory(?string $errorCategory): void
    {
        $this->errorCategory = $errorCategory;
    }

    /**
     * Returns Error Message.
     */
    public function getErrorMessage(): ?string
    {
        return $this->errorMessage;
    }

    /**
     * Sets Error Message.
     *
     * @maps error_message
     */
    public function setErrorMessage(?string $errorMessage): void
    {
        $this->errorMessage = $errorMessage;
    }

    /**
     * Returns Occurred On.
     */
    public function getOccurredOn(): ?\DateTime
    {
        return $this->occurredOn;
    }

    /**
     * Sets Occurred On.
     *
     * @maps occurred_on
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setOccurredOn(?\DateTime $occurredOn): void
    {
        $this->occurredOn = $occurredOn;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->errorCategory)) {
            $json['error_category'] = $this->errorCategory;
        }
        if (isset($this->errorMessage)) {
            $json['error_message']  = $this->errorMessage;
        }
        if (isset($this->occurredOn)) {
            $json['occurred_on']    = DateTimeHelper::toRfc3339DateTime($this->occurredOn);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
