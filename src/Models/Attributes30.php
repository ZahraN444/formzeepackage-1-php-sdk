<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class Attributes30 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $destinationGateway;

    /**
     * @var string|null
     */
    private $schemeStatusCode;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $statusReason;

    /**
     * @var \DateTime|null
     */
    private $submissionDatetime;

    /**
     * Returns Destination Gateway.
     */
    public function getDestinationGateway(): ?string
    {
        return $this->destinationGateway;
    }

    /**
     * Sets Destination Gateway.
     *
     * @maps destination_gateway
     */
    public function setDestinationGateway(?string $destinationGateway): void
    {
        $this->destinationGateway = $destinationGateway;
    }

    /**
     * Returns Scheme Status Code.
     * Scheme-specific status (if submission has been submitted to a scheme)
     */
    public function getSchemeStatusCode(): ?string
    {
        return $this->schemeStatusCode;
    }

    /**
     * Sets Scheme Status Code.
     * Scheme-specific status (if submission has been submitted to a scheme)
     *
     * @maps scheme_status_code
     */
    public function setSchemeStatusCode(?string $schemeStatusCode): void
    {
        $this->schemeStatusCode = $schemeStatusCode;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \Form3PublicAPILib\Models\DirectDebitRecallSubmissionStatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Status Reason.
     * Reason for submission failure if status is `delivery_failed`
     */
    public function getStatusReason(): ?string
    {
        return $this->statusReason;
    }

    /**
     * Sets Status Reason.
     * Reason for submission failure if status is `delivery_failed`
     *
     * @maps status_reason
     */
    public function setStatusReason(?string $statusReason): void
    {
        $this->statusReason = $statusReason;
    }

    /**
     * Returns Submission Datetime.
     * Date and time of the submission
     */
    public function getSubmissionDatetime(): ?\DateTime
    {
        return $this->submissionDatetime;
    }

    /**
     * Sets Submission Datetime.
     * Date and time of the submission
     *
     * @maps submission_datetime
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setSubmissionDatetime(?\DateTime $submissionDatetime): void
    {
        $this->submissionDatetime = $submissionDatetime;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->destinationGateway)) {
            $json['destination_gateway'] = $this->destinationGateway;
        }
        if (isset($this->schemeStatusCode)) {
            $json['scheme_status_code']  = $this->schemeStatusCode;
        }
        if (isset($this->status)) {
            $json['status']              = DirectDebitRecallSubmissionStatusEnum::checkValue($this->status);
        }
        if (isset($this->statusReason)) {
            $json['status_reason']       = $this->statusReason;
        }
        if (isset($this->submissionDatetime)) {
            $json['submission_datetime'] = DateTimeHelper::toRfc3339DateTime($this->submissionDatetime);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
