<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

class DirectDebitAdmissionStatusReasonEnum
{
    public const ACCEPTED = 'accepted';

    public const INVALID_BENEFICIARY_DETAILS = 'invalid_beneficiary_details';

    public const INVALID_TRANSACTION = 'invalid_transaction';

    public const BANKID_NOT_PROVISIONED = 'bankid_not_provisioned';

    public const UNKNOWN_ACCOUNTNUMBER = 'unknown_accountnumber';

    public const PENDING_SETTLEMENT = 'pending_settlement';

    public const SETTLEMENT_FAILED = 'settlement_failed';

    public const DUPLICATION = 'duplication';

    public const NOT_ALLOWED_AMOUNT = 'not_allowed_amount';

    public const MANDATE_CANCELLED = 'mandate_cancelled';

    public const NO_INSTRUCTION = 'no_instruction';

    public const ACCOUNT_TRANSFERRED_TO_NEW_PSP = 'account_transferred_to_new_psp';

    public const PAYING_BANK_CANCELLATION = 'paying_bank_cancellation';

    public const CANCELLED_BY_PAYER = 'cancelled_by_payer';

    public const PAYER_DECEASED = 'payer_deceased';

    public const ACCOUNT_CLOSED = 'account_closed';

    public const SCHEME_STATUS_INVALID = 'scheme_status_invalid';

    public const PENDING_AUTHORISATION_BY_SPONSOR = 'pending_authorisation_by_sponsor';

    public const AUTHORISED_BY_SPONSOR = 'authorised_by_sponsor';

    public const AUTHORISATION_FAILED_BY_SPONSOR = 'authorisation_failed_by_sponsor';

    public const CLOSED_ACCOUNT = 'closed_account';

    public const BLOCKED_ACCOUNT = 'blocked_account';

    public const INVALID_DEBTOR_ACCOUNT_TYPE = 'invalid_debtor_account_type';

    public const TRANSACTION_FORBIDDEN = 'transaction_forbidden';

    public const INVALID_BANK_OPERATION_CODE = 'invalid_bank_operation_code';

    public const INSUFFICIENT_FUNDS = 'insufficient_funds';

    public const UNRECOGNISED_INITIATING_PARTY = 'unrecognised_initiating_party';

    public const CREDITOR_BANK_NOT_REGISTERED_UNDER_BIC = 'creditor_bank_not_registered_under_bic';

    public const ENUM_DEBTOR_BANK_NOT_REGISTERED_UNDER_BIC = 'debtor_bank_not registered_under_bic';

    public const OPERATION_CODE_INCORRECT = 'operation_code_incorrect';

    public const UNAUTHORISED_TRANSACTION = 'unauthorised_transaction';

    public const MISSING_MANDATORY_MANDATE_INFORMATION = 'missing_mandatory_mandate_information';

    public const END_CUSTOMER_DECEASED = 'end_customer_deceased';

    public const NOT_SPECIFIED_REASON_CUSTOMER = 'not_specified_reason_customer';

    public const NOT_SPECIFIED_REASON_AGENT = 'not_specified_reason_agent';

    public const BANK_IDENTIFIER_INCORRECT = 'bank_identifier_incorrect';

    public const MISSING_DEBTOR_ACCOUNT = 'missing_debtor_account';

    public const MISSING_DEBTOR_NAME_OR_ADDRESS = 'missing_debtor_name_or_address';

    public const MISSING_CREDITOR_NAME_OR_ADDRESS = 'missing_creditor_name_or_address';

    public const REGULATORY_REASON = 'regulatory_reason';

    public const SPECIFIC_SERVICE_OFFERED_BY_DEBTOR_BANK = 'specific_service_offered_by_debtor_bank';

    public const RECALLED_BY_ORIGINATOR = 'recalled_by_originator';

    public const UNKNOWN_STATUS_REASON = 'unknown_status_reason';

    private const _ALL_VALUES = [
        self::ACCEPTED,
        self::INVALID_BENEFICIARY_DETAILS,
        self::INVALID_TRANSACTION,
        self::BANKID_NOT_PROVISIONED,
        self::UNKNOWN_ACCOUNTNUMBER,
        self::PENDING_SETTLEMENT,
        self::SETTLEMENT_FAILED,
        self::DUPLICATION,
        self::NOT_ALLOWED_AMOUNT,
        self::MANDATE_CANCELLED,
        self::NO_INSTRUCTION,
        self::ACCOUNT_TRANSFERRED_TO_NEW_PSP,
        self::PAYING_BANK_CANCELLATION,
        self::CANCELLED_BY_PAYER,
        self::PAYER_DECEASED,
        self::ACCOUNT_CLOSED,
        self::SCHEME_STATUS_INVALID,
        self::PENDING_AUTHORISATION_BY_SPONSOR,
        self::AUTHORISED_BY_SPONSOR,
        self::AUTHORISATION_FAILED_BY_SPONSOR,
        self::CLOSED_ACCOUNT,
        self::BLOCKED_ACCOUNT,
        self::INVALID_DEBTOR_ACCOUNT_TYPE,
        self::TRANSACTION_FORBIDDEN,
        self::INVALID_BANK_OPERATION_CODE,
        self::INSUFFICIENT_FUNDS,
        self::UNRECOGNISED_INITIATING_PARTY,
        self::CREDITOR_BANK_NOT_REGISTERED_UNDER_BIC,
        self::ENUM_DEBTOR_BANK_NOT_REGISTERED_UNDER_BIC,
        self::OPERATION_CODE_INCORRECT,
        self::UNAUTHORISED_TRANSACTION,
        self::MISSING_MANDATORY_MANDATE_INFORMATION,
        self::END_CUSTOMER_DECEASED,
        self::NOT_SPECIFIED_REASON_CUSTOMER,
        self::NOT_SPECIFIED_REASON_AGENT,
        self::BANK_IDENTIFIER_INCORRECT,
        self::MISSING_DEBTOR_ACCOUNT,
        self::MISSING_DEBTOR_NAME_OR_ADDRESS,
        self::MISSING_CREDITOR_NAME_OR_ADDRESS,
        self::REGULATORY_REASON,
        self::SPECIFIC_SERVICE_OFFERED_BY_DEBTOR_BANK,
        self::RECALLED_BY_ORIGINATOR,
        self::UNKNOWN_STATUS_REASON
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for DirectDebitAdmissionStatusReasonEnum.");
    }
}
