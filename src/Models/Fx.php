<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class Fx implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $contractReference;

    /**
     * @var string|null
     */
    private $exchangeRate;

    /**
     * @var string|null
     */
    private $originalAmount;

    /**
     * @var string|null
     */
    private $originalCurrency;

    /**
     * Returns Contract Reference.
     * Reference to the foreign exchange contract associated with the transaction
     */
    public function getContractReference(): ?string
    {
        return $this->contractReference;
    }

    /**
     * Sets Contract Reference.
     * Reference to the foreign exchange contract associated with the transaction
     *
     * @maps contract_reference
     */
    public function setContractReference(?string $contractReference): void
    {
        $this->contractReference = $contractReference;
    }

    /**
     * Returns Exchange Rate.
     * Factor used to convert an amount from the instructed currency into the transaction currency: i.e. to
     * convert the `fx.original_amount`, expressed in the `fx.original_currency`, to `amount` specified in
     * `currency`. Decimal value, represented as a string, maximum length 12. Must be > 0.
     */
    public function getExchangeRate(): ?string
    {
        return $this->exchangeRate;
    }

    /**
     * Sets Exchange Rate.
     * Factor used to convert an amount from the instructed currency into the transaction currency: i.e. to
     * convert the `fx.original_amount`, expressed in the `fx.original_currency`, to `amount` specified in
     * `currency`. Decimal value, represented as a string, maximum length 12. Must be > 0.
     *
     * @maps exchange_rate
     */
    public function setExchangeRate(?string $exchangeRate): void
    {
        $this->exchangeRate = $exchangeRate;
    }

    /**
     * Returns Original Amount.
     * Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed
     * in the currency as instructed by the initiating party. Decimal value. Must be > 0.
     */
    public function getOriginalAmount(): ?string
    {
        return $this->originalAmount;
    }

    /**
     * Sets Original Amount.
     * Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed
     * in the currency as instructed by the initiating party. Decimal value. Must be > 0.
     *
     * @maps original_amount
     */
    public function setOriginalAmount(?string $originalAmount): void
    {
        $this->originalAmount = $originalAmount;
    }

    /**
     * Returns Original Currency.
     * Currency of `original_amount`. Currency code as defined in ISO 4217.
     */
    public function getOriginalCurrency(): ?string
    {
        return $this->originalCurrency;
    }

    /**
     * Sets Original Currency.
     * Currency of `original_amount`. Currency code as defined in ISO 4217.
     *
     * @maps original_currency
     */
    public function setOriginalCurrency(?string $originalCurrency): void
    {
        $this->originalCurrency = $originalCurrency;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->contractReference)) {
            $json['contract_reference'] = $this->contractReference;
        }
        if (isset($this->exchangeRate)) {
            $json['exchange_rate']      = $this->exchangeRate;
        }
        if (isset($this->originalAmount)) {
            $json['original_amount']    = $this->originalAmount;
        }
        if (isset($this->originalCurrency)) {
            $json['original_currency']  = $this->originalCurrency;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
