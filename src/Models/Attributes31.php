<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class Attributes31 implements \JsonSerializable
{
    /**
     * @var CurrencyAndAmount|null
     */
    private $chargesAmount;

    /**
     * @var string|null
     */
    private $clearingId;

    /**
     * @var CurrencyAndAmount|null
     */
    private $compensationAmount;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var CurrencyAndAmount|null
     */
    private $returnAmount;

    /**
     * @var string|null
     */
    private $returnCode;

    /**
     * @var string|null
     */
    private $returnInitiator;

    /**
     * @var \DateTime|null
     */
    private $schemeProcessingDate;

    /**
     * @var string|null
     */
    private $schemeTransactionId;

    /**
     * @var Settlement|null
     */
    private $settlement;

    /**
     * Returns Charges Amount.
     */
    public function getChargesAmount(): ?CurrencyAndAmount
    {
        return $this->chargesAmount;
    }

    /**
     * Sets Charges Amount.
     *
     * @maps charges_amount
     */
    public function setChargesAmount(?CurrencyAndAmount $chargesAmount): void
    {
        $this->chargesAmount = $chargesAmount;
    }

    /**
     * Returns Clearing Id.
     * Unique identifier for organisations collecting payments
     */
    public function getClearingId(): ?string
    {
        return $this->clearingId;
    }

    /**
     * Sets Clearing Id.
     * Unique identifier for organisations collecting payments
     *
     * @maps clearing_id
     */
    public function setClearingId(?string $clearingId): void
    {
        $this->clearingId = $clearingId;
    }

    /**
     * Returns Compensation Amount.
     */
    public function getCompensationAmount(): ?CurrencyAndAmount
    {
        return $this->compensationAmount;
    }

    /**
     * Sets Compensation Amount.
     *
     * @maps compensation_amount
     */
    public function setCompensationAmount(?CurrencyAndAmount $compensationAmount): void
    {
        $this->compensationAmount = $compensationAmount;
    }

    /**
     * Returns Processing Date.
     * Date on which the operation is to be debited from the debtor account. Formatted according to ISO
     * 8601 format: YYYY-MM-DD.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     * Date on which the operation is to be debited from the debtor account. Formatted according to ISO
     * 8601 format: YYYY-MM-DD.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns Return Amount.
     */
    public function getReturnAmount(): ?CurrencyAndAmount
    {
        return $this->returnAmount;
    }

    /**
     * Sets Return Amount.
     *
     * @maps return_amount
     */
    public function setReturnAmount(?CurrencyAndAmount $returnAmount): void
    {
        $this->returnAmount = $returnAmount;
    }

    /**
     * Returns Return Code.
     */
    public function getReturnCode(): ?string
    {
        return $this->returnCode;
    }

    /**
     * Sets Return Code.
     *
     * @maps return_code
     */
    public function setReturnCode(?string $returnCode): void
    {
        $this->returnCode = $returnCode;
    }

    /**
     * Returns Return Initiator.
     */
    public function getReturnInitiator(): ?string
    {
        return $this->returnInitiator;
    }

    /**
     * Sets Return Initiator.
     *
     * @maps return_initiator
     * @factory \Form3PublicAPILib\Models\ReturnInitiatorEnum::checkValue
     */
    public function setReturnInitiator(?string $returnInitiator): void
    {
        $this->returnInitiator = $returnInitiator;
    }

    /**
     * Returns Scheme Processing Date.
     * Date on which the operation is processed by the scheme. Formatted according to ISO 8601 format: YYYY-
     * MM-DD. Only used if different from `processing_date`.
     */
    public function getSchemeProcessingDate(): ?\DateTime
    {
        return $this->schemeProcessingDate;
    }

    /**
     * Sets Scheme Processing Date.
     * Date on which the operation is processed by the scheme. Formatted according to ISO 8601 format: YYYY-
     * MM-DD. Only used if different from `processing_date`.
     *
     * @maps scheme_processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setSchemeProcessingDate(?\DateTime $schemeProcessingDate): void
    {
        $this->schemeProcessingDate = $schemeProcessingDate;
    }

    /**
     * Returns Scheme Transaction Id.
     */
    public function getSchemeTransactionId(): ?string
    {
        return $this->schemeTransactionId;
    }

    /**
     * Sets Scheme Transaction Id.
     *
     * @maps scheme_transaction_id
     */
    public function setSchemeTransactionId(?string $schemeTransactionId): void
    {
        $this->schemeTransactionId = $schemeTransactionId;
    }

    /**
     * Returns Settlement.
     * Specifies the details on how the settlement of the transaction between the instructing agent and the
     * instructed agent is completed
     */
    public function getSettlement(): ?Settlement
    {
        return $this->settlement;
    }

    /**
     * Sets Settlement.
     * Specifies the details on how the settlement of the transaction between the instructing agent and the
     * instructed agent is completed
     *
     * @maps settlement
     */
    public function setSettlement(?Settlement $settlement): void
    {
        $this->settlement = $settlement;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->chargesAmount)) {
            $json['charges_amount']         = $this->chargesAmount;
        }
        if (isset($this->clearingId)) {
            $json['clearing_id']            = $this->clearingId;
        }
        if (isset($this->compensationAmount)) {
            $json['compensation_amount']    = $this->compensationAmount;
        }
        if (isset($this->processingDate)) {
            $json['processing_date']        = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        if (isset($this->returnAmount)) {
            $json['return_amount']          = $this->returnAmount;
        }
        if (isset($this->returnCode)) {
            $json['return_code']            = $this->returnCode;
        }
        if (isset($this->returnInitiator)) {
            $json['return_initiator']       = ReturnInitiatorEnum::checkValue($this->returnInitiator);
        }
        if (isset($this->schemeProcessingDate)) {
            $json['scheme_processing_date'] = DateTimeHelper::toSimpleDate($this->schemeProcessingDate);
        }
        if (isset($this->schemeTransactionId)) {
            $json['scheme_transaction_id']  = $this->schemeTransactionId;
        }
        if (isset($this->settlement)) {
            $json['settlement']             = $this->settlement;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
