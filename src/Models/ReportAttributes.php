<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class ReportAttributes implements \JsonSerializable
{
    /**
     * @var string[]|null
     */
    private $formats;

    /**
     * @var \DateTime|null
     */
    private $generationTime;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var string|null
     */
    private $reportSource;

    /**
     * @var string|null
     */
    private $reportType;

    /**
     * @var string|null
     */
    private $reportTypeDescription;

    /**
     * @var ReportUser[]|null
     */
    private $reportUsers;

    /**
     * Returns Formats.
     *
     * @return string[]|null
     */
    public function getFormats(): ?array
    {
        return $this->formats;
    }

    /**
     * Sets Formats.
     *
     * @maps formats
     *
     * @param string[]|null $formats
     */
    public function setFormats(?array $formats): void
    {
        $this->formats = $formats;
    }

    /**
     * Returns Generation Time.
     */
    public function getGenerationTime(): ?\DateTime
    {
        return $this->generationTime;
    }

    /**
     * Sets Generation Time.
     *
     * @maps generation_time
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setGenerationTime(?\DateTime $generationTime): void
    {
        $this->generationTime = $generationTime;
    }

    /**
     * Returns Processing Date.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns Report Source.
     */
    public function getReportSource(): ?string
    {
        return $this->reportSource;
    }

    /**
     * Sets Report Source.
     *
     * @maps report_source
     */
    public function setReportSource(?string $reportSource): void
    {
        $this->reportSource = $reportSource;
    }

    /**
     * Returns Report Type.
     * Type of report.
     */
    public function getReportType(): ?string
    {
        return $this->reportType;
    }

    /**
     * Sets Report Type.
     * Type of report.
     *
     * @maps report_type
     */
    public function setReportType(?string $reportType): void
    {
        $this->reportType = $reportType;
    }

    /**
     * Returns Report Type Description.
     */
    public function getReportTypeDescription(): ?string
    {
        return $this->reportTypeDescription;
    }

    /**
     * Sets Report Type Description.
     *
     * @maps report_type_description
     */
    public function setReportTypeDescription(?string $reportTypeDescription): void
    {
        $this->reportTypeDescription = $reportTypeDescription;
    }

    /**
     * Returns Report Users.
     * Users or organisations this report was generated for
     *
     * @return ReportUser[]|null
     */
    public function getReportUsers(): ?array
    {
        return $this->reportUsers;
    }

    /**
     * Sets Report Users.
     * Users or organisations this report was generated for
     *
     * @maps report_users
     *
     * @param ReportUser[]|null $reportUsers
     */
    public function setReportUsers(?array $reportUsers): void
    {
        $this->reportUsers = $reportUsers;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->formats)) {
            $json['formats']                 = $this->formats;
        }
        if (isset($this->generationTime)) {
            $json['generation_time']         = DateTimeHelper::toRfc3339DateTime($this->generationTime);
        }
        if (isset($this->processingDate)) {
            $json['processing_date']         = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        if (isset($this->reportSource)) {
            $json['report_source']           = $this->reportSource;
        }
        if (isset($this->reportType)) {
            $json['report_type']             = $this->reportType;
        }
        if (isset($this->reportTypeDescription)) {
            $json['report_type_description'] = $this->reportTypeDescription;
        }
        if (isset($this->reportUsers)) {
            $json['report_users']            = $this->reportUsers;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
