<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class Notification implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $actionTime;

    /**
     * @var string|null
     */
    private $actionedBy;

    /**
     * @var array|null
     */
    private $data;

    /**
     * @var string|null
     */
    private $dataRecordType;

    /**
     * @var string|null
     */
    private $eventType;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $organisationId;

    /**
     * @var string|null
     */
    private $recordType;

    /**
     * @var int|null
     */
    private $version;

    /**
     * Returns Action Time.
     * Timestamp when the event that triggered the notification occurred.
     */
    public function getActionTime(): ?string
    {
        return $this->actionTime;
    }

    /**
     * Sets Action Time.
     * Timestamp when the event that triggered the notification occurred.
     *
     * @maps action_time
     */
    public function setActionTime(?string $actionTime): void
    {
        $this->actionTime = $actionTime;
    }

    /**
     * Returns Actioned By.
     * The ID of the user that made the change that triggered this notification. This can be the user ID of
     * a customer or a Form3 system user.
     */
    public function getActionedBy(): ?string
    {
        return $this->actionedBy;
    }

    /**
     * Sets Actioned By.
     * The ID of the user that made the change that triggered this notification. This can be the user ID of
     * a customer or a Form3 system user.
     *
     * @maps actioned_by
     */
    public function setActionedBy(?string $actionedBy): void
    {
        $this->actionedBy = $actionedBy;
    }

    /**
     * Returns Data.
     * The full resource itself (as you would see from a GET request)
     */
    public function getData(): ?array
    {
        return $this->data;
    }

    /**
     * Sets Data.
     * The full resource itself (as you would see from a GET request)
     *
     * @maps data
     */
    public function setData(?array $data): void
    {
        $this->data = $data;
    }

    /**
     * Returns Data Record Type.
     * Internal representation of the record type. Field values are subject to frequent change, evaluation
     * of this field is discouraged.
     */
    public function getDataRecordType(): ?string
    {
        return $this->dataRecordType;
    }

    /**
     * Sets Data Record Type.
     * Internal representation of the record type. Field values are subject to frequent change, evaluation
     * of this field is discouraged.
     *
     * @maps data_record_type
     */
    public function setDataRecordType(?string $dataRecordType): void
    {
        $this->dataRecordType = $dataRecordType;
    }

    /**
     * Returns Event Type.
     * The type of event
     */
    public function getEventType(): ?string
    {
        return $this->eventType;
    }

    /**
     * Sets Event Type.
     * The type of event
     *
     * @maps event_type
     */
    public function setEventType(?string $eventType): void
    {
        $this->eventType = $eventType;
    }

    /**
     * Returns Id.
     * Unique resource ID
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Unique resource ID
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Organisation Id.
     * Unique ID of the organisation this resource is created by
     */
    public function getOrganisationId(): ?string
    {
        return $this->organisationId;
    }

    /**
     * Sets Organisation Id.
     * Unique ID of the organisation this resource is created by
     *
     * @maps organisation_id
     */
    public function setOrganisationId(?string $organisationId): void
    {
        $this->organisationId = $organisationId;
    }

    /**
     * Returns Record Type.
     * The type of resource contained in `data`
     */
    public function getRecordType(): ?string
    {
        return $this->recordType;
    }

    /**
     * Sets Record Type.
     * The type of resource contained in `data`
     *
     * @maps record_type
     */
    public function setRecordType(?string $recordType): void
    {
        $this->recordType = $recordType;
    }

    /**
     * Returns Version.
     * Version number
     */
    public function getVersion(): ?int
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * Version number
     *
     * @maps version
     */
    public function setVersion(?int $version): void
    {
        $this->version = $version;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->actionTime)) {
            $json['action_time']      = $this->actionTime;
        }
        if (isset($this->actionedBy)) {
            $json['actioned_by']      = $this->actionedBy;
        }
        if (isset($this->data)) {
            $json['data']             = $this->data;
        }
        if (isset($this->dataRecordType)) {
            $json['data_record_type'] = $this->dataRecordType;
        }
        if (isset($this->eventType)) {
            $json['event_type']       = $this->eventType;
        }
        if (isset($this->id)) {
            $json['id']               = $this->id;
        }
        if (isset($this->organisationId)) {
            $json['organisation_id']  = $this->organisationId;
        }
        if (isset($this->recordType)) {
            $json['record_type']      = $this->recordType;
        }
        if (isset($this->version)) {
            $json['version']          = $this->version;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
