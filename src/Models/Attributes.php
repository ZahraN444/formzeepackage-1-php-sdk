<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class Attributes implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $acceptanceQualifier;

    /**
     * @var string|null
     */
    private $accountClassification;

    /**
     * @var bool|null
     */
    private $accountMatchingOptOut;

    /**
     * @var string|null
     */
    private $accountNumber;

    /**
     * @var string[]|null
     */
    private $alternativeBankAccountNames;

    /**
     * @var string[]|null
     */
    private $alternativeNames;

    /**
     * @var string|null
     */
    private $bankAccountName;

    /**
     * @var string|null
     */
    private $bankId;

    /**
     * @var string|null
     */
    private $bankIdCode;

    /**
     * @var string|null
     */
    private $baseCurrency;

    /**
     * @var string|null
     */
    private $bic;

    /**
     * @var string|null
     */
    private $country;

    /**
     * @var string|null
     */
    private $customerId;

    /**
     * @var string|null
     */
    private $firstName;

    /**
     * @var string|null
     */
    private $iban;

    /**
     * @var bool|null
     */
    private $jointAccount;

    /**
     * @var string[]|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $nameMatchingStatus;

    /**
     * @var AccountAttributesOrganisationIdentification|null
     */
    private $organisationIdentification;

    /**
     * @var AccountAttributesPrivateIdentification|null
     */
    private $privateIdentification;

    /**
     * @var string|null
     */
    private $processingService;

    /**
     * @var string|null
     */
    private $referenceMask;

    /**
     * @var string|null
     */
    private $secondaryIdentification;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $statusReason;

    /**
     * @var bool|null
     */
    private $switched;

    /**
     * @var SwitchedAccountDetails|null
     */
    private $switchedAccountDetails;

    /**
     * @var string|null
     */
    private $title;

    /**
     * @var UserDefinedData[]|null
     */
    private $userDefinedData;

    /**
     * @var string|null
     */
    private $userDefinedInformation;

    /**
     * @var string|null
     */
    private $validationType;

    /**
     * Returns Acceptance Qualifier.
     * All accepted payments will receive the matching qualifier code
     */
    public function getAcceptanceQualifier(): ?string
    {
        return $this->acceptanceQualifier;
    }

    /**
     * Sets Acceptance Qualifier.
     * All accepted payments will receive the matching qualifier code
     *
     * @maps acceptance_qualifier
     * @factory \Form3PublicAPILib\Models\AcceptanceQualifierEnum::checkValue
     */
    public function setAcceptanceQualifier(?string $acceptanceQualifier): void
    {
        $this->acceptanceQualifier = $acceptanceQualifier;
    }

    /**
     * Returns Account Classification.
     * Is the account business or personal?
     */
    public function getAccountClassification(): ?string
    {
        return $this->accountClassification;
    }

    /**
     * Sets Account Classification.
     * Is the account business or personal?
     *
     * @maps account_classification
     * @factory \Form3PublicAPILib\Models\AccountClassification1Enum::checkValue
     */
    public function setAccountClassification(?string $accountClassification): void
    {
        $this->accountClassification = $accountClassification;
    }

    /**
     * Returns Account Matching Opt Out.
     * - deprecated - Is the account opted out of account matching, e.g. CoP?
     */
    public function getAccountMatchingOptOut(): ?bool
    {
        return $this->accountMatchingOptOut;
    }

    /**
     * Sets Account Matching Opt Out.
     * - deprecated - Is the account opted out of account matching, e.g. CoP?
     *
     * @maps account_matching_opt_out
     */
    public function setAccountMatchingOptOut(?bool $accountMatchingOptOut): void
    {
        $this->accountMatchingOptOut = $accountMatchingOptOut;
    }

    /**
     * Returns Account Number.
     * Account number of the account. A unique number will automatically be generated if not provided.
     */
    public function getAccountNumber(): ?string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * Account number of the account. A unique number will automatically be generated if not provided.
     *
     * @maps account_number
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Alternative Bank Account Names.
     * - deprecated - Alternative account names. Used for Confirmation of Payee matching.
     *
     * @return string[]|null
     */
    public function getAlternativeBankAccountNames(): ?array
    {
        return $this->alternativeBankAccountNames;
    }

    /**
     * Sets Alternative Bank Account Names.
     * - deprecated - Alternative account names. Used for Confirmation of Payee matching.
     *
     * @maps alternative_bank_account_names
     *
     * @param string[]|null $alternativeBankAccountNames
     */
    public function setAlternativeBankAccountNames(?array $alternativeBankAccountNames): void
    {
        $this->alternativeBankAccountNames = $alternativeBankAccountNames;
    }

    /**
     * Returns Alternative Names.
     * Alternative names. Used for Confirmation of Payee matching.
     *
     * @return string[]|null
     */
    public function getAlternativeNames(): ?array
    {
        return $this->alternativeNames;
    }

    /**
     * Sets Alternative Names.
     * Alternative names. Used for Confirmation of Payee matching.
     *
     * @maps alternative_names
     *
     * @param string[]|null $alternativeNames
     */
    public function setAlternativeNames(?array $alternativeNames): void
    {
        $this->alternativeNames = $alternativeNames;
    }

    /**
     * Returns Bank Account Name.
     * - deprecated - Primary account name. Used for Confirmation of Payee matching. Required if
     * confirmation_of_payee_enabled is true for the organisation.
     */
    public function getBankAccountName(): ?string
    {
        return $this->bankAccountName;
    }

    /**
     * Sets Bank Account Name.
     * - deprecated - Primary account name. Used for Confirmation of Payee matching. Required if
     * confirmation_of_payee_enabled is true for the organisation.
     *
     * @maps bank_account_name
     */
    public function setBankAccountName(?string $bankAccountName): void
    {
        $this->bankAccountName = $bankAccountName;
    }

    /**
     * Returns Bank Id.
     * Local country bank identifier. In the UK this is the sort code.
     */
    public function getBankId(): ?string
    {
        return $this->bankId;
    }

    /**
     * Sets Bank Id.
     * Local country bank identifier. In the UK this is the sort code.
     *
     * @maps bank_id
     */
    public function setBankId(?string $bankId): void
    {
        $this->bankId = $bankId;
    }

    /**
     * Returns Bank Id Code.
     * ISO 20022 code used to identify the type of bank ID being used
     */
    public function getBankIdCode(): ?string
    {
        return $this->bankIdCode;
    }

    /**
     * Sets Bank Id Code.
     * ISO 20022 code used to identify the type of bank ID being used
     *
     * @maps bank_id_code
     */
    public function setBankIdCode(?string $bankIdCode): void
    {
        $this->bankIdCode = $bankIdCode;
    }

    /**
     * Returns Base Currency.
     * ISO 4217 code used to identify the base currency of the account
     */
    public function getBaseCurrency(): ?string
    {
        return $this->baseCurrency;
    }

    /**
     * Sets Base Currency.
     * ISO 4217 code used to identify the base currency of the account
     *
     * @maps base_currency
     */
    public function setBaseCurrency(?string $baseCurrency): void
    {
        $this->baseCurrency = $baseCurrency;
    }

    /**
     * Returns Bic.
     * SWIFT BIC in either 8 or 11 character format
     */
    public function getBic(): ?string
    {
        return $this->bic;
    }

    /**
     * Sets Bic.
     * SWIFT BIC in either 8 or 11 character format
     *
     * @maps bic
     */
    public function setBic(?string $bic): void
    {
        $this->bic = $bic;
    }

    /**
     * Returns Country.
     * ISO 3166-1 code used to identify the domicile of the account
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     * ISO 3166-1 code used to identify the domicile of the account
     *
     * @maps country
     */
    public function setCountry(?string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Customer Id.
     * A free-format reference that can be used to link this account to an external system
     */
    public function getCustomerId(): ?string
    {
        return $this->customerId;
    }

    /**
     * Sets Customer Id.
     * A free-format reference that can be used to link this account to an external system
     *
     * @maps customer_id
     */
    public function setCustomerId(?string $customerId): void
    {
        $this->customerId = $customerId;
    }

    /**
     * Returns First Name.
     * - deprecated - Customer first name.
     */
    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    /**
     * Sets First Name.
     * - deprecated - Customer first name.
     *
     * @maps first_name
     */
    public function setFirstName(?string $firstName): void
    {
        $this->firstName = $firstName;
    }

    /**
     * Returns Iban.
     * IBAN of the account. Will be calculated from other fields if not supplied.
     */
    public function getIban(): ?string
    {
        return $this->iban;
    }

    /**
     * Sets Iban.
     * IBAN of the account. Will be calculated from other fields if not supplied.
     *
     * @maps iban
     */
    public function setIban(?string $iban): void
    {
        $this->iban = $iban;
    }

    /**
     * Returns Joint Account.
     * Is the account joint?
     */
    public function getJointAccount(): ?bool
    {
        return $this->jointAccount;
    }

    /**
     * Sets Joint Account.
     * Is the account joint?
     *
     * @maps joint_account
     */
    public function setJointAccount(?bool $jointAccount): void
    {
        $this->jointAccount = $jointAccount;
    }

    /**
     * Returns Name.
     * Account holder names (for example title, first name, last name). Used for Confirmation of Payee
     * matching.
     *
     * @return string[]|null
     */
    public function getName(): ?array
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Account holder names (for example title, first name, last name). Used for Confirmation of Payee
     * matching.
     *
     * @maps name
     *
     * @param string[]|null $name
     */
    public function setName(?array $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Name Matching Status.
     * Describes the status of the account for name matching via CoP. The value determines the code with
     * which Form3 responds to matched CoP requests to this account.
     */
    public function getNameMatchingStatus(): ?string
    {
        return $this->nameMatchingStatus;
    }

    /**
     * Sets Name Matching Status.
     * Describes the status of the account for name matching via CoP. The value determines the code with
     * which Form3 responds to matched CoP requests to this account.
     *
     * @maps name_matching_status
     * @factory \Form3PublicAPILib\Models\NameMatchingStatusEnum::checkValue
     */
    public function setNameMatchingStatus(?string $nameMatchingStatus): void
    {
        $this->nameMatchingStatus = $nameMatchingStatus;
    }

    /**
     * Returns Organisation Identification.
     */
    public function getOrganisationIdentification(): ?AccountAttributesOrganisationIdentification
    {
        return $this->organisationIdentification;
    }

    /**
     * Sets Organisation Identification.
     *
     * @maps organisation_identification
     */
    public function setOrganisationIdentification(
        ?AccountAttributesOrganisationIdentification $organisationIdentification
    ): void {
        $this->organisationIdentification = $organisationIdentification;
    }

    /**
     * Returns Private Identification.
     */
    public function getPrivateIdentification(): ?AccountAttributesPrivateIdentification
    {
        return $this->privateIdentification;
    }

    /**
     * Sets Private Identification.
     *
     * @maps private_identification
     */
    public function setPrivateIdentification(?AccountAttributesPrivateIdentification $privateIdentification): void
    {
        $this->privateIdentification = $privateIdentification;
    }

    /**
     * Returns Processing Service.
     * - deprecated - Accounting system or service. It will be added to each payment received to an account.
     */
    public function getProcessingService(): ?string
    {
        return $this->processingService;
    }

    /**
     * Sets Processing Service.
     * - deprecated - Accounting system or service. It will be added to each payment received to an account.
     *
     * @maps processing_service
     */
    public function setProcessingService(?string $processingService): void
    {
        $this->processingService = $processingService;
    }

    /**
     * Returns Reference Mask.
     * When set will apply a validation mask on the payment reference to each payment received to an
     * account.
     */
    public function getReferenceMask(): ?string
    {
        return $this->referenceMask;
    }

    /**
     * Sets Reference Mask.
     * When set will apply a validation mask on the payment reference to each payment received to an
     * account.
     *
     * @maps reference_mask
     */
    public function setReferenceMask(?string $referenceMask): void
    {
        $this->referenceMask = $referenceMask;
    }

    /**
     * Returns Secondary Identification.
     * Secondary identification, e.g. building society roll number. Used for Confirmation of Payee.
     */
    public function getSecondaryIdentification(): ?string
    {
        return $this->secondaryIdentification;
    }

    /**
     * Sets Secondary Identification.
     * Secondary identification, e.g. building society roll number. Used for Confirmation of Payee.
     *
     * @maps secondary_identification
     */
    public function setSecondaryIdentification(?string $secondaryIdentification): void
    {
        $this->secondaryIdentification = $secondaryIdentification;
    }

    /**
     * Returns Status.
     * Current status of the account
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Current status of the account
     *
     * @maps status
     * @factory \Form3PublicAPILib\Models\StatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Status Reason.
     * Used to determine appropriate scheme or internal payment reject code. Account status field must be
     * set to closed to use this functionality.
     */
    public function getStatusReason(): ?string
    {
        return $this->statusReason;
    }

    /**
     * Sets Status Reason.
     * Used to determine appropriate scheme or internal payment reject code. Account status field must be
     * set to closed to use this functionality.
     *
     * @maps status_reason
     * @factory \Form3PublicAPILib\Models\StatusReasonEnum::checkValue
     */
    public function setStatusReason(?string $statusReason): void
    {
        $this->statusReason = $statusReason;
    }

    /**
     * Returns Switched.
     * - deprecated - Indicates whether the account has been switched using the Current Account Switch
     * Service.
     */
    public function getSwitched(): ?bool
    {
        return $this->switched;
    }

    /**
     * Sets Switched.
     * - deprecated - Indicates whether the account has been switched using the Current Account Switch
     * Service.
     *
     * @maps switched
     */
    public function setSwitched(?bool $switched): void
    {
        $this->switched = $switched;
    }

    /**
     * Returns Switched Account Details.
     * Alternate Account details to use in case the account has been switched away from this organisation.
     */
    public function getSwitchedAccountDetails(): ?SwitchedAccountDetails
    {
        return $this->switchedAccountDetails;
    }

    /**
     * Sets Switched Account Details.
     * Alternate Account details to use in case the account has been switched away from this organisation.
     *
     * @maps switched_account_details
     */
    public function setSwitchedAccountDetails(?SwitchedAccountDetails $switchedAccountDetails): void
    {
        $this->switchedAccountDetails = $switchedAccountDetails;
    }

    /**
     * Returns Title.
     * - deprecated - Customer title.
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * - deprecated - Customer title.
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns User Defined Data.
     * All purpose list of key-value pairs to store specific data for the associated account. It will be
     * added to each payment received to an account.
     *
     * @return UserDefinedData[]|null
     */
    public function getUserDefinedData(): ?array
    {
        return $this->userDefinedData;
    }

    /**
     * Sets User Defined Data.
     * All purpose list of key-value pairs to store specific data for the associated account. It will be
     * added to each payment received to an account.
     *
     * @maps user_defined_data
     *
     * @param UserDefinedData[]|null $userDefinedData
     */
    public function setUserDefinedData(?array $userDefinedData): void
    {
        $this->userDefinedData = $userDefinedData;
    }

    /**
     * Returns User Defined Information.
     * - deprecated - All purpose field to store specific data for the associated account. It will be added
     * to each payment received to an account.
     */
    public function getUserDefinedInformation(): ?string
    {
        return $this->userDefinedInformation;
    }

    /**
     * Sets User Defined Information.
     * - deprecated - All purpose field to store specific data for the associated account. It will be added
     * to each payment received to an account.
     *
     * @maps user_defined_information
     */
    public function setUserDefinedInformation(?string $userDefinedInformation): void
    {
        $this->userDefinedInformation = $userDefinedInformation;
    }

    /**
     * Returns Validation Type.
     * optional validation to apply to the account
     */
    public function getValidationType(): ?string
    {
        return $this->validationType;
    }

    /**
     * Sets Validation Type.
     * optional validation to apply to the account
     *
     * @maps validation_type
     * @factory \Form3PublicAPILib\Models\ValidationTypeEnum::checkValue
     */
    public function setValidationType(?string $validationType): void
    {
        $this->validationType = $validationType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->acceptanceQualifier)) {
            $json['acceptance_qualifier']           = AcceptanceQualifierEnum::checkValue($this->acceptanceQualifier);
        }
        if (isset($this->accountClassification)) {
            $json['account_classification']         =
                AccountClassification1Enum::checkValue(
                    $this->accountClassification
                );
        }
        if (isset($this->accountMatchingOptOut)) {
            $json['account_matching_opt_out']       = $this->accountMatchingOptOut;
        }
        if (isset($this->accountNumber)) {
            $json['account_number']                 = $this->accountNumber;
        }
        if (isset($this->alternativeBankAccountNames)) {
            $json['alternative_bank_account_names'] = $this->alternativeBankAccountNames;
        }
        if (isset($this->alternativeNames)) {
            $json['alternative_names']              = $this->alternativeNames;
        }
        if (isset($this->bankAccountName)) {
            $json['bank_account_name']              = $this->bankAccountName;
        }
        if (isset($this->bankId)) {
            $json['bank_id']                        = $this->bankId;
        }
        if (isset($this->bankIdCode)) {
            $json['bank_id_code']                   = $this->bankIdCode;
        }
        if (isset($this->baseCurrency)) {
            $json['base_currency']                  = $this->baseCurrency;
        }
        if (isset($this->bic)) {
            $json['bic']                            = $this->bic;
        }
        if (isset($this->country)) {
            $json['country']                        = $this->country;
        }
        if (isset($this->customerId)) {
            $json['customer_id']                    = $this->customerId;
        }
        if (isset($this->firstName)) {
            $json['first_name']                     = $this->firstName;
        }
        if (isset($this->iban)) {
            $json['iban']                           = $this->iban;
        }
        if (isset($this->jointAccount)) {
            $json['joint_account']                  = $this->jointAccount;
        }
        if (isset($this->name)) {
            $json['name']                           = $this->name;
        }
        if (isset($this->nameMatchingStatus)) {
            $json['name_matching_status']           = NameMatchingStatusEnum::checkValue($this->nameMatchingStatus);
        }
        if (isset($this->organisationIdentification)) {
            $json['organisation_identification']    = $this->organisationIdentification;
        }
        if (isset($this->privateIdentification)) {
            $json['private_identification']         = $this->privateIdentification;
        }
        if (isset($this->processingService)) {
            $json['processing_service']             = $this->processingService;
        }
        if (isset($this->referenceMask)) {
            $json['reference_mask']                 = $this->referenceMask;
        }
        if (isset($this->secondaryIdentification)) {
            $json['secondary_identification']       = $this->secondaryIdentification;
        }
        if (isset($this->status)) {
            $json['status']                         = StatusEnum::checkValue($this->status);
        }
        if (isset($this->statusReason)) {
            $json['status_reason']                  = StatusReasonEnum::checkValue($this->statusReason);
        }
        if (isset($this->switched)) {
            $json['switched']                       = $this->switched;
        }
        if (isset($this->switchedAccountDetails)) {
            $json['switched_account_details']       = $this->switchedAccountDetails;
        }
        if (isset($this->title)) {
            $json['title']                          = $this->title;
        }
        if (isset($this->userDefinedData)) {
            $json['user_defined_data']              = $this->userDefinedData;
        }
        if (isset($this->userDefinedInformation)) {
            $json['user_defined_information']       = $this->userDefinedInformation;
        }
        if (isset($this->validationType)) {
            $json['validation_type']                = ValidationTypeEnum::checkValue($this->validationType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
