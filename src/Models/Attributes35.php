<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class Attributes35 implements \JsonSerializable
{
    /**
     * @var ChargesAmount|null
     */
    private $chargesAmount;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var string|null
     */
    private $reason;

    /**
     * @var string|null
     */
    private $reasonCode;

    /**
     * @var ReversalAmount|null
     */
    private $reversalAmount;

    /**
     * @var \DateTime|null
     */
    private $schemeProcessingDate;

    /**
     * Returns Charges Amount.
     * Only present when a DirectDebitReversal contains charges. SEPA only
     */
    public function getChargesAmount(): ?ChargesAmount
    {
        return $this->chargesAmount;
    }

    /**
     * Sets Charges Amount.
     * Only present when a DirectDebitReversal contains charges. SEPA only
     *
     * @maps charges_amount
     */
    public function setChargesAmount(?ChargesAmount $chargesAmount): void
    {
        $this->chargesAmount = $chargesAmount;
    }

    /**
     * Returns Processing Date.
     * Date on which the operation is to be debited from the debtor account. Formatted according to ISO
     * 8601 format: YYYY-MM-DD.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     * Date on which the operation is to be debited from the debtor account. Formatted according to ISO
     * 8601 format: YYYY-MM-DD.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns Reason.
     * Further explanation of the reason given in reason_code. Only evaluated for certain reason codes.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * Sets Reason.
     * Further explanation of the reason given in reason_code. Only evaluated for certain reason codes.
     *
     * @maps reason
     */
    public function setReason(?string $reason): void
    {
        $this->reason = $reason;
    }

    /**
     * Returns Reason Code.
     * The reason for the direct debit reversal. Has to be a valid [reversal reason code](http://api-docs.
     * form3.tech/api.html#enumerations-reversal-reason-codes).
     */
    public function getReasonCode(): ?string
    {
        return $this->reasonCode;
    }

    /**
     * Sets Reason Code.
     * The reason for the direct debit reversal. Has to be a valid [reversal reason code](http://api-docs.
     * form3.tech/api.html#enumerations-reversal-reason-codes).
     *
     * @maps reason_code
     */
    public function setReasonCode(?string $reasonCode): void
    {
        $this->reasonCode = $reasonCode;
    }

    /**
     * Returns Reversal Amount.
     * SEPA only
     */
    public function getReversalAmount(): ?ReversalAmount
    {
        return $this->reversalAmount;
    }

    /**
     * Sets Reversal Amount.
     * SEPA only
     *
     * @maps reversal_amount
     */
    public function setReversalAmount(?ReversalAmount $reversalAmount): void
    {
        $this->reversalAmount = $reversalAmount;
    }

    /**
     * Returns Scheme Processing Date.
     * Date on which the operation is processed by the scheme. Formatted according to ISO 8601 format: YYYY-
     * MM-DD. Only used if different from `processing_date`.
     */
    public function getSchemeProcessingDate(): ?\DateTime
    {
        return $this->schemeProcessingDate;
    }

    /**
     * Sets Scheme Processing Date.
     * Date on which the operation is processed by the scheme. Formatted according to ISO 8601 format: YYYY-
     * MM-DD. Only used if different from `processing_date`.
     *
     * @maps scheme_processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setSchemeProcessingDate(?\DateTime $schemeProcessingDate): void
    {
        $this->schemeProcessingDate = $schemeProcessingDate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->chargesAmount)) {
            $json['charges_amount']         = $this->chargesAmount;
        }
        if (isset($this->processingDate)) {
            $json['processing_date']        = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        if (isset($this->reason)) {
            $json['reason']                 = $this->reason;
        }
        if (isset($this->reasonCode)) {
            $json['reason_code']            = $this->reasonCode;
        }
        if (isset($this->reversalAmount)) {
            $json['reversal_amount']        = $this->reversalAmount;
        }
        if (isset($this->schemeProcessingDate)) {
            $json['scheme_processing_date'] = DateTimeHelper::toSimpleDate($this->schemeProcessingDate);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
