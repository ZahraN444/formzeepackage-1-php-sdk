<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class BranchAttributes implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $acceptanceQualifier;

    /**
     * @var string
     */
    private $bankId;

    /**
     * @var string
     */
    private $bankIdCode;

    /**
     * @var string|null
     */
    private $referenceMask;

    /**
     * @var UserDefinedData[]|null
     */
    private $userDefinedData;

    /**
     * @var string|null
     */
    private $validationType;

    /**
     * @param string $bankId
     * @param string $bankIdCode
     */
    public function __construct(string $bankId, string $bankIdCode)
    {
        $this->bankId = $bankId;
        $this->bankIdCode = $bankIdCode;
    }

    /**
     * Returns Acceptance Qualifier.
     * All accepted payments will receive the matching qualifier code
     */
    public function getAcceptanceQualifier(): ?string
    {
        return $this->acceptanceQualifier;
    }

    /**
     * Sets Acceptance Qualifier.
     * All accepted payments will receive the matching qualifier code
     *
     * @maps acceptance_qualifier
     * @factory \Form3PublicAPILib\Models\AcceptanceQualifierEnum::checkValue
     */
    public function setAcceptanceQualifier(?string $acceptanceQualifier): void
    {
        $this->acceptanceQualifier = $acceptanceQualifier;
    }

    /**
     * Returns Bank Id.
     * Local country bank identifier. In the UK this is the sort code.
     */
    public function getBankId(): string
    {
        return $this->bankId;
    }

    /**
     * Sets Bank Id.
     * Local country bank identifier. In the UK this is the sort code.
     *
     * @required
     * @maps bank_id
     */
    public function setBankId(string $bankId): void
    {
        $this->bankId = $bankId;
    }

    /**
     * Returns Bank Id Code.
     * ISO 20022 code used to identify the type of bank ID being used
     */
    public function getBankIdCode(): string
    {
        return $this->bankIdCode;
    }

    /**
     * Sets Bank Id Code.
     * ISO 20022 code used to identify the type of bank ID being used
     *
     * @required
     * @maps bank_id_code
     */
    public function setBankIdCode(string $bankIdCode): void
    {
        $this->bankIdCode = $bankIdCode;
    }

    /**
     * Returns Reference Mask.
     * if present – has effect of making secondary reference in payment mandatory
     */
    public function getReferenceMask(): ?string
    {
        return $this->referenceMask;
    }

    /**
     * Sets Reference Mask.
     * if present – has effect of making secondary reference in payment mandatory
     *
     * @maps reference_mask
     */
    public function setReferenceMask(?string $referenceMask): void
    {
        $this->referenceMask = $referenceMask;
    }

    /**
     * Returns User Defined Data.
     * All purpose list of key-value pairs to store specific data.
     *
     * @return UserDefinedData[]|null
     */
    public function getUserDefinedData(): ?array
    {
        return $this->userDefinedData;
    }

    /**
     * Sets User Defined Data.
     * All purpose list of key-value pairs to store specific data.
     *
     * @maps user_defined_data
     *
     * @param UserDefinedData[]|null $userDefinedData
     */
    public function setUserDefinedData(?array $userDefinedData): void
    {
        $this->userDefinedData = $userDefinedData;
    }

    /**
     * Returns Validation Type.
     * optional validation to apply to the branch
     */
    public function getValidationType(): ?string
    {
        return $this->validationType;
    }

    /**
     * Sets Validation Type.
     * optional validation to apply to the branch
     *
     * @maps validation_type
     * @factory \Form3PublicAPILib\Models\BranchValidationTypeEnum::checkValue
     */
    public function setValidationType(?string $validationType): void
    {
        $this->validationType = $validationType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->acceptanceQualifier)) {
            $json['acceptance_qualifier'] = AcceptanceQualifierEnum::checkValue($this->acceptanceQualifier);
        }
        $json['bank_id']                  = $this->bankId;
        $json['bank_id_code']             = $this->bankIdCode;
        if (isset($this->referenceMask)) {
            $json['reference_mask']       = $this->referenceMask;
        }
        if (isset($this->userDefinedData)) {
            $json['user_defined_data']    = $this->userDefinedData;
        }
        if (isset($this->validationType)) {
            $json['validation_type']      = BranchValidationTypeEnum::checkValue($this->validationType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
