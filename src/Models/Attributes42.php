<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class Attributes42 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $fileFormat;

    /**
     * @var string
     */
    private $fileHash;

    /**
     * @var int
     */
    private $fileSize;

    /**
     * @var string
     */
    private $hashingAlgorithm;

    /**
     * @var int
     */
    private $numberOfParts;

    /**
     * @var string
     */
    private $paymentScheme;

    /**
     * @var int
     */
    private $transactionCount;

    /**
     * @var array|null
     */
    private $transactionData;

    /**
     * @var string|null
     */
    private $transactionSum;

    /**
     * @param string $fileFormat
     * @param string $fileHash
     * @param int $fileSize
     * @param int $numberOfParts
     * @param int $transactionCount
     */
    public function __construct(
        string $fileFormat,
        string $fileHash,
        int $fileSize,
        int $numberOfParts,
        int $transactionCount
    ) {
        $this->fileFormat = $fileFormat;
        $this->fileHash = $fileHash;
        $this->fileSize = $fileSize;
        $this->numberOfParts = $numberOfParts;
        $this->transactionCount = $transactionCount;
    }

    /**
     * Returns File Format.
     * The format of the file that will be submitted/admitted to Form3
     */
    public function getFileFormat(): string
    {
        return $this->fileFormat;
    }

    /**
     * Sets File Format.
     * The format of the file that will be submitted/admitted to Form3
     *
     * @required
     * @maps file_format
     * @factory \Form3PublicAPILib\Models\FileFormatEnum::checkValue
     */
    public function setFileFormat(string $fileFormat): void
    {
        $this->fileFormat = $fileFormat;
    }

    /**
     * Returns File Hash.
     * Hashed content of the file
     */
    public function getFileHash(): string
    {
        return $this->fileHash;
    }

    /**
     * Sets File Hash.
     * Hashed content of the file
     *
     * @required
     * @maps file_hash
     */
    public function setFileHash(string $fileHash): void
    {
        $this->fileHash = $fileHash;
    }

    /**
     * Returns File Size.
     * The size of the file to be uploaded - number of bytes. Max size is 1.4 Gigabyte
     */
    public function getFileSize(): int
    {
        return $this->fileSize;
    }

    /**
     * Sets File Size.
     * The size of the file to be uploaded - number of bytes. Max size is 1.4 Gigabyte
     *
     * @required
     * @maps file_size
     */
    public function setFileSize(int $fileSize): void
    {
        $this->fileSize = $fileSize;
    }

    /**
     * Returns Hashing Algorithm.
     * The algorithm used to generate the signature
     */
    public function getHashingAlgorithm(): string
    {
        return $this->hashingAlgorithm;
    }

    /**
     * Sets Hashing Algorithm.
     * The algorithm used to generate the signature
     *
     * @maps hashing_algorithm
     */
    public function setHashingAlgorithm(string $hashingAlgorithm): void
    {
        $this->hashingAlgorithm = $hashingAlgorithm;
    }

    /**
     * Returns Number of Parts.
     * The count of chunks to be uploaded to the resource
     */
    public function getNumberOfParts(): int
    {
        return $this->numberOfParts;
    }

    /**
     * Sets Number of Parts.
     * The count of chunks to be uploaded to the resource
     *
     * @required
     * @maps number_of_parts
     */
    public function setNumberOfParts(int $numberOfParts): void
    {
        $this->numberOfParts = $numberOfParts;
    }

    /**
     * Returns Payment Scheme.
     * Scheme/gateway that the file is to be processed by
     */
    public function getPaymentScheme(): string
    {
        return $this->paymentScheme;
    }

    /**
     * Sets Payment Scheme.
     * Scheme/gateway that the file is to be processed by
     *
     * @maps payment_scheme
     */
    public function setPaymentScheme(string $paymentScheme): void
    {
        $this->paymentScheme = $paymentScheme;
    }

    /**
     * Returns Transaction Count.
     * The count of transactions that will be submitted in the file
     */
    public function getTransactionCount(): int
    {
        return $this->transactionCount;
    }

    /**
     * Sets Transaction Count.
     * The count of transactions that will be submitted in the file
     *
     * @required
     * @maps transaction_count
     */
    public function setTransactionCount(int $transactionCount): void
    {
        $this->transactionCount = $transactionCount;
    }

    /**
     * Returns Transaction Data.
     * All purpose key-value fields containing file specific data (read only).
     */
    public function getTransactionData(): ?array
    {
        return $this->transactionData;
    }

    /**
     * Sets Transaction Data.
     * All purpose key-value fields containing file specific data (read only).
     *
     * @maps transaction_data
     */
    public function setTransactionData(?array $transactionData): void
    {
        $this->transactionData = $transactionData;
    }

    /**
     * Returns Transaction Sum.
     * The sum value of the transactions will be submitted in the file
     */
    public function getTransactionSum(): ?string
    {
        return $this->transactionSum;
    }

    /**
     * Sets Transaction Sum.
     * The sum value of the transactions will be submitted in the file
     *
     * @maps transaction_sum
     */
    public function setTransactionSum(?string $transactionSum): void
    {
        $this->transactionSum = $transactionSum;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['file_format']          = FileFormatEnum::checkValue($this->fileFormat);
        $json['file_hash']            = $this->fileHash;
        $json['file_size']            = $this->fileSize;
        $json['hashing_algorithm']    = $this->hashingAlgorithm;
        $json['number_of_parts']      = $this->numberOfParts;
        $json['payment_scheme']       = $this->paymentScheme;
        $json['transaction_count']    = $this->transactionCount;
        if (isset($this->transactionData)) {
            $json['transaction_data'] = $this->transactionData;
        }
        if (isset($this->transactionSum)) {
            $json['transaction_sum']  = $this->transactionSum;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
