<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class ClaimAttributes implements \JsonSerializable
{
    /**
     * @var BeneficiaryParty2
     */
    private $beneficiaryParty;

    /**
     * @var string
     */
    private $clearingId;

    /**
     * @var string|null
     */
    private $contactName;

    /**
     * @var DebtorParty1
     */
    private $debtorParty;

    /**
     * @var DisputedTransaction[]
     */
    private $disputedTransactions;

    /**
     * @var int
     */
    private $numberOfClaims;

    /**
     * @var OriginalInstruction
     */
    private $originalInstruction;

    /**
     * @var string
     */
    private $paymentScheme;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var string
     */
    private $reasonCode;

    /**
     * @var string
     */
    private $reference;

    /**
     * @var \DateTime|null
     */
    private $requestDate;

    /**
     * @param BeneficiaryParty2 $beneficiaryParty
     * @param string $clearingId
     * @param DebtorParty1 $debtorParty
     * @param DisputedTransaction[] $disputedTransactions
     * @param int $numberOfClaims
     * @param OriginalInstruction $originalInstruction
     * @param string $paymentScheme
     * @param string $reasonCode
     * @param string $reference
     */
    public function __construct(
        BeneficiaryParty2 $beneficiaryParty,
        string $clearingId,
        DebtorParty1 $debtorParty,
        array $disputedTransactions,
        int $numberOfClaims,
        OriginalInstruction $originalInstruction,
        string $paymentScheme,
        string $reasonCode,
        string $reference
    ) {
        $this->beneficiaryParty = $beneficiaryParty;
        $this->clearingId = $clearingId;
        $this->debtorParty = $debtorParty;
        $this->disputedTransactions = $disputedTransactions;
        $this->numberOfClaims = $numberOfClaims;
        $this->originalInstruction = $originalInstruction;
        $this->paymentScheme = $paymentScheme;
        $this->reasonCode = $reasonCode;
        $this->reference = $reference;
    }

    /**
     * Returns Beneficiary Party.
     */
    public function getBeneficiaryParty(): BeneficiaryParty2
    {
        return $this->beneficiaryParty;
    }

    /**
     * Sets Beneficiary Party.
     *
     * @required
     * @maps beneficiary_party
     */
    public function setBeneficiaryParty(BeneficiaryParty2 $beneficiaryParty): void
    {
        $this->beneficiaryParty = $beneficiaryParty;
    }

    /**
     * Returns Clearing Id.
     */
    public function getClearingId(): string
    {
        return $this->clearingId;
    }

    /**
     * Sets Clearing Id.
     *
     * @required
     * @maps clearing_id
     */
    public function setClearingId(string $clearingId): void
    {
        $this->clearingId = $clearingId;
    }

    /**
     * Returns Contact Name.
     */
    public function getContactName(): ?string
    {
        return $this->contactName;
    }

    /**
     * Sets Contact Name.
     *
     * @maps contact_name
     */
    public function setContactName(?string $contactName): void
    {
        $this->contactName = $contactName;
    }

    /**
     * Returns Debtor Party.
     */
    public function getDebtorParty(): DebtorParty1
    {
        return $this->debtorParty;
    }

    /**
     * Sets Debtor Party.
     *
     * @required
     * @maps debtor_party
     */
    public function setDebtorParty(DebtorParty1 $debtorParty): void
    {
        $this->debtorParty = $debtorParty;
    }

    /**
     * Returns Disputed Transactions.
     *
     * @return DisputedTransaction[]
     */
    public function getDisputedTransactions(): array
    {
        return $this->disputedTransactions;
    }

    /**
     * Sets Disputed Transactions.
     *
     * @required
     * @maps disputed_transactions
     *
     * @param DisputedTransaction[] $disputedTransactions
     */
    public function setDisputedTransactions(array $disputedTransactions): void
    {
        $this->disputedTransactions = $disputedTransactions;
    }

    /**
     * Returns Number of Claims.
     */
    public function getNumberOfClaims(): int
    {
        return $this->numberOfClaims;
    }

    /**
     * Sets Number of Claims.
     *
     * @required
     * @maps number_of_claims
     */
    public function setNumberOfClaims(int $numberOfClaims): void
    {
        $this->numberOfClaims = $numberOfClaims;
    }

    /**
     * Returns Original Instruction.
     */
    public function getOriginalInstruction(): OriginalInstruction
    {
        return $this->originalInstruction;
    }

    /**
     * Sets Original Instruction.
     *
     * @required
     * @maps original_instruction
     */
    public function setOriginalInstruction(OriginalInstruction $originalInstruction): void
    {
        $this->originalInstruction = $originalInstruction;
    }

    /**
     * Returns Payment Scheme.
     */
    public function getPaymentScheme(): string
    {
        return $this->paymentScheme;
    }

    /**
     * Sets Payment Scheme.
     *
     * @required
     * @maps payment_scheme
     */
    public function setPaymentScheme(string $paymentScheme): void
    {
        $this->paymentScheme = $paymentScheme;
    }

    /**
     * Returns Processing Date.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns Reason Code.
     */
    public function getReasonCode(): string
    {
        return $this->reasonCode;
    }

    /**
     * Sets Reason Code.
     *
     * @required
     * @maps reason_code
     */
    public function setReasonCode(string $reasonCode): void
    {
        $this->reasonCode = $reasonCode;
    }

    /**
     * Returns Reference.
     */
    public function getReference(): string
    {
        return $this->reference;
    }

    /**
     * Sets Reference.
     *
     * @required
     * @maps reference
     */
    public function setReference(string $reference): void
    {
        $this->reference = $reference;
    }

    /**
     * Returns Request Date.
     */
    public function getRequestDate(): ?\DateTime
    {
        return $this->requestDate;
    }

    /**
     * Sets Request Date.
     *
     * @maps request_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setRequestDate(?\DateTime $requestDate): void
    {
        $this->requestDate = $requestDate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['beneficiary_party']     = $this->beneficiaryParty;
        $json['clearing_id']           = $this->clearingId;
        if (isset($this->contactName)) {
            $json['contact_name']      = $this->contactName;
        }
        $json['debtor_party']          = $this->debtorParty;
        $json['disputed_transactions'] = $this->disputedTransactions;
        $json['number_of_claims']      = $this->numberOfClaims;
        $json['original_instruction']  = $this->originalInstruction;
        $json['payment_scheme']        = $this->paymentScheme;
        if (isset($this->processingDate)) {
            $json['processing_date']   = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        $json['reason_code']           = $this->reasonCode;
        $json['reference']             = $this->reference;
        if (isset($this->requestDate)) {
            $json['request_date']      = DateTimeHelper::toSimpleDate($this->requestDate);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
