<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class PaymentAttributes implements \JsonSerializable
{
    /**
     * @var Agent[]|null
     */
    private $agents;

    /**
     * @var string|null
     */
    private $amount;

    /**
     * @var string|null
     */
    private $batchBookingIndicator;

    /**
     * @var string|null
     */
    private $batchId;

    /**
     * @var string|null
     */
    private $batchType;

    /**
     * @var BeneficiaryParty1|null
     */
    private $beneficiaryParty;

    /**
     * @var string|null
     */
    private $categoryPurpose;

    /**
     * @var string|null
     */
    private $categoryPurposeCoded;

    /**
     * @var ChargesInformation|null
     */
    private $chargesInformation;

    /**
     * @var string|null
     */
    private $clearingId;

    /**
     * @var string|null
     */
    private $currency;

    /**
     * @var DebtorParty|null
     */
    private $debtorParty;

    /**
     * @var string|null
     */
    private $endToEndReference;

    /**
     * @var string|null
     */
    private $fileNumber;

    /**
     * @var Fx|null
     */
    private $fx;

    /**
     * @var string|null
     */
    private $instructionId;

    /**
     * @var IntermediaryBankAccountHoldingEntity|null
     */
    private $intermediaryBank;

    /**
     * @var string|null
     */
    private $numericReference;

    /**
     * @var \DateTime|null
     */
    private $paymentAcceptanceDatetime;

    /**
     * @var string|null
     */
    private $paymentPurpose;

    /**
     * @var string|null
     */
    private $paymentPurposeCoded;

    /**
     * @var string|null
     */
    private $paymentScheme;

    /**
     * @var string|null
     */
    private $paymentType;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var ReceiversCorrespondentAccountHoldingEntity|null
     */
    private $receiversCorrespondent;

    /**
     * @var string|null
     */
    private $reference;

    /**
     * @var Reference[]|null
     */
    private $references;

    /**
     * @var string|null
     */
    private $regulatoryReporting;

    /**
     * @var ReimbursementAccountHoldingEntity|null
     */
    private $reimbursement;

    /**
     * @var string|null
     */
    private $remittanceInformation;

    /**
     * @var string|null
     */
    private $schemePaymentSubType;

    /**
     * @var string|null
     */
    private $schemePaymentType;

    /**
     * @var \DateTime|null
     */
    private $schemeProcessingDate;

    /**
     * @var string|null
     */
    private $schemeTransactionId;

    /**
     * @var SendersCorrespondentAccountHoldingEntity|null
     */
    private $sendersCorrespondent;

    /**
     * @var Settlement|null
     */
    private $settlement;

    /**
     * @var StructuredReference|null
     */
    private $structuredReference;

    /**
     * @var Swift|null
     */
    private $swift;

    /**
     * @var UltimateEntity|null
     */
    private $ultimateBeneficiary;

    /**
     * @var UltimateEntity|null
     */
    private $ultimateDebtor;

    /**
     * @var string|null
     */
    private $uniqueSchemeId;

    /**
     * @var UserDefinedData[]|null
     */
    private $userDefinedData;

    /**
     * Returns Agents.
     * Block to represent a Financial Institution/agent in the payment chain
     *
     * @return Agent[]|null
     */
    public function getAgents(): ?array
    {
        return $this->agents;
    }

    /**
     * Sets Agents.
     * Block to represent a Financial Institution/agent in the payment chain
     *
     * @maps agents
     *
     * @param Agent[]|null $agents
     */
    public function setAgents(?array $agents): void
    {
        $this->agents = $agents;
    }

    /**
     * Returns Amount.
     * Amount of money moved between the instructing agent and instructed agent
     */
    public function getAmount(): ?string
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * Amount of money moved between the instructing agent and instructed agent
     *
     * @maps amount
     */
    public function setAmount(?string $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Batch Booking Indicator.
     */
    public function getBatchBookingIndicator(): ?string
    {
        return $this->batchBookingIndicator;
    }

    /**
     * Sets Batch Booking Indicator.
     *
     * @maps batch_booking_indicator
     */
    public function setBatchBookingIndicator(?string $batchBookingIndicator): void
    {
        $this->batchBookingIndicator = $batchBookingIndicator;
    }

    /**
     * Returns Batch Id.
     */
    public function getBatchId(): ?string
    {
        return $this->batchId;
    }

    /**
     * Sets Batch Id.
     *
     * @maps batch_id
     */
    public function setBatchId(?string $batchId): void
    {
        $this->batchId = $batchId;
    }

    /**
     * Returns Batch Type.
     */
    public function getBatchType(): ?string
    {
        return $this->batchType;
    }

    /**
     * Sets Batch Type.
     *
     * @maps batch_type
     */
    public function setBatchType(?string $batchType): void
    {
        $this->batchType = $batchType;
    }

    /**
     * Returns Beneficiary Party.
     */
    public function getBeneficiaryParty(): ?BeneficiaryParty1
    {
        return $this->beneficiaryParty;
    }

    /**
     * Sets Beneficiary Party.
     *
     * @maps beneficiary_party
     */
    public function setBeneficiaryParty(?BeneficiaryParty1 $beneficiaryParty): void
    {
        $this->beneficiaryParty = $beneficiaryParty;
    }

    /**
     * Returns Category Purpose.
     * Category purpose in proprietary form. Specifies the high level purpose of the instruction. Cannot be
     * used at the same time as `category_purpose_coded`.
     */
    public function getCategoryPurpose(): ?string
    {
        return $this->categoryPurpose;
    }

    /**
     * Sets Category Purpose.
     * Category purpose in proprietary form. Specifies the high level purpose of the instruction. Cannot be
     * used at the same time as `category_purpose_coded`.
     *
     * @maps category_purpose
     */
    public function setCategoryPurpose(?string $categoryPurpose): void
    {
        $this->categoryPurpose = $categoryPurpose;
    }

    /**
     * Returns Category Purpose Coded.
     * Category purpose in a coded form. Specifies the high level purpose of the instruction. Cannot be
     * used at the same time as `category_purpose`.
     */
    public function getCategoryPurposeCoded(): ?string
    {
        return $this->categoryPurposeCoded;
    }

    /**
     * Sets Category Purpose Coded.
     * Category purpose in a coded form. Specifies the high level purpose of the instruction. Cannot be
     * used at the same time as `category_purpose`.
     *
     * @maps category_purpose_coded
     */
    public function setCategoryPurposeCoded(?string $categoryPurposeCoded): void
    {
        $this->categoryPurposeCoded = $categoryPurposeCoded;
    }

    /**
     * Returns Charges Information.
     */
    public function getChargesInformation(): ?ChargesInformation
    {
        return $this->chargesInformation;
    }

    /**
     * Sets Charges Information.
     *
     * @maps charges_information
     */
    public function setChargesInformation(?ChargesInformation $chargesInformation): void
    {
        $this->chargesInformation = $chargesInformation;
    }

    /**
     * Returns Clearing Id.
     * Unique identifier for organisations collecting payments
     */
    public function getClearingId(): ?string
    {
        return $this->clearingId;
    }

    /**
     * Sets Clearing Id.
     * Unique identifier for organisations collecting payments
     *
     * @maps clearing_id
     */
    public function setClearingId(?string $clearingId): void
    {
        $this->clearingId = $clearingId;
    }

    /**
     * Returns Currency.
     * Currency of the transaction amount. Currency code as defined in [ISO 4217](http://www.iso.
     * org/iso/home/standards/currency_codes.htm)
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     * Currency of the transaction amount. Currency code as defined in [ISO 4217](http://www.iso.
     * org/iso/home/standards/currency_codes.htm)
     *
     * @maps currency
     */
    public function setCurrency(?string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Debtor Party.
     */
    public function getDebtorParty(): ?DebtorParty
    {
        return $this->debtorParty;
    }

    /**
     * Sets Debtor Party.
     *
     * @maps debtor_party
     */
    public function setDebtorParty(?DebtorParty $debtorParty): void
    {
        $this->debtorParty = $debtorParty;
    }

    /**
     * Returns End to End Reference.
     * Unique identification, as assigned by the initiating party, to unambiguously identify the
     * transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     */
    public function getEndToEndReference(): ?string
    {
        return $this->endToEndReference;
    }

    /**
     * Sets End to End Reference.
     * Unique identification, as assigned by the initiating party, to unambiguously identify the
     * transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     *
     * @maps end_to_end_reference
     */
    public function setEndToEndReference(?string $endToEndReference): void
    {
        $this->endToEndReference = $endToEndReference;
    }

    /**
     * Returns File Number.
     */
    public function getFileNumber(): ?string
    {
        return $this->fileNumber;
    }

    /**
     * Sets File Number.
     *
     * @maps file_number
     */
    public function setFileNumber(?string $fileNumber): void
    {
        $this->fileNumber = $fileNumber;
    }

    /**
     * Returns Fx.
     */
    public function getFx(): ?Fx
    {
        return $this->fx;
    }

    /**
     * Sets Fx.
     *
     * @maps fx
     */
    public function setFx(?Fx $fx): void
    {
        $this->fx = $fx;
    }

    /**
     * Returns Instruction Id.
     * Unique identification, as assigned by the initiating party to unambiguously identify the transaction.
     * This identification is an point-to-point reference and is passed on, unchanged, throughout the
     * entire chain. Cannot include leading, trailing or internal spaces.
     */
    public function getInstructionId(): ?string
    {
        return $this->instructionId;
    }

    /**
     * Sets Instruction Id.
     * Unique identification, as assigned by the initiating party to unambiguously identify the transaction.
     * This identification is an point-to-point reference and is passed on, unchanged, throughout the
     * entire chain. Cannot include leading, trailing or internal spaces.
     *
     * @maps instruction_id
     */
    public function setInstructionId(?string $instructionId): void
    {
        $this->instructionId = $instructionId;
    }

    /**
     * Returns Intermediary Bank.
     */
    public function getIntermediaryBank(): ?IntermediaryBankAccountHoldingEntity
    {
        return $this->intermediaryBank;
    }

    /**
     * Sets Intermediary Bank.
     *
     * @maps intermediary_bank
     */
    public function setIntermediaryBank(?IntermediaryBankAccountHoldingEntity $intermediaryBank): void
    {
        $this->intermediaryBank = $intermediaryBank;
    }

    /**
     * Returns Numeric Reference.
     * Numeric reference field, see scheme specific descriptions for usage
     */
    public function getNumericReference(): ?string
    {
        return $this->numericReference;
    }

    /**
     * Sets Numeric Reference.
     * Numeric reference field, see scheme specific descriptions for usage
     *
     * @maps numeric_reference
     */
    public function setNumericReference(?string $numericReference): void
    {
        $this->numericReference = $numericReference;
    }

    /**
     * Returns Payment Acceptance Datetime.
     * Timestamp of when the payment instruction meets the set processing conditions. Format: YYYY-MM-DDThh:
     * mm:ss:mmm+hh:mm
     */
    public function getPaymentAcceptanceDatetime(): ?\DateTime
    {
        return $this->paymentAcceptanceDatetime;
    }

    /**
     * Sets Payment Acceptance Datetime.
     * Timestamp of when the payment instruction meets the set processing conditions. Format: YYYY-MM-DDThh:
     * mm:ss:mmm+hh:mm
     *
     * @maps payment_acceptance_datetime
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setPaymentAcceptanceDatetime(?\DateTime $paymentAcceptanceDatetime): void
    {
        $this->paymentAcceptanceDatetime = $paymentAcceptanceDatetime;
    }

    /**
     * Returns Payment Purpose.
     * Purpose of the payment in a proprietary form
     */
    public function getPaymentPurpose(): ?string
    {
        return $this->paymentPurpose;
    }

    /**
     * Sets Payment Purpose.
     * Purpose of the payment in a proprietary form
     *
     * @maps payment_purpose
     */
    public function setPaymentPurpose(?string $paymentPurpose): void
    {
        $this->paymentPurpose = $paymentPurpose;
    }

    /**
     * Returns Payment Purpose Coded.
     * Purpose of the payment in a coded form
     */
    public function getPaymentPurposeCoded(): ?string
    {
        return $this->paymentPurposeCoded;
    }

    /**
     * Sets Payment Purpose Coded.
     * Purpose of the payment in a coded form
     *
     * @maps payment_purpose_coded
     */
    public function setPaymentPurposeCoded(?string $paymentPurposeCoded): void
    {
        $this->paymentPurposeCoded = $paymentPurposeCoded;
    }

    /**
     * Returns Payment Scheme.
     * Clearing infrastructure through which the payment instruction is to be processed. Default for given
     * organisation ID is used if left empty. Has to be a valid [scheme identifier](http://draft-api-docs.
     * form3.tech/api.html#enumerations-schemes).
     */
    public function getPaymentScheme(): ?string
    {
        return $this->paymentScheme;
    }

    /**
     * Sets Payment Scheme.
     * Clearing infrastructure through which the payment instruction is to be processed. Default for given
     * organisation ID is used if left empty. Has to be a valid [scheme identifier](http://draft-api-docs.
     * form3.tech/api.html#enumerations-schemes).
     *
     * @maps payment_scheme
     */
    public function setPaymentScheme(?string $paymentScheme): void
    {
        $this->paymentScheme = $paymentScheme;
    }

    /**
     * Returns Payment Type.
     */
    public function getPaymentType(): ?string
    {
        return $this->paymentType;
    }

    /**
     * Sets Payment Type.
     *
     * @maps payment_type
     */
    public function setPaymentType(?string $paymentType): void
    {
        $this->paymentType = $paymentType;
    }

    /**
     * Returns Processing Date.
     * Date on which the payment is to be debited from the debtor account. Formatted according to ISO 8601
     * format: YYYY-MM-DD.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     * Date on which the payment is to be debited from the debtor account. Formatted according to ISO 8601
     * format: YYYY-MM-DD.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns Receivers Correspondent.
     */
    public function getReceiversCorrespondent(): ?ReceiversCorrespondentAccountHoldingEntity
    {
        return $this->receiversCorrespondent;
    }

    /**
     * Sets Receivers Correspondent.
     *
     * @maps receivers_correspondent
     */
    public function setReceiversCorrespondent(
        ?ReceiversCorrespondentAccountHoldingEntity $receiversCorrespondent
    ): void {
        $this->receiversCorrespondent = $receiversCorrespondent;
    }

    /**
     * Returns Reference.
     * Payment reference for beneficiary use
     */
    public function getReference(): ?string
    {
        return $this->reference;
    }

    /**
     * Sets Reference.
     * Payment reference for beneficiary use
     *
     * @maps reference
     */
    public function setReference(?string $reference): void
    {
        $this->reference = $reference;
    }

    /**
     * Returns References.
     * Block to represent a list of references
     *
     * @return Reference[]|null
     */
    public function getReferences(): ?array
    {
        return $this->references;
    }

    /**
     * Sets References.
     * Block to represent a list of references
     *
     * @maps references
     *
     * @param Reference[]|null $references
     */
    public function setReferences(?array $references): void
    {
        $this->references = $references;
    }

    /**
     * Returns Regulatory Reporting.
     * Regulatory reporting information
     */
    public function getRegulatoryReporting(): ?string
    {
        return $this->regulatoryReporting;
    }

    /**
     * Sets Regulatory Reporting.
     * Regulatory reporting information
     *
     * @maps regulatory_reporting
     */
    public function setRegulatoryReporting(?string $regulatoryReporting): void
    {
        $this->regulatoryReporting = $regulatoryReporting;
    }

    /**
     * Returns Reimbursement.
     */
    public function getReimbursement(): ?ReimbursementAccountHoldingEntity
    {
        return $this->reimbursement;
    }

    /**
     * Sets Reimbursement.
     *
     * @maps reimbursement
     */
    public function setReimbursement(?ReimbursementAccountHoldingEntity $reimbursement): void
    {
        $this->reimbursement = $reimbursement;
    }

    /**
     * Returns Remittance Information.
     * Information supplied to enable the matching of an entry with the items that the transfer is intended
     * to settle, such as commercial invoices in an accounts receivable system provided by the debtor for
     * the beneficiary.
     */
    public function getRemittanceInformation(): ?string
    {
        return $this->remittanceInformation;
    }

    /**
     * Sets Remittance Information.
     * Information supplied to enable the matching of an entry with the items that the transfer is intended
     * to settle, such as commercial invoices in an accounts receivable system provided by the debtor for
     * the beneficiary.
     *
     * @maps remittance_information
     */
    public function setRemittanceInformation(?string $remittanceInformation): void
    {
        $this->remittanceInformation = $remittanceInformation;
    }

    /**
     * Returns Scheme Payment Sub Type.
     * The scheme specific payment [sub type](http://api-docs.form3.tech/api.html#enumerations-scheme-
     * specific-payment-sub-types)
     */
    public function getSchemePaymentSubType(): ?string
    {
        return $this->schemePaymentSubType;
    }

    /**
     * Sets Scheme Payment Sub Type.
     * The scheme specific payment [sub type](http://api-docs.form3.tech/api.html#enumerations-scheme-
     * specific-payment-sub-types)
     *
     * @maps scheme_payment_sub_type
     */
    public function setSchemePaymentSubType(?string $schemePaymentSubType): void
    {
        $this->schemePaymentSubType = $schemePaymentSubType;
    }

    /**
     * Returns Scheme Payment Type.
     * The [scheme-specific payment type](#enumerations-scheme-payment-types)
     */
    public function getSchemePaymentType(): ?string
    {
        return $this->schemePaymentType;
    }

    /**
     * Sets Scheme Payment Type.
     * The [scheme-specific payment type](#enumerations-scheme-payment-types)
     *
     * @maps scheme_payment_type
     */
    public function setSchemePaymentType(?string $schemePaymentType): void
    {
        $this->schemePaymentType = $schemePaymentType;
    }

    /**
     * Returns Scheme Processing Date.
     * Date on which the payment is processed by the scheme. Only used if different from `processing_date`.
     */
    public function getSchemeProcessingDate(): ?\DateTime
    {
        return $this->schemeProcessingDate;
    }

    /**
     * Sets Scheme Processing Date.
     * Date on which the payment is processed by the scheme. Only used if different from `processing_date`.
     *
     * @maps scheme_processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setSchemeProcessingDate(?\DateTime $schemeProcessingDate): void
    {
        $this->schemeProcessingDate = $schemeProcessingDate;
    }

    /**
     * Returns Scheme Transaction Id.
     * Unique identification, as assigned by the first instructing agent, to unambiguously identify the
     * transaction that is passed on, unchanged, throughout the entire interbank chain.
     */
    public function getSchemeTransactionId(): ?string
    {
        return $this->schemeTransactionId;
    }

    /**
     * Sets Scheme Transaction Id.
     * Unique identification, as assigned by the first instructing agent, to unambiguously identify the
     * transaction that is passed on, unchanged, throughout the entire interbank chain.
     *
     * @maps scheme_transaction_id
     */
    public function setSchemeTransactionId(?string $schemeTransactionId): void
    {
        $this->schemeTransactionId = $schemeTransactionId;
    }

    /**
     * Returns Senders Correspondent.
     */
    public function getSendersCorrespondent(): ?SendersCorrespondentAccountHoldingEntity
    {
        return $this->sendersCorrespondent;
    }

    /**
     * Sets Senders Correspondent.
     *
     * @maps senders_correspondent
     */
    public function setSendersCorrespondent(?SendersCorrespondentAccountHoldingEntity $sendersCorrespondent): void
    {
        $this->sendersCorrespondent = $sendersCorrespondent;
    }

    /**
     * Returns Settlement.
     * Specifies the details on how the settlement of the transaction between the instructing agent and the
     * instructed agent is completed
     */
    public function getSettlement(): ?Settlement
    {
        return $this->settlement;
    }

    /**
     * Sets Settlement.
     * Specifies the details on how the settlement of the transaction between the instructing agent and the
     * instructed agent is completed
     *
     * @maps settlement
     */
    public function setSettlement(?Settlement $settlement): void
    {
        $this->settlement = $settlement;
    }

    /**
     * Returns Structured Reference.
     */
    public function getStructuredReference(): ?StructuredReference
    {
        return $this->structuredReference;
    }

    /**
     * Sets Structured Reference.
     *
     * @maps structured_reference
     */
    public function setStructuredReference(?StructuredReference $structuredReference): void
    {
        $this->structuredReference = $structuredReference;
    }

    /**
     * Returns Swift.
     */
    public function getSwift(): ?Swift
    {
        return $this->swift;
    }

    /**
     * Sets Swift.
     *
     * @maps swift
     */
    public function setSwift(?Swift $swift): void
    {
        $this->swift = $swift;
    }

    /**
     * Returns Ultimate Beneficiary.
     */
    public function getUltimateBeneficiary(): ?UltimateEntity
    {
        return $this->ultimateBeneficiary;
    }

    /**
     * Sets Ultimate Beneficiary.
     *
     * @maps ultimate_beneficiary
     */
    public function setUltimateBeneficiary(?UltimateEntity $ultimateBeneficiary): void
    {
        $this->ultimateBeneficiary = $ultimateBeneficiary;
    }

    /**
     * Returns Ultimate Debtor.
     */
    public function getUltimateDebtor(): ?UltimateEntity
    {
        return $this->ultimateDebtor;
    }

    /**
     * Sets Ultimate Debtor.
     *
     * @maps ultimate_debtor
     */
    public function setUltimateDebtor(?UltimateEntity $ultimateDebtor): void
    {
        $this->ultimateDebtor = $ultimateDebtor;
    }

    /**
     * Returns Unique Scheme Id.
     * The scheme-specific unique transaction ID. Populated by the scheme.
     */
    public function getUniqueSchemeId(): ?string
    {
        return $this->uniqueSchemeId;
    }

    /**
     * Sets Unique Scheme Id.
     * The scheme-specific unique transaction ID. Populated by the scheme.
     *
     * @maps unique_scheme_id
     */
    public function setUniqueSchemeId(?string $uniqueSchemeId): void
    {
        $this->uniqueSchemeId = $uniqueSchemeId;
    }

    /**
     * Returns User Defined Data.
     * All purpose list of key-value pairs specific data stored on the payment.
     *
     * @return UserDefinedData[]|null
     */
    public function getUserDefinedData(): ?array
    {
        return $this->userDefinedData;
    }

    /**
     * Sets User Defined Data.
     * All purpose list of key-value pairs specific data stored on the payment.
     *
     * @maps user_defined_data
     *
     * @param UserDefinedData[]|null $userDefinedData
     */
    public function setUserDefinedData(?array $userDefinedData): void
    {
        $this->userDefinedData = $userDefinedData;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->agents)) {
            $json['agents']                      = $this->agents;
        }
        if (isset($this->amount)) {
            $json['amount']                      = $this->amount;
        }
        if (isset($this->batchBookingIndicator)) {
            $json['batch_booking_indicator']     = $this->batchBookingIndicator;
        }
        if (isset($this->batchId)) {
            $json['batch_id']                    = $this->batchId;
        }
        if (isset($this->batchType)) {
            $json['batch_type']                  = $this->batchType;
        }
        if (isset($this->beneficiaryParty)) {
            $json['beneficiary_party']           = $this->beneficiaryParty;
        }
        if (isset($this->categoryPurpose)) {
            $json['category_purpose']            = $this->categoryPurpose;
        }
        if (isset($this->categoryPurposeCoded)) {
            $json['category_purpose_coded']      = $this->categoryPurposeCoded;
        }
        if (isset($this->chargesInformation)) {
            $json['charges_information']         = $this->chargesInformation;
        }
        if (isset($this->clearingId)) {
            $json['clearing_id']                 = $this->clearingId;
        }
        if (isset($this->currency)) {
            $json['currency']                    = $this->currency;
        }
        if (isset($this->debtorParty)) {
            $json['debtor_party']                = $this->debtorParty;
        }
        if (isset($this->endToEndReference)) {
            $json['end_to_end_reference']        = $this->endToEndReference;
        }
        if (isset($this->fileNumber)) {
            $json['file_number']                 = $this->fileNumber;
        }
        if (isset($this->fx)) {
            $json['fx']                          = $this->fx;
        }
        if (isset($this->instructionId)) {
            $json['instruction_id']              = $this->instructionId;
        }
        if (isset($this->intermediaryBank)) {
            $json['intermediary_bank']           = $this->intermediaryBank;
        }
        if (isset($this->numericReference)) {
            $json['numeric_reference']           = $this->numericReference;
        }
        if (isset($this->paymentAcceptanceDatetime)) {
            $json['payment_acceptance_datetime'] = DateTimeHelper::toRfc3339DateTime($this->paymentAcceptanceDatetime);
        }
        if (isset($this->paymentPurpose)) {
            $json['payment_purpose']             = $this->paymentPurpose;
        }
        if (isset($this->paymentPurposeCoded)) {
            $json['payment_purpose_coded']       = $this->paymentPurposeCoded;
        }
        if (isset($this->paymentScheme)) {
            $json['payment_scheme']              = $this->paymentScheme;
        }
        if (isset($this->paymentType)) {
            $json['payment_type']                = $this->paymentType;
        }
        if (isset($this->processingDate)) {
            $json['processing_date']             = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        if (isset($this->receiversCorrespondent)) {
            $json['receivers_correspondent']     = $this->receiversCorrespondent;
        }
        if (isset($this->reference)) {
            $json['reference']                   = $this->reference;
        }
        if (isset($this->references)) {
            $json['references']                  = $this->references;
        }
        if (isset($this->regulatoryReporting)) {
            $json['regulatory_reporting']        = $this->regulatoryReporting;
        }
        if (isset($this->reimbursement)) {
            $json['reimbursement']               = $this->reimbursement;
        }
        if (isset($this->remittanceInformation)) {
            $json['remittance_information']      = $this->remittanceInformation;
        }
        if (isset($this->schemePaymentSubType)) {
            $json['scheme_payment_sub_type']     = $this->schemePaymentSubType;
        }
        if (isset($this->schemePaymentType)) {
            $json['scheme_payment_type']         = $this->schemePaymentType;
        }
        if (isset($this->schemeProcessingDate)) {
            $json['scheme_processing_date']      = DateTimeHelper::toSimpleDate($this->schemeProcessingDate);
        }
        if (isset($this->schemeTransactionId)) {
            $json['scheme_transaction_id']       = $this->schemeTransactionId;
        }
        if (isset($this->sendersCorrespondent)) {
            $json['senders_correspondent']       = $this->sendersCorrespondent;
        }
        if (isset($this->settlement)) {
            $json['settlement']                  = $this->settlement;
        }
        if (isset($this->structuredReference)) {
            $json['structured_reference']        = $this->structuredReference;
        }
        if (isset($this->swift)) {
            $json['swift']                       = $this->swift;
        }
        if (isset($this->ultimateBeneficiary)) {
            $json['ultimate_beneficiary']        = $this->ultimateBeneficiary;
        }
        if (isset($this->ultimateDebtor)) {
            $json['ultimate_debtor']             = $this->ultimateDebtor;
        }
        if (isset($this->uniqueSchemeId)) {
            $json['unique_scheme_id']            = $this->uniqueSchemeId;
        }
        if (isset($this->userDefinedData)) {
            $json['user_defined_data']           = $this->userDefinedData;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
