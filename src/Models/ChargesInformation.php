<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class ChargesInformation implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $bearerCode;

    /**
     * @var string|null
     */
    private $receiverChargesAmount;

    /**
     * @var string|null
     */
    private $receiverChargesCurrency;

    /**
     * @var SenderCharge[]|null
     */
    private $senderCharges;

    /**
     * Returns Bearer Code.
     * Specifies which party/parties will bear the charges associated with the processing of the payment
     * transaction. Can be one of the following: `DEBT`, `CRED`, `SHAR` or `SLEV`
     */
    public function getBearerCode(): ?string
    {
        return $this->bearerCode;
    }

    /**
     * Sets Bearer Code.
     * Specifies which party/parties will bear the charges associated with the processing of the payment
     * transaction. Can be one of the following: `DEBT`, `CRED`, `SHAR` or `SLEV`
     *
     * @maps bearer_code
     */
    public function setBearerCode(?string $bearerCode): void
    {
        $this->bearerCode = $bearerCode;
    }

    /**
     * Returns Receiver Charges Amount.
     * Transaction charges due to the receiver of the transaction. Requires 1 to 2 decimal places. Must be
     * > 0.
     */
    public function getReceiverChargesAmount(): ?string
    {
        return $this->receiverChargesAmount;
    }

    /**
     * Sets Receiver Charges Amount.
     * Transaction charges due to the receiver of the transaction. Requires 1 to 2 decimal places. Must be
     * > 0.
     *
     * @maps receiver_charges_amount
     */
    public function setReceiverChargesAmount(?string $receiverChargesAmount): void
    {
        $this->receiverChargesAmount = $receiverChargesAmount;
    }

    /**
     * Returns Receiver Charges Currency.
     * Currency of `receiver_charges_amount`. Currency code as defined in [ISO 4217](http://www.iso.
     * org/iso/home/standards/currency_codes.htm).
     */
    public function getReceiverChargesCurrency(): ?string
    {
        return $this->receiverChargesCurrency;
    }

    /**
     * Sets Receiver Charges Currency.
     * Currency of `receiver_charges_amount`. Currency code as defined in [ISO 4217](http://www.iso.
     * org/iso/home/standards/currency_codes.htm).
     *
     * @maps receiver_charges_currency
     */
    public function setReceiverChargesCurrency(?string $receiverChargesCurrency): void
    {
        $this->receiverChargesCurrency = $receiverChargesCurrency;
    }

    /**
     * Returns Sender Charges.
     *
     * @return SenderCharge[]|null
     */
    public function getSenderCharges(): ?array
    {
        return $this->senderCharges;
    }

    /**
     * Sets Sender Charges.
     *
     * @maps sender_charges
     *
     * @param SenderCharge[]|null $senderCharges
     */
    public function setSenderCharges(?array $senderCharges): void
    {
        $this->senderCharges = $senderCharges;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->bearerCode)) {
            $json['bearer_code']               = $this->bearerCode;
        }
        if (isset($this->receiverChargesAmount)) {
            $json['receiver_charges_amount']   = $this->receiverChargesAmount;
        }
        if (isset($this->receiverChargesCurrency)) {
            $json['receiver_charges_currency'] = $this->receiverChargesCurrency;
        }
        if (isset($this->senderCharges)) {
            $json['sender_charges']            = $this->senderCharges;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
