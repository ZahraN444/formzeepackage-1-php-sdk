<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

/**
 * References a transaction initiated to fix the case under investigation.
 */
class CorrectionTransactionInformation implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $amount;

    /**
     * @var string|null
     */
    private $currency;

    /**
     * @var string|null
     */
    private $endToEndReference;

    /**
     * @var string|null
     */
    private $instructionId;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var QueryReference[]|null
     */
    private $references;

    /**
     * @var string|null
     */
    private $schemeTransactionId;

    /**
     * @var string|null
     */
    private $uniqueSchemeId;

    /**
     * Returns Amount.
     * Amount of money moved between the instructing agent and the instructed agent.
     */
    public function getAmount(): ?string
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * Amount of money moved between the instructing agent and the instructed agent.
     *
     * @maps amount
     */
    public function setAmount(?string $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Currency.
     * Currency of the transaction amount. Currency code as defined in [ISO 4217](https://www.iso.
     * org/iso/home/standards/currency_codes.htm)
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     * Currency of the transaction amount. Currency code as defined in [ISO 4217](https://www.iso.
     * org/iso/home/standards/currency_codes.htm)
     *
     * @maps currency
     */
    public function setCurrency(?string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns End to End Reference.
     * Unique identification, as assigned by the initiating party, to unambiguously identify the
     * transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     */
    public function getEndToEndReference(): ?string
    {
        return $this->endToEndReference;
    }

    /**
     * Sets End to End Reference.
     * Unique identification, as assigned by the initiating party, to unambiguously identify the
     * transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     *
     * @maps end_to_end_reference
     */
    public function setEndToEndReference(?string $endToEndReference): void
    {
        $this->endToEndReference = $endToEndReference;
    }

    /**
     * Returns Instruction Id.
     * Unique identification, as assigned by an instructing party for an instructed party, to unambiguously
     * identify the instruction.
     */
    public function getInstructionId(): ?string
    {
        return $this->instructionId;
    }

    /**
     * Sets Instruction Id.
     * Unique identification, as assigned by an instructing party for an instructed party, to unambiguously
     * identify the instruction.
     *
     * @maps instruction_id
     */
    public function setInstructionId(?string $instructionId): void
    {
        $this->instructionId = $instructionId;
    }

    /**
     * Returns Processing Date.
     * Date on which the amount of money ceases to be available to the agent that owes it and when the
     * amount of money becomes available to the agent to which it is due.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     * Date on which the amount of money ceases to be available to the agent that owes it and when the
     * amount of money becomes available to the agent to which it is due.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns References.
     * Reference for the corrective payment for this query case.
     *
     * @return QueryReference[]|null
     */
    public function getReferences(): ?array
    {
        return $this->references;
    }

    /**
     * Sets References.
     * Reference for the corrective payment for this query case.
     *
     * @maps references
     *
     * @param QueryReference[]|null $references
     */
    public function setReferences(?array $references): void
    {
        $this->references = $references;
    }

    /**
     * Returns Scheme Transaction Id.
     * Unique identification, as assigned by the first instructing agent, to unambiguously identify the
     * transaction that is passed on, unchanged, throughout the entire interbank chain.
     */
    public function getSchemeTransactionId(): ?string
    {
        return $this->schemeTransactionId;
    }

    /**
     * Sets Scheme Transaction Id.
     * Unique identification, as assigned by the first instructing agent, to unambiguously identify the
     * transaction that is passed on, unchanged, throughout the entire interbank chain.
     *
     * @maps scheme_transaction_id
     */
    public function setSchemeTransactionId(?string $schemeTransactionId): void
    {
        $this->schemeTransactionId = $schemeTransactionId;
    }

    /**
     * Returns Unique Scheme Id.
     * The scheme-specific unique transaction ID to unambiguously identify the message. Populated by the
     * scheme.
     */
    public function getUniqueSchemeId(): ?string
    {
        return $this->uniqueSchemeId;
    }

    /**
     * Sets Unique Scheme Id.
     * The scheme-specific unique transaction ID to unambiguously identify the message. Populated by the
     * scheme.
     *
     * @maps unique_scheme_id
     */
    public function setUniqueSchemeId(?string $uniqueSchemeId): void
    {
        $this->uniqueSchemeId = $uniqueSchemeId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->amount)) {
            $json['amount']                = $this->amount;
        }
        if (isset($this->currency)) {
            $json['currency']              = $this->currency;
        }
        if (isset($this->endToEndReference)) {
            $json['end_to_end_reference']  = $this->endToEndReference;
        }
        if (isset($this->instructionId)) {
            $json['instruction_id']        = $this->instructionId;
        }
        if (isset($this->processingDate)) {
            $json['processing_date']       = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        if (isset($this->references)) {
            $json['references']            = $this->references;
        }
        if (isset($this->schemeTransactionId)) {
            $json['scheme_transaction_id'] = $this->schemeTransactionId;
        }
        if (isset($this->uniqueSchemeId)) {
            $json['unique_scheme_id']      = $this->uniqueSchemeId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
