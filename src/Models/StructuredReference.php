<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class StructuredReference implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $issuer;

    /**
     * @var string|null
     */
    private $reference;

    /**
     * Returns Issuer.
     * Issuer of remittance reference
     */
    public function getIssuer(): ?string
    {
        return $this->issuer;
    }

    /**
     * Sets Issuer.
     * Issuer of remittance reference
     *
     * @maps issuer
     */
    public function setIssuer(?string $issuer): void
    {
        $this->issuer = $issuer;
    }

    /**
     * Returns Reference.
     * Unique reference to unambiguously refer to the payment originated by the creditor, this reference
     * enables reconciliation by the creditor upon receipt of the amount of money.
     */
    public function getReference(): ?string
    {
        return $this->reference;
    }

    /**
     * Sets Reference.
     * Unique reference to unambiguously refer to the payment originated by the creditor, this reference
     * enables reconciliation by the creditor upon receipt of the amount of money.
     *
     * @maps reference
     */
    public function setReference(?string $reference): void
    {
        $this->reference = $reference;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->issuer)) {
            $json['issuer']    = $this->issuer;
        }
        if (isset($this->reference)) {
            $json['reference'] = $this->reference;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
