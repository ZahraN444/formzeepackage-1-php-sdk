<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class Attributes18 implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $actionTime;

    /**
     * @var string|null
     */
    private $actionedBy;

    /**
     * @var array|null
     */
    private $afterData;

    /**
     * @var array|null
     */
    private $beforeData;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $recordId;

    /**
     * @var string|null
     */
    private $recordType;

    /**
     * Returns Action Time.
     * Timestamp when the change was requested
     */
    public function getActionTime(): ?\DateTime
    {
        return $this->actionTime;
    }

    /**
     * Sets Action Time.
     * Timestamp when the change was requested
     *
     * @maps action_time
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setActionTime(?\DateTime $actionTime): void
    {
        $this->actionTime = $actionTime;
    }

    /**
     * Returns Actioned By.
     * User ID of the user who requested the change
     */
    public function getActionedBy(): ?string
    {
        return $this->actionedBy;
    }

    /**
     * Sets Actioned By.
     * User ID of the user who requested the change
     *
     * @maps actioned_by
     */
    public function setActionedBy(?string $actionedBy): void
    {
        $this->actionedBy = $actionedBy;
    }

    /**
     * Returns After Data.
     * Snapshot of what the data would be after the change (empty if the request was to DELETE a record)
     */
    public function getAfterData(): ?array
    {
        return $this->afterData;
    }

    /**
     * Sets After Data.
     * Snapshot of what the data would be after the change (empty if the request was to DELETE a record)
     *
     * @maps after_data
     */
    public function setAfterData(?array $afterData): void
    {
        $this->afterData = $afterData;
    }

    /**
     * Returns Before Data.
     * Snapshot of the data before the change (empty if the request was to CREATE a new record)
     */
    public function getBeforeData(): ?array
    {
        return $this->beforeData;
    }

    /**
     * Sets Before Data.
     * Snapshot of the data before the change (empty if the request was to CREATE a new record)
     *
     * @maps before_data
     */
    public function setBeforeData(?array $beforeData): void
    {
        $this->beforeData = $beforeData;
    }

    /**
     * Returns Description.
     * Textual description of the change being made
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Textual description of the change being made
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Record Id.
     * ID of the resource that is being changed
     */
    public function getRecordId(): ?string
    {
        return $this->recordId;
    }

    /**
     * Sets Record Id.
     * ID of the resource that is being changed
     *
     * @maps record_id
     */
    public function setRecordId(?string $recordId): void
    {
        $this->recordId = $recordId;
    }

    /**
     * Returns Record Type.
     * Type of the resource that is being changed
     */
    public function getRecordType(): ?string
    {
        return $this->recordType;
    }

    /**
     * Sets Record Type.
     * Type of the resource that is being changed
     *
     * @maps record_type
     */
    public function setRecordType(?string $recordType): void
    {
        $this->recordType = $recordType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->actionTime)) {
            $json['action_time'] = DateTimeHelper::toRfc3339DateTime($this->actionTime);
        }
        if (isset($this->actionedBy)) {
            $json['actioned_by'] = $this->actionedBy;
        }
        if (isset($this->afterData)) {
            $json['after_data']  = $this->afterData;
        }
        if (isset($this->beforeData)) {
            $json['before_data'] = $this->beforeData;
        }
        if (isset($this->description)) {
            $json['description'] = $this->description;
        }
        if (isset($this->recordId)) {
            $json['record_id']   = $this->recordId;
        }
        if (isset($this->recordType)) {
            $json['record_type'] = $this->recordType;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
