<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * [Payment admission status reason](https://api-docs.form3.tech/api.html#enumerations-payment-status-
 * codes-payment-admission-status-reasons)
 */
class PaymentAdmissionStatusReasonEnum
{
    public const ACCEPTED = 'accepted';

    public const INVALID_BENEFICIARY_DETAILS = 'invalid_beneficiary_details';

    public const BANKID_NOT_PROVISIONED = 'bankid_not_provisioned';

    public const UNKNOWN_ACCOUNTNUMBER = 'unknown_accountnumber';

    public const CUSTOMER_CHECK_FAILED = 'customer_check_failed';

    public const SCHEME_TIMEOUT = 'scheme_timeout';

    public const INCORRECT_REFERENCE_VALIDATION_TYPE = 'incorrect_reference_validation_type';

    public const INCORRECT_REFERENCE_SECONDARY_IDENTIFICATION = 'incorrect_reference_secondary_identification';

    public const INCORRECT_REFERENCE_REFERENCE_MASK = 'incorrect_reference_reference_mask';

    public const ACCOUNT_CLOSED = 'account_closed';

    public const ACCOUNT_CLOSED_BUSINESS_REASONS = 'account_closed_business_reasons';

    public const ACCOUNT_CLOSED_STOPPED = 'account_closed_stopped';

    public const ACCOUNT_CLOSED_CURRENCY = 'account_closed_currency';

    public const ACCOUNT_CLOSED_TRANSFERRED = 'account_closed_transferred';

    public const ACCOUNT_CLOSED_BENEFICIARY_DECEASED = 'account_closed_beneficiary_deceased';

    public const ACCOUNT_CLOSED_BENEFICIARY_SENSITIVITIES = 'account_closed_beneficiary_sensitivities';

    public const ACCOUNT_CLOSED_TERMS_AND_CONDITIONS = 'account_closed_terms_and_conditions';

    public const BENEFICIARY_AGENT_CLEARING_PROCESS_TIMEOUT = 'beneficiary_agent_clearing_process_timeout';

    public const AGENT_CLEARING_PROCESS_TIMEOUT = 'agent_clearing_process_timeout';

    public const AGENT_UNAVAILABLE = 'agent_unavailable';

    public const BENEFICIARY_AGENT_UNAVAILABLE = 'beneficiary_agent_unavailable';

    public const BENEFICIARY_AGENT_CLEARING_PROCESS_ERROR = 'beneficiary_agent_clearing_process_error';

    public const AGENT_CLEARING_PROCESS_ERROR = 'agent_clearing_process_error';

    public const BLOCKED_ACCOUNT = 'blocked_account';

    public const TRANSACTION_FORBIDDEN = 'transaction_forbidden';

    public const INVALID_BANK_OPERATION_CODE = 'invalid_bank_operation_code';

    public const ORIGINAL_PAYMENT_NOT_RECEIVED = 'original_payment_not_received';

    public const AGENT_SUSPENDED = 'agent_suspended';

    public const BENEFICIARY_AGENT_SUSPENDED = 'beneficiary_agent_suspended';

    public const AMOUNT_NOT_ALLOWED = 'amount_not_allowed';

    public const DUPLICATE_PAYMENT = 'duplicate_payment';

    public const AMOUNT_EXCEEDS_SETTLEMENT_LIMIT = 'amount_exceeds_settlement_limit';

    public const INVALID_BENEFICIARY_ADDRESS = 'invalid_beneficiary_address';

    public const INVALID_BENEFICIARY_AGENT_BIC = 'invalid_beneficiary_agent_BIC';

    public const INVALID_DEBTOR_AGENT_BIC = 'invalid_debtor_agent_BIC';

    public const CUSTOMER_REASON_UNKNOWN = 'customer_reason_unknown';

    public const AGENT_REASON_UNKNOWN = 'agent_reason_unknown';

    public const INVALID_BANK_ID = 'invalid_bank_ID';

    public const INVALID_DEBTOR_DETAILS = 'invalid_debtor_details';

    public const REGULATORY_REASON = 'regulatory_reason';

    public const AMOUNT_INVALID_OR_MISSING = 'amount_invalid_or_missing';

    public const END_TO_END_ID_MISSING_OR_INVALID = 'end_to_end_id_missing_or_invalid';

    public const TRANSACTION_TYPE_NOT_SUPPORTED = 'transaction_type_not_supported';

    private const _ALL_VALUES = [
        self::ACCEPTED,
        self::INVALID_BENEFICIARY_DETAILS,
        self::BANKID_NOT_PROVISIONED,
        self::UNKNOWN_ACCOUNTNUMBER,
        self::CUSTOMER_CHECK_FAILED,
        self::SCHEME_TIMEOUT,
        self::INCORRECT_REFERENCE_VALIDATION_TYPE,
        self::INCORRECT_REFERENCE_SECONDARY_IDENTIFICATION,
        self::INCORRECT_REFERENCE_REFERENCE_MASK,
        self::ACCOUNT_CLOSED,
        self::ACCOUNT_CLOSED_BUSINESS_REASONS,
        self::ACCOUNT_CLOSED_STOPPED,
        self::ACCOUNT_CLOSED_CURRENCY,
        self::ACCOUNT_CLOSED_TRANSFERRED,
        self::ACCOUNT_CLOSED_BENEFICIARY_DECEASED,
        self::ACCOUNT_CLOSED_BENEFICIARY_SENSITIVITIES,
        self::ACCOUNT_CLOSED_TERMS_AND_CONDITIONS,
        self::BENEFICIARY_AGENT_CLEARING_PROCESS_TIMEOUT,
        self::AGENT_CLEARING_PROCESS_TIMEOUT,
        self::AGENT_UNAVAILABLE,
        self::BENEFICIARY_AGENT_UNAVAILABLE,
        self::BENEFICIARY_AGENT_CLEARING_PROCESS_ERROR,
        self::AGENT_CLEARING_PROCESS_ERROR,
        self::BLOCKED_ACCOUNT,
        self::TRANSACTION_FORBIDDEN,
        self::INVALID_BANK_OPERATION_CODE,
        self::ORIGINAL_PAYMENT_NOT_RECEIVED,
        self::AGENT_SUSPENDED,
        self::BENEFICIARY_AGENT_SUSPENDED,
        self::AMOUNT_NOT_ALLOWED,
        self::DUPLICATE_PAYMENT,
        self::AMOUNT_EXCEEDS_SETTLEMENT_LIMIT,
        self::INVALID_BENEFICIARY_ADDRESS,
        self::INVALID_BENEFICIARY_AGENT_BIC,
        self::INVALID_DEBTOR_AGENT_BIC,
        self::CUSTOMER_REASON_UNKNOWN,
        self::AGENT_REASON_UNKNOWN,
        self::INVALID_BANK_ID,
        self::INVALID_DEBTOR_DETAILS,
        self::REGULATORY_REASON,
        self::AMOUNT_INVALID_OR_MISSING,
        self::END_TO_END_ID_MISSING_OR_INVALID,
        self::TRANSACTION_TYPE_NOT_SUPPORTED
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for PaymentAdmissionStatusReasonEnum.");
    }
}
