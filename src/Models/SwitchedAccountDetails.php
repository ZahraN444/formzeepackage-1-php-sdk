<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

/**
 * Alternate Account details to use in case the account has been switched away from this organisation.
 */
class SwitchedAccountDetails implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountNumber;

    /**
     * @var string
     */
    private $accountNumberCode;

    /**
     * @var int|null
     */
    private $accountType = 0;

    /**
     * @var AccountHoldingEntity
     */
    private $accountWith;

    /**
     * @var \DateTime
     */
    private $switchedEffectiveDate;

    /**
     * @param string $accountNumber
     * @param AccountHoldingEntity $accountWith
     * @param \DateTime $switchedEffectiveDate
     */
    public function __construct(
        string $accountNumber,
        AccountHoldingEntity $accountWith,
        \DateTime $switchedEffectiveDate
    ) {
        $this->accountNumber = $accountNumber;
        $this->accountWith = $accountWith;
        $this->switchedEffectiveDate = $switchedEffectiveDate;
    }

    /**
     * Returns Account Number.
     * Switched account number. Must be a UK account number, maximum length 8 characters.
     */
    public function getAccountNumber(): string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * Switched account number. Must be a UK account number, maximum length 8 characters.
     *
     * @required
     * @maps account_number
     */
    public function setAccountNumber(string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Account Number Code.
     * ISO 20022 code used to identify the type of account number being used
     */
    public function getAccountNumberCode(): string
    {
        return $this->accountNumberCode;
    }

    /**
     * Sets Account Number Code.
     * ISO 20022 code used to identify the type of account number being used
     *
     * @maps account_number_code
     */
    public function setAccountNumberCode(string $accountNumberCode): void
    {
        $this->accountNumberCode = $accountNumberCode;
    }

    /**
     * Returns Account Type.
     * The type of the account provided in account_number. Only required if requested by the beneficiary
     * party.
     */
    public function getAccountType(): ?int
    {
        return $this->accountType;
    }

    /**
     * Sets Account Type.
     * The type of the account provided in account_number. Only required if requested by the beneficiary
     * party.
     *
     * @maps account_type
     */
    public function setAccountType(?int $accountType): void
    {
        $this->accountType = $accountType;
    }

    /**
     * Returns Account With.
     * Information about the financial institution servicing the account.
     */
    public function getAccountWith(): AccountHoldingEntity
    {
        return $this->accountWith;
    }

    /**
     * Sets Account With.
     * Information about the financial institution servicing the account.
     *
     * @required
     * @maps account_with
     */
    public function setAccountWith(AccountHoldingEntity $accountWith): void
    {
        $this->accountWith = $accountWith;
    }

    /**
     * Returns Switched Effective Date.
     * Starting date for the account to be effectively switched
     */
    public function getSwitchedEffectiveDate(): \DateTime
    {
        return $this->switchedEffectiveDate;
    }

    /**
     * Sets Switched Effective Date.
     * Starting date for the account to be effectively switched
     *
     * @required
     * @maps switched_effective_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setSwitchedEffectiveDate(\DateTime $switchedEffectiveDate): void
    {
        $this->switchedEffectiveDate = $switchedEffectiveDate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['account_number']          = $this->accountNumber;
        $json['account_number_code']     = $this->accountNumberCode;
        if (isset($this->accountType)) {
            $json['account_type']        = $this->accountType;
        }
        $json['account_with']            = $this->accountWith;
        $json['switched_effective_date'] = DateTimeHelper::toSimpleDate($this->switchedEffectiveDate);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
