<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use Form3PublicAPILib\Utils\DateTimeHelper;
use stdClass;

class QueryAttributes implements \JsonSerializable
{
    /**
     * @var RequestForInformationAgent[]|null
     */
    private $agents;

    /**
     * @var bool|null
     */
    private $autoHandled;

    /**
     * @var RequestForInformationCreatorParty|null
     */
    private $creatorParty;

    /**
     * @var string|null
     */
    private $messageId;

    /**
     * @var \DateTime|null
     */
    private $processingDate;

    /**
     * @var string[]|null
     */
    private $querySubTypes;

    /**
     * @var string
     */
    private $queryType;

    /**
     * @var RequestForInformationReference[]|null
     */
    private $references;

    /**
     * @var RequestForInformationRequestedInformation[]|null
     */
    private $requestedInformation;

    /**
     * @var string|null
     */
    private $schemeTransactionId;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $unstructuredMessage;

    /**
     * @param string $queryType
     */
    public function __construct(string $queryType)
    {
        $this->queryType = $queryType;
    }

    /**
     * Returns Agents.
     *
     * @return RequestForInformationAgent[]|null
     */
    public function getAgents(): ?array
    {
        return $this->agents;
    }

    /**
     * Sets Agents.
     *
     * @maps agents
     *
     * @param RequestForInformationAgent[]|null $agents
     */
    public function setAgents(?array $agents): void
    {
        $this->agents = $agents;
    }

    /**
     * Returns Auto Handled.
     */
    public function getAutoHandled(): ?bool
    {
        return $this->autoHandled;
    }

    /**
     * Sets Auto Handled.
     *
     * @maps auto_handled
     */
    public function setAutoHandled(?bool $autoHandled): void
    {
        $this->autoHandled = $autoHandled;
    }

    /**
     * Returns Creator Party.
     */
    public function getCreatorParty(): ?RequestForInformationCreatorParty
    {
        return $this->creatorParty;
    }

    /**
     * Sets Creator Party.
     *
     * @maps creator_party
     */
    public function setCreatorParty(?RequestForInformationCreatorParty $creatorParty): void
    {
        $this->creatorParty = $creatorParty;
    }

    /**
     * Returns Message Id.
     */
    public function getMessageId(): ?string
    {
        return $this->messageId;
    }

    /**
     * Sets Message Id.
     *
     * @maps message_id
     */
    public function setMessageId(?string $messageId): void
    {
        $this->messageId = $messageId;
    }

    /**
     * Returns Processing Date.
     */
    public function getProcessingDate(): ?\DateTime
    {
        return $this->processingDate;
    }

    /**
     * Sets Processing Date.
     *
     * @maps processing_date
     * @factory \Form3PublicAPILib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setProcessingDate(?\DateTime $processingDate): void
    {
        $this->processingDate = $processingDate;
    }

    /**
     * Returns Query Sub Types.
     *
     * @return string[]|null
     */
    public function getQuerySubTypes(): ?array
    {
        return $this->querySubTypes;
    }

    /**
     * Sets Query Sub Types.
     *
     * @maps query_sub_types
     *
     * @param string[]|null $querySubTypes
     */
    public function setQuerySubTypes(?array $querySubTypes): void
    {
        $this->querySubTypes = $querySubTypes;
    }

    /**
     * Returns Query Type.
     */
    public function getQueryType(): string
    {
        return $this->queryType;
    }

    /**
     * Sets Query Type.
     *
     * @required
     * @maps query_type
     * @factory \Form3PublicAPILib\Models\QueryTypeEnum::checkValue
     */
    public function setQueryType(string $queryType): void
    {
        $this->queryType = $queryType;
    }

    /**
     * Returns References.
     *
     * @return RequestForInformationReference[]|null
     */
    public function getReferences(): ?array
    {
        return $this->references;
    }

    /**
     * Sets References.
     *
     * @maps references
     *
     * @param RequestForInformationReference[]|null $references
     */
    public function setReferences(?array $references): void
    {
        $this->references = $references;
    }

    /**
     * Returns Requested Information.
     *
     * @return RequestForInformationRequestedInformation[]|null
     */
    public function getRequestedInformation(): ?array
    {
        return $this->requestedInformation;
    }

    /**
     * Sets Requested Information.
     *
     * @maps requested_information
     *
     * @param RequestForInformationRequestedInformation[]|null $requestedInformation
     */
    public function setRequestedInformation(?array $requestedInformation): void
    {
        $this->requestedInformation = $requestedInformation;
    }

    /**
     * Returns Scheme Transaction Id.
     */
    public function getSchemeTransactionId(): ?string
    {
        return $this->schemeTransactionId;
    }

    /**
     * Sets Scheme Transaction Id.
     *
     * @maps scheme_transaction_id
     */
    public function setSchemeTransactionId(?string $schemeTransactionId): void
    {
        $this->schemeTransactionId = $schemeTransactionId;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     * @factory \Form3PublicAPILib\Models\ReportRequestStatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Unstructured Message.
     */
    public function getUnstructuredMessage(): ?string
    {
        return $this->unstructuredMessage;
    }

    /**
     * Sets Unstructured Message.
     *
     * @maps unstructured_message
     */
    public function setUnstructuredMessage(?string $unstructuredMessage): void
    {
        $this->unstructuredMessage = $unstructuredMessage;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->agents)) {
            $json['agents']                = $this->agents;
        }
        if (isset($this->autoHandled)) {
            $json['auto_handled']          = $this->autoHandled;
        }
        if (isset($this->creatorParty)) {
            $json['creator_party']         = $this->creatorParty;
        }
        if (isset($this->messageId)) {
            $json['message_id']            = $this->messageId;
        }
        if (isset($this->processingDate)) {
            $json['processing_date']       = DateTimeHelper::toSimpleDate($this->processingDate);
        }
        if (isset($this->querySubTypes)) {
            $json['query_sub_types']       = $this->querySubTypes;
        }
        $json['query_type']                = QueryTypeEnum::checkValue($this->queryType);
        if (isset($this->references)) {
            $json['references']            = $this->references;
        }
        if (isset($this->requestedInformation)) {
            $json['requested_information'] = $this->requestedInformation;
        }
        if (isset($this->schemeTransactionId)) {
            $json['scheme_transaction_id'] = $this->schemeTransactionId;
        }
        if (isset($this->status)) {
            $json['status']                = ReportRequestStatusEnum::checkValue($this->status);
        }
        if (isset($this->unstructuredMessage)) {
            $json['unstructured_message']  = $this->unstructuredMessage;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
