<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class SchemeFileRelationships implements \JsonSerializable
{
    /**
     * @var SchemeFileAdmissions|null
     */
    private $schemeFileAdmissions;

    /**
     * @var SchemeFileSubmission2|null
     */
    private $schemeFileSubmission;

    /**
     * Returns Scheme File Admissions.
     */
    public function getSchemeFileAdmissions(): ?SchemeFileAdmissions
    {
        return $this->schemeFileAdmissions;
    }

    /**
     * Sets Scheme File Admissions.
     *
     * @maps scheme_file_admissions
     */
    public function setSchemeFileAdmissions(?SchemeFileAdmissions $schemeFileAdmissions): void
    {
        $this->schemeFileAdmissions = $schemeFileAdmissions;
    }

    /**
     * Returns Scheme File Submission.
     */
    public function getSchemeFileSubmission(): ?SchemeFileSubmission2
    {
        return $this->schemeFileSubmission;
    }

    /**
     * Sets Scheme File Submission.
     *
     * @maps scheme_file_submission
     */
    public function setSchemeFileSubmission(?SchemeFileSubmission2 $schemeFileSubmission): void
    {
        $this->schemeFileSubmission = $schemeFileSubmission;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->schemeFileAdmissions)) {
            $json['scheme_file_admissions'] = $this->schemeFileAdmissions;
        }
        if (isset($this->schemeFileSubmission)) {
            $json['scheme_file_submission'] = $this->schemeFileSubmission;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
