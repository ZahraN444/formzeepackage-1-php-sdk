<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use Form3PublicAPILib\Models\Beneficiary;
use Form3PublicAPILib\Models\BeneficiaryAccount;
use Form3PublicAPILib\Models\Debtor;
use Form3PublicAPILib\Models\DebtorAccount;
use Form3PublicAPILib\Models\ForwardedPayment;
use Form3PublicAPILib\Models\ForwardingPayment;
use Form3PublicAPILib\Models\FxDeal;
use Form3PublicAPILib\Models\PaymentAdmission2;
use Form3PublicAPILib\Models\PaymentAdvice1;
use Form3PublicAPILib\Models\PaymentRecall;
use Form3PublicAPILib\Models\PaymentRelationships;
use Form3PublicAPILib\Models\PaymentReturn;
use Form3PublicAPILib\Models\PaymentReversal;
use Form3PublicAPILib\Models\PaymentSubmission2;

/**
 * Builder for model PaymentRelationships
 *
 * @see PaymentRelationships
 */
class PaymentRelationshipsBuilder
{
    /**
     * @var PaymentRelationships
     */
    private $instance;

    private function __construct(PaymentRelationships $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new payment relationships Builder object.
     */
    public static function init(): self
    {
        return new self(new PaymentRelationships());
    }

    /**
     * Sets beneficiary field.
     */
    public function beneficiary(?Beneficiary $value): self
    {
        $this->instance->setBeneficiary($value);
        return $this;
    }

    /**
     * Sets beneficiary account field.
     */
    public function beneficiaryAccount(?BeneficiaryAccount $value): self
    {
        $this->instance->setBeneficiaryAccount($value);
        return $this;
    }

    /**
     * Sets debtor field.
     */
    public function debtor(?Debtor $value): self
    {
        $this->instance->setDebtor($value);
        return $this;
    }

    /**
     * Sets debtor account field.
     */
    public function debtorAccount(?DebtorAccount $value): self
    {
        $this->instance->setDebtorAccount($value);
        return $this;
    }

    /**
     * Sets forwarded payment field.
     */
    public function forwardedPayment(?ForwardedPayment $value): self
    {
        $this->instance->setForwardedPayment($value);
        return $this;
    }

    /**
     * Sets forwarding payment field.
     */
    public function forwardingPayment(?ForwardingPayment $value): self
    {
        $this->instance->setForwardingPayment($value);
        return $this;
    }

    /**
     * Sets fx deal field.
     */
    public function fxDeal(?FxDeal $value): self
    {
        $this->instance->setFxDeal($value);
        return $this;
    }

    /**
     * Sets payment admission field.
     */
    public function paymentAdmission(?PaymentAdmission2 $value): self
    {
        $this->instance->setPaymentAdmission($value);
        return $this;
    }

    /**
     * Sets payment advice field.
     */
    public function paymentAdvice(?PaymentAdvice1 $value): self
    {
        $this->instance->setPaymentAdvice($value);
        return $this;
    }

    /**
     * Sets payment recall field.
     */
    public function paymentRecall(?PaymentRecall $value): self
    {
        $this->instance->setPaymentRecall($value);
        return $this;
    }

    /**
     * Sets payment return field.
     */
    public function paymentReturn(?PaymentReturn $value): self
    {
        $this->instance->setPaymentReturn($value);
        return $this;
    }

    /**
     * Sets payment reversal field.
     */
    public function paymentReversal(?PaymentReversal $value): self
    {
        $this->instance->setPaymentReversal($value);
        return $this;
    }

    /**
     * Sets payment submission field.
     */
    public function paymentSubmission(?PaymentSubmission2 $value): self
    {
        $this->instance->setPaymentSubmission($value);
        return $this;
    }

    /**
     * Initializes a new payment relationships object.
     */
    public function build(): PaymentRelationships
    {
        return CoreHelper::clone($this->instance);
    }
}
