<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use Form3PublicAPILib\Models\Notification;

/**
 * Builder for model Notification
 *
 * @see Notification
 */
class NotificationBuilder
{
    /**
     * @var Notification
     */
    private $instance;

    private function __construct(Notification $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new notification Builder object.
     */
    public static function init(): self
    {
        return new self(new Notification());
    }

    /**
     * Sets action time field.
     */
    public function actionTime(?string $value): self
    {
        $this->instance->setActionTime($value);
        return $this;
    }

    /**
     * Sets actioned by field.
     */
    public function actionedBy(?string $value): self
    {
        $this->instance->setActionedBy($value);
        return $this;
    }

    /**
     * Sets data field.
     */
    public function data(?array $value): self
    {
        $this->instance->setData($value);
        return $this;
    }

    /**
     * Sets data record type field.
     */
    public function dataRecordType(?string $value): self
    {
        $this->instance->setDataRecordType($value);
        return $this;
    }

    /**
     * Sets event type field.
     */
    public function eventType(?string $value): self
    {
        $this->instance->setEventType($value);
        return $this;
    }

    /**
     * Sets id field.
     */
    public function id(?string $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets organisation id field.
     */
    public function organisationId(?string $value): self
    {
        $this->instance->setOrganisationId($value);
        return $this;
    }

    /**
     * Sets record type field.
     */
    public function recordType(?string $value): self
    {
        $this->instance->setRecordType($value);
        return $this;
    }

    /**
     * Sets version field.
     */
    public function version(?int $value): self
    {
        $this->instance->setVersion($value);
        return $this;
    }

    /**
     * Initializes a new notification object.
     */
    public function build(): Notification
    {
        return CoreHelper::clone($this->instance);
    }
}
