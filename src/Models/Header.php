<?php

declare(strict_types=1);

/*
 * Form3PublicAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace Form3PublicAPILib\Models;

use stdClass;

class Header implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $destination;

    /**
     * @var string|null
     */
    private $messageType;

    /**
     * @var string|null
     */
    private $priority;

    /**
     * @var string|null
     */
    private $recipient;

    /**
     * @var string|null
     */
    private $source;

    /**
     * @var string|null
     */
    private $userReference;

    /**
     * Returns Destination.
     * Destination SWIFT logical terminal address. Complete 12-character SWIFT destination, including BIC
     * (x8), logical terminal code (x1) and branch code (x).
     */
    public function getDestination(): ?string
    {
        return $this->destination;
    }

    /**
     * Sets Destination.
     * Destination SWIFT logical terminal address. Complete 12-character SWIFT destination, including BIC
     * (x8), logical terminal code (x1) and branch code (x).
     *
     * @maps destination
     */
    public function setDestination(?string $destination): void
    {
        $this->destination = $destination;
    }

    /**
     * Returns Message Type.
     * The message type of the SWIFT payment, has to match `[A-Z]{2}[0-9]{3}`. Currently `MT103` is the
     * only supported value
     */
    public function getMessageType(): ?string
    {
        return $this->messageType;
    }

    /**
     * Sets Message Type.
     * The message type of the SWIFT payment, has to match `[A-Z]{2}[0-9]{3}`. Currently `MT103` is the
     * only supported value
     *
     * @maps message_type
     */
    public function setMessageType(?string $messageType): void
    {
        $this->messageType = $messageType;
    }

    /**
     * Returns Priority.
     * SWIFT priority. Either `Normal` or `Priority`.
     */
    public function getPriority(): ?string
    {
        return $this->priority;
    }

    /**
     * Sets Priority.
     * SWIFT priority. Either `Normal` or `Priority`.
     *
     * @maps priority
     */
    public function setPriority(?string $priority): void
    {
        $this->priority = $priority;
    }

    /**
     * Returns Recipient.
     * The destination SWIFT BIC for SWIFT MT messages being sent by Form3 client to SWIFT. Formatted as
     * BIC8 or BIC11.
     */
    public function getRecipient(): ?string
    {
        return $this->recipient;
    }

    /**
     * Sets Recipient.
     * The destination SWIFT BIC for SWIFT MT messages being sent by Form3 client to SWIFT. Formatted as
     * BIC8 or BIC11.
     *
     * @maps recipient
     */
    public function setRecipient(?string $recipient): void
    {
        $this->recipient = $recipient;
    }

    /**
     * Returns Source.
     * The source SWIFT BIC for SWIFT MT messages being received by Form3 client from SWIFT. Formatted as
     * BIC8 or BIC11.
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     * The source SWIFT BIC for SWIFT MT messages being received by Form3 client from SWIFT. Formatted as
     * BIC8 or BIC11.
     *
     * @maps source
     */
    public function setSource(?string $source): void
    {
        $this->source = $source;
    }

    /**
     * Returns User Reference.
     * Message User Reference (MUR) value, which can be up to 16 characters, and will be returned in the
     * ACK
     */
    public function getUserReference(): ?string
    {
        return $this->userReference;
    }

    /**
     * Sets User Reference.
     * Message User Reference (MUR) value, which can be up to 16 characters, and will be returned in the
     * ACK
     *
     * @maps user_reference
     */
    public function setUserReference(?string $userReference): void
    {
        $this->userReference = $userReference;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->destination)) {
            $json['destination']    = $this->destination;
        }
        if (isset($this->messageType)) {
            $json['message_type']   = $this->messageType;
        }
        if (isset($this->priority)) {
            $json['priority']       = $this->priority;
        }
        if (isset($this->recipient)) {
            $json['recipient']      = $this->recipient;
        }
        if (isset($this->source)) {
            $json['source']         = $this->source;
        }
        if (isset($this->userReference)) {
            $json['user_reference'] = $this->userReference;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
